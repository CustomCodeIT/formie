/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/payments/stripe.js":
/*!***********************************!*\
  !*** ./src/js/payments/stripe.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieStripe\": () => (/* binding */ FormieStripe)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./src/js/utils/utils.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\nvar FormieStripe = /*#__PURE__*/function () {\n  function FormieStripe() {\n    var _this = this;\n\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, FormieStripe);\n\n    this.$form = settings.$form;\n    this.form = this.$form.form;\n    this.$field = settings.$field;\n    this.$input = this.$field.querySelector('[data-fui-stripe-elements]');\n\n    if (!this.$input) {\n      console.error('Unable to find Stripe Elements placeholder for #' + this.formId + ' [data-fui-stripe-elements]');\n      return;\n    }\n\n    this.publishableKey = settings.publishableKey;\n    this.billingDetails = settings.billingDetails || {};\n    this.hidePostalCode = settings.hidePostalCode || false;\n    this.hideIcon = settings.hideIcon || false;\n    this.stripeScriptId = 'FORMIE_STRIPE_SCRIPT';\n\n    if (!this.publishableKey) {\n      console.error('Missing publishable key for Stripe.');\n      return;\n    } // Only initialize the field if it's visible. Use `IntersectionObserver` to check when visible\n    // and also when hidden (navigating to other pages) to destroy it. Otherwise, Stripe elements\n    // will listen to page submit events and validate, preventing from going back a page.\n\n\n    var observer = new IntersectionObserver(function (entries) {\n      if (entries[0]['intersectionRatio'] == 0) {\n        // Field is hidden, do reset everything\n        if (_this.cardElement) {\n          // Kill off Stripe items\n          _this.cardElement.destroy();\n\n          _this.cardElement = null;\n          _this.stripe = null; // Remove unique event listeners\n\n          _this.form.removeEventListener((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('onFormiePaymentValidate', 'stripe'));\n\n          _this.form.removeEventListener((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('onAfterFormieSubmit', 'stripe'));\n\n          _this.form.removeEventListener((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('FormiePaymentStripe3DS', 'stripe'));\n        }\n      } else {\n        _this.initCardField();\n      }\n    }, {\n      root: this.$form\n    }); // Watch for when the input is visible/hidden, in the context of the form\n\n    observer.observe(this.$input);\n  }\n\n  _createClass(FormieStripe, [{\n    key: \"initCardField\",\n    value: function initCardField() {\n      var _this2 = this;\n\n      // Fetch and attach the script only once - this is in case there are multiple forms on the page.\n      // They all go to a single callback which resolves its loaded state\n      if (!document.getElementById(this.stripeScriptId)) {\n        var $script = document.createElement('script');\n        $script.id = this.stripeScriptId;\n        $script.src = 'https://js.stripe.com/v3';\n        $script.async = true;\n        $script.defer = true; // Wait until Stripe.js has loaded, then initialize\n\n        $script.onload = function () {\n          _this2.mountCard();\n        };\n\n        document.body.appendChild($script);\n      } else {\n        this.mountCard();\n      } // Attach custom event listeners on the form\n\n\n      this.form.addEventListener(this.$form, (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('onFormiePaymentValidate', 'stripe'), this.onValidate.bind(this));\n      this.form.addEventListener(this.$form, (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('onAfterFormieSubmit', 'stripe'), this.onAfterSubmit.bind(this));\n      this.form.addEventListener(this.$form, (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('FormiePaymentStripe3DS', 'stripe'), this.onValidate3DS.bind(this));\n    }\n  }, {\n    key: \"mountCard\",\n    value: function mountCard() {\n      this.stripe = Stripe(this.publishableKey);\n      var elements = this.stripe.elements();\n      var options = {\n        classes: {\n          focus: 'StripeElement--focus fui-focus',\n          invalid: 'StripeElement--invalid fui-error'\n        },\n        hidePostalCode: this.hidePostalCode,\n        iconStyle: 'default',\n        hideIcon: this.hideIcon\n      }; // Emit an \"beforeInit\" event. This can directly modify the `options` param\n\n      var beforeInitEvent = new CustomEvent('beforeInit', {\n        bubbles: true,\n        detail: {\n          stripe: this,\n          options: options\n        }\n      });\n      this.$field.dispatchEvent(beforeInitEvent);\n      this.cardElement = elements.create('card', options);\n      this.cardElement.mount(this.$input);\n    }\n  }, {\n    key: \"onValidate\",\n    value: function onValidate(e) {\n      var _this3 = this;\n\n      // Don't validate if we're going back in the form\n      // Check if the form has an invalid flag set, don't bother going further\n      if (this.$form.goBack || e.detail.invalid) {\n        return;\n      }\n\n      e.preventDefault(); // Save for later to trigger real submit\n\n      this.submitHandler = e.detail.submitHandler;\n      this.removeError();\n      this.stripe.createPaymentMethod('card', this.cardElement, this.getBillingData()).then(function (result) {\n        if (result.error) {\n          return _this3.addError(result.error.message);\n        } // Append an input so it's not namespaced with Twig\n\n\n        _this3.updateInputs('stripePaymentId', result.paymentMethod.id);\n\n        _this3.submitHandler.submitForm();\n      });\n    }\n  }, {\n    key: \"addLoading\",\n    value: function addLoading() {\n      if (this.form.formTheme) {\n        this.form.formTheme.addLoading();\n      }\n    }\n  }, {\n    key: \"removeLoading\",\n    value: function removeLoading() {\n      if (this.form.formTheme) {\n        this.form.formTheme.removeLoading();\n      }\n    }\n  }, {\n    key: \"onValidate3DS\",\n    value: function onValidate3DS(e) {\n      var _this4 = this;\n\n      var data = e.detail.data; // Keep the spinner going for 3DS\n\n      this.addLoading();\n\n      if (data.subscription_id) {\n        this.stripe.handleCardPayment(data.client_secret).then(function (result) {\n          _this4.removeError();\n\n          if (result.error) {\n            _this4.removeLoading();\n\n            return _this4.addError(result.error.message);\n          } // Append an input so it's not namespaced with Twig\n\n\n          _this4.updateInputs('stripeSubscriptionId', data.subscription_id);\n\n          _this4.submitHandler.submitForm();\n        });\n      } else {\n        this.stripe.handleCardAction(data.client_secret).then(function (result) {\n          _this4.removeError();\n\n          if (result.error) {\n            _this4.removeLoading();\n\n            return _this4.addError(result.error.message);\n          } // Append an input so it's not namespaced with Twig\n\n\n          _this4.updateInputs('stripePaymentIntentId', result.paymentIntent.id);\n\n          _this4.submitHandler.submitForm();\n        });\n      }\n    }\n  }, {\n    key: \"onAfterSubmit\",\n    value: function onAfterSubmit(e) {\n      // Clear the Stripe form\n      this.cardElement.clear(); // Reset all hidden inputs\n\n      this.updateInputs('stripePaymentId', '');\n      this.updateInputs('stripePaymentIntentId', '');\n      this.updateInputs('stripeSubscriptionId', '');\n    }\n  }, {\n    key: \"removeError\",\n    value: function removeError() {\n      this.$field.classList.remove('fui-error');\n      var $error = this.$field.querySelector('.fui-error-message');\n\n      if ($error) {\n        $error.remove();\n      }\n    }\n  }, {\n    key: \"addError\",\n    value: function addError(message) {\n      this.$field.classList.add('fui-error');\n      var $fieldContainer = this.$field.querySelector('.fui-field-container');\n\n      if (!$fieldContainer) {\n        return console.error('Unable to find `.fui-field-container` to add error message.');\n      }\n\n      var $error = document.createElement('div');\n      $error.className = 'fui-error-message';\n      $error.textContent = message;\n      $fieldContainer.appendChild($error);\n      this.submitHandler.formSubmitError();\n    }\n  }, {\n    key: \"updateInputs\",\n    value: function updateInputs(name, value) {\n      var $input = this.$field.querySelector('[name*=\"' + name + '\"]');\n\n      if ($input) {\n        $input.value = value;\n      }\n    }\n  }, {\n    key: \"getBillingData\",\n    value: function getBillingData() {\n      if (!this.billingDetails) {\n        return {};\n      }\n\n      var billing = {};\n\n      if (this.billingDetails.billingName) {\n        var value = this.getFieldValue(this.billingDetails.billingName);\n\n        if (value) {\n          billing.name = value;\n        }\n      }\n\n      if (this.billingDetails.billingEmail) {\n        var value = this.getFieldValue(this.billingDetails.billingEmail);\n\n        if (value) {\n          billing.email = value;\n        }\n      }\n\n      if (this.billingDetails.billingAddress) {\n        billing.address = {};\n        var address1 = this.getFieldValue(this.billingDetails.billingAddress + '[address1]');\n        var address2 = this.getFieldValue(this.billingDetails.billingAddress + '[address2]');\n        var address3 = this.getFieldValue(this.billingDetails.billingAddress + '[address3]');\n        var city = this.getFieldValue(this.billingDetails.billingAddress + '[city]');\n        var zip = this.getFieldValue(this.billingDetails.billingAddress + '[zip]');\n        var state = this.getFieldValue(this.billingDetails.billingAddress + '[state]');\n        var country = this.getFieldValue(this.billingDetails.billingAddress + '[country]');\n\n        if (address1) {\n          billing.address.line1 = address1;\n        }\n\n        if (address2) {\n          billing.address.line2 = address2;\n        }\n\n        if (address3) {\n          billing.address.line3 = address3;\n        }\n\n        if (city) {\n          billing.address.city = city;\n        }\n\n        if (zip) {\n          billing.address.postal_code = zip;\n        }\n\n        if (state) {\n          billing.address.state = state;\n        }\n\n        if (country) {\n          billing.address.country = country;\n        }\n      } // Emit an \"modifyBillingDetails\" event. This can directly modify the `billing` param\n\n\n      var modifyBillingDetailsEvent = new CustomEvent('modifyBillingDetails', {\n        bubbles: true,\n        detail: {\n          stripe: this,\n          billing: billing\n        }\n      });\n      return {\n        billing_details: billing\n      };\n    }\n  }, {\n    key: \"getFieldValue\",\n    value: function getFieldValue(handle) {\n      var value = '';\n      handle = this.getFieldName(handle); // We'll always get back multiple inputs to normalise checkbox/radios\n\n      var $fields = this.getFormField(handle);\n\n      if ($fields) {\n        $fields.forEach(function ($field) {\n          if ($field.type === 'checkbox' || $field.type === 'radio') {\n            if ($field.checked) {\n              return value = $field.value;\n            }\n          } else {\n            return value = $field.value;\n          }\n        });\n      }\n\n      return value;\n    }\n  }, {\n    key: \"getFormField\",\n    value: function getFormField(handle) {\n      // Get the field(s) we're targeting to watch for changes. Note we need to handle multiple fields (checkboxes)\n      var $fields = this.$form.querySelectorAll(\"[name=\\\"\".concat(handle, \"\\\"]\")); // Check if we're dealing with multiple fields, like checkboxes. This overrides the above\n\n      var $multiFields = this.$form.querySelectorAll(\"[name=\\\"\".concat(handle, \"[]\\\"]\"));\n\n      if ($multiFields.length) {\n        $fields = $multiFields;\n      }\n\n      return $fields;\n    }\n  }, {\n    key: \"getFieldName\",\n    value: function getFieldName(handle) {\n      // Normalise the handle first\n      handle = handle.replace('{', '').replace('}', '').replace(']', '').split('[').join('][');\n      return 'fields[' + handle + ']';\n    }\n  }]);\n\n  return FormieStripe;\n}();\nwindow.FormieStripe = FormieStripe;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/payments/stripe.js\n");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eventKey\": () => (/* binding */ eventKey),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty),\n/* harmony export */   \"toBoolean\": () => (/* binding */ toBoolean)\n/* harmony export */ });\nvar isEmpty = function isEmpty(obj) {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\nvar toBoolean = function toBoolean(val) {\n  return !/^(?:f(?:alse)?|no?|0+)$/i.test(val) && !!val;\n};\nvar eventKey = function eventKey(eventName) {\n  var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!namespace) {\n    namespace = Math.random().toString(36).substr(2, 5);\n  }\n\n  return eventName + '.' + namespace;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBTUEsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU0MsR0FBVCxFQUFjO0VBQ2pDLE9BQU9BLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEdBQVosRUFBaUJHLE1BQWpCLEtBQTRCLENBQW5DLElBQXdDSCxHQUFHLENBQUNJLFdBQUosS0FBb0JILE1BQW5FO0FBQ0gsQ0FGTTtBQUlBLElBQU1JLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVNDLEdBQVQsRUFBYztFQUNuQyxPQUFPLENBQUMsMkJBQTJCQyxJQUEzQixDQUFnQ0QsR0FBaEMsQ0FBRCxJQUF5QyxDQUFDLENBQUNBLEdBQWxEO0FBQ0gsQ0FGTTtBQUlBLElBQU1FLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLFNBQVQsRUFBc0M7RUFBQSxJQUFsQkMsU0FBa0IsdUVBQU4sSUFBTTs7RUFDMUQsSUFBSSxDQUFDQSxTQUFMLEVBQWdCO0lBQ1pBLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxNQUFMLEdBQWNDLFFBQWQsQ0FBdUIsRUFBdkIsRUFBMkJDLE1BQTNCLENBQWtDLENBQWxDLEVBQXFDLENBQXJDLENBQVo7RUFDSDs7RUFFRCxPQUFPTCxTQUFTLEdBQUcsR0FBWixHQUFrQkMsU0FBekI7QUFDSCxDQU5NIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzL3V0aWxzLmpzP2Q5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IHRvQm9vbGVhbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAhL14oPzpmKD86YWxzZSk/fG5vP3wwKykkL2kudGVzdCh2YWwpICYmICEhdmFsO1xufTtcblxuZXhwb3J0IGNvbnN0IGV2ZW50S2V5ID0gZnVuY3Rpb24oZXZlbnROYW1lLCBuYW1lc3BhY2UgPSBudWxsKSB7XG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgbmFtZXNwYWNlID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZXZlbnROYW1lICsgJy4nICsgbmFtZXNwYWNlO1xufTtcblxuIl0sIm5hbWVzIjpbImlzRW1wdHkiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJ0b0Jvb2xlYW4iLCJ2YWwiLCJ0ZXN0IiwiZXZlbnRLZXkiLCJldmVudE5hbWUiLCJuYW1lc3BhY2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/utils.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/payments/stripe.js");
/******/ 	
/******/ })()
;