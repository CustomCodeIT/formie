/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/formie-form-base.js":
/*!************************************!*\
  !*** ./src/js/formie-form-base.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieFormBase\": () => (/* binding */ FormieFormBase)\n/* harmony export */ });\n/* harmony import */ var _formie_form_theme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formie-form-theme */ \"./src/js/formie-form-theme.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar globals = __webpack_require__(/*! ./utils/globals */ \"./src/js/utils/globals.js\");\n\n\nvar FormieFormBase = /*#__PURE__*/function () {\n  function FormieFormBase() {\n    var _this = this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, FormieFormBase);\n\n    this.formId = \"#\".concat(config.formHashId);\n    this.$form = document.querySelector(this.formId);\n    this.config = config;\n    this.settings = config.settings;\n    this.listeners = {};\n\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.form = this;\n\n    if (this.settings.outputJsTheme) {\n      this.formTheme = new _formie_form_theme__WEBPACK_IMPORTED_MODULE_0__.FormieFormTheme(this.config);\n    } // Add helper classes to fields when their inputs are focused, have values etc.\n\n\n    this.registerFieldEvents(this.$form); // Hijack the form's submit handler, in case we need to do something\n\n    this.addEventListener(this.$form, 'submit', function (e) {\n      e.preventDefault();\n\n      var beforeSubmitEvent = _this.eventObject('onBeforeFormieSubmit', {\n        submitHandler: _this\n      });\n\n      if (!_this.$form.dispatchEvent(beforeSubmitEvent)) {\n        return;\n      } // Add a little delay for UX\n\n\n      setTimeout(function () {\n        // Call the validation hooks\n        if (!_this.validate() || !_this.afterValidate()) {\n          return;\n        } // Trigger Captchas\n\n\n        if (!_this.validateCaptchas()) {\n          return;\n        } // Trigger Payment Integrations\n\n\n        if (!_this.validatePayment()) {\n          return;\n        } // Proceed with submitting the form, which raises other validation events\n\n\n        _this.submitForm();\n      }, 300);\n    }, false);\n  }\n\n  _createClass(FormieFormBase, [{\n    key: \"validate\",\n    value: function validate() {\n      // Create an event for front-end validation (our own JS)\n      var validateEvent = this.eventObject('onFormieValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"afterValidate\",\n    value: function afterValidate() {\n      // Create an event for after validation. This is mostly for third-parties.\n      var afterValidateEvent = this.eventObject('onAfterFormieValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(afterValidateEvent);\n    }\n  }, {\n    key: \"validateCaptchas\",\n    value: function validateCaptchas() {\n      // Create an event for captchas, separate to validation\n      var validateEvent = this.eventObject('onFormieCaptchaValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"validatePayment\",\n    value: function validatePayment() {\n      // Create an event for payments, separate to validation\n      var validateEvent = this.eventObject('onFormiePaymentValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      // Check if we're going back, and attach an input to tell formie not to validate\n      if (this.$form.goBack) {\n        var $backButtonInput = document.createElement('input');\n        $backButtonInput.setAttribute('type', 'hidden');\n        $backButtonInput.setAttribute('name', 'goingBack');\n        $backButtonInput.setAttribute('value', 'true');\n        this.$form.appendChild($backButtonInput);\n      }\n\n      var submitEvent = this.eventObject('onFormieSubmit', {\n        submitHandler: this\n      });\n\n      if (!this.$form.dispatchEvent(submitEvent)) {\n        return;\n      }\n\n      if (this.settings.submitMethod === 'ajax') {\n        this.formAfterSubmit();\n      } else {\n        this.$form.submit();\n      }\n    }\n  }, {\n    key: \"formAfterSubmit\",\n    value: function formAfterSubmit() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$form.dispatchEvent(new CustomEvent('onAfterFormieSubmit', {\n        bubbles: true,\n        detail: data\n      }));\n    }\n  }, {\n    key: \"formSubmitError\",\n    value: function formSubmitError() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$form.dispatchEvent(new CustomEvent('onFormieSubmitError', {\n        bubbles: true,\n        detail: data\n      }));\n    }\n  }, {\n    key: \"registerFieldEvents\",\n    value: function registerFieldEvents($element) {\n      var _this2 = this;\n\n      var $wrappers = $element.querySelectorAll('.fui-field');\n      $wrappers.forEach(function ($wrapper) {\n        var $input = $wrapper.querySelector('.fui-input, .fui-select');\n\n        if ($input) {\n          _this2.addEventListener($input, 'input', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('input', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          _this2.addEventListener($input, 'focus', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('focus', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          _this2.addEventListener($input, 'blur', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('blur', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          $wrapper.dispatchEvent(new CustomEvent('init', {\n            bubbles: false,\n            detail: {\n              input: $input\n            }\n          }));\n        }\n      });\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(element, event, func) {\n      this.listeners[event] = {\n        element: element,\n        func: func\n      };\n      element.addEventListener(event.split('.')[0], this.listeners[event].func);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(event) {\n      var eventInfo = this.listeners[event] || {};\n\n      if (eventInfo && eventInfo.element && eventInfo.func) {\n        eventInfo.element.removeEventListener(event.split('.')[0], eventInfo.func);\n        delete this.listeners[event];\n      }\n    }\n  }, {\n    key: \"eventObject\",\n    value: function eventObject(name, detail) {\n      return new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true,\n        detail: detail\n      });\n    }\n  }]);\n\n  return FormieFormBase;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/formie-form-base.js\n");

/***/ }),

/***/ "./src/js/formie-form-theme.js":
/*!*************************************!*\
  !*** ./src/js/formie-form-theme.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieFormTheme\": () => (/* binding */ FormieFormTheme)\n/* harmony export */ });\n/* harmony import */ var _utils_bouncer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/bouncer */ \"./src/js/utils/bouncer.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\nvar FormieFormTheme = /*#__PURE__*/function () {\n  function FormieFormTheme() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, FormieFormTheme);\n\n    this.formId = \"#\".concat(config.formHashId);\n    this.$form = document.querySelector(this.formId);\n    this.config = config;\n    this.settings = config.settings;\n    this.validationOnSubmit = !!this.settings.validationOnSubmit;\n    this.validationOnFocus = !!this.settings.validationOnFocus;\n    this.setCurrentPage(this.settings.currentPageId);\n\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.formTheme = this;\n    this.form = this.$form.form;\n    this.initValidator(); // Check if this is a success page and if we need to hide the notice\n    // This is for non-ajax forms, where the page has reloaded\n\n    this.hideSuccess(); // Hijack the form's submit handler, in case we need to do something\n\n    this.addSubmitEventListener(); // Save the form's current state so we can tell if its changed later on\n\n    this.updateFormHash(); // Listen to form changes if the user tries to reload\n\n    if (this.settings.enableUnloadWarning) {\n      this.addFormUnloadEventListener();\n    } // Listen to tabs being clicked for ajax-enabled forms\n\n\n    if (this.settings.submitMethod === 'ajax') {\n      this.formTabEventListener();\n    }\n  }\n\n  _createClass(FormieFormTheme, [{\n    key: \"initValidator\",\n    value: function initValidator() {\n      var _this = this;\n\n      // Kick off validation - use this even if disabling client-side validation\n      // so we can use a nice API handle server-side errprs\n      var validatorSettings = {\n        fieldClass: 'fui-error',\n        errorClass: 'fui-error-message',\n        fieldPrefix: 'fui-field-',\n        errorPrefix: 'fui-error-',\n        messageAfterField: true,\n        messageCustom: 'data-fui-message',\n        messageTarget: 'data-fui-target',\n        validateOnBlur: this.validationOnFocus,\n        // Call validation on-demand\n        validateOnSubmit: false,\n        disableSubmit: false,\n        customValidations: {},\n        messages: {\n          missingValue: {\n            checkbox: t('This field is required.'),\n            radio: t('Please select a value.'),\n            select: t('Please select a value.'),\n            'select-multiple': t('Please select at least one value.'),\n            \"default\": t('Please fill out this field.')\n          },\n          patternMismatch: {\n            email: t('Please enter a valid email address.'),\n            url: t('Please enter a URL.'),\n            number: t('Please enter a number'),\n            color: t('Please match the following format: #rrggbb'),\n            date: t('Please use the YYYY-MM-DD format'),\n            time: t('Please use the 24-hour time format. Ex. 23:00'),\n            month: t('Please use the YYYY-MM format'),\n            \"default\": t('Please match the requested format.')\n          },\n          outOfRange: {\n            over: t('Please select a value that is no more than {max}.'),\n            under: t('Please select a value that is no less than {min}.')\n          },\n          wrongLength: {\n            over: t('Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.'),\n            under: t('Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.')\n          },\n          fallback: t('There was an error with this field.')\n        }\n      }; // Allow other modules to modify our validator settings (for custom rules and messages)\n\n      var registerFormieValidation = new CustomEvent('registerFormieValidation', {\n        bubbles: true,\n        detail: {\n          validatorSettings: validatorSettings\n        }\n      }); // Give a small amount of time for other JS scripts to register validations. These are lazy-loaded.\n      // Maybe re-think this so we don't have to deal with event listener registration before/after dispatch?\n\n      setTimeout(function () {\n        _this.$form.dispatchEvent(registerFormieValidation);\n\n        _this.validator = new _utils_bouncer__WEBPACK_IMPORTED_MODULE_0__.Bouncer(_this.formId, registerFormieValidation.detail.validatorSettings);\n      }, 500); // After we clear any error, validate the fielset again. Mostly so we can remove global errors\n\n      this.form.addEventListener(this.$form, 'bouncerRemoveError', function (e) {\n        // Prevent an infinite loop (check behaviour with an Agree field)\n        // https://github.com/verbb/formie/issues/905\n        if (!_this.submitDebounce) {\n          _this.validate(false);\n        }\n      }); // Override error messages defined in DOM - Bouncer only uses these as a last resort\n      // In future updates, we can probably remove this\n\n      this.form.addEventListener(this.$form, 'bouncerShowError', function (e) {\n        var $field = e.target;\n        var $fieldContainer = $field.closest('.fui-field');\n        var message = $field.getAttribute('data-fui-message'); // If there's a server error, it takes priority.\n\n        if (e.detail && e.detail.errors && e.detail.errors.serverMessage) {\n          message = e.detail.errors.serverMessage;\n        } // Check if we need to move the error out of the .fui-input-container node.\n        // Only the input itself should be in here.\n\n\n        var $errorToMove = $field.parentNode.querySelector('.fui-error-message');\n\n        if ($errorToMove && $errorToMove.parentNode.parentNode) {\n          $errorToMove.parentNode.parentNode.appendChild($errorToMove);\n        } // The error has been moved, find it again\n\n\n        if ($fieldContainer) {\n          var $error = $fieldContainer.querySelector('.fui-error-message');\n\n          if ($error && message) {\n            $error.textContent = message;\n          }\n        }\n      }, false);\n    }\n  }, {\n    key: \"addSubmitEventListener\",\n    value: function addSubmitEventListener() {\n      var _this2 = this;\n\n      var $submitBtns = this.$form.querySelectorAll('[type=\"submit\"]'); // Forms can have multiple submit buttons, and its easier to assign the currently clicked one\n      // than tracking it through the submit handler.\n\n      $submitBtns.forEach(function ($submitBtn) {\n        _this2.form.addEventListener($submitBtn, 'click', function (e) {\n          _this2.$submitBtn = e.target; // Store for later if we're using text spinner\n\n          _this2.originalButtonText = e.target.textContent.trim();\n        });\n      });\n      this.form.addEventListener(this.$form, 'onBeforeFormieSubmit', this.onBeforeSubmit.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieValidate', this.onValidate.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieSubmit', this.onSubmit.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieSubmitError', this.onSubmitError.bind(this));\n    }\n  }, {\n    key: \"onBeforeSubmit\",\n    value: function onBeforeSubmit(e) {\n      this.beforeSubmit(); // Save for later to trigger real submit\n\n      this.submitHandler = e.detail.submitHandler;\n    }\n  }, {\n    key: \"onValidate\",\n    value: function onValidate(e) {\n      // Bypass validation and custom event handling if going back\n      if (!this.$form.goBack && !this.validate()) {\n        this.onFormError(); // Set a flag on the event, so other listeners can potentially do something\n\n        e.detail.invalid = true;\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      // Stop base behaviour of just submitting the form\n      e.preventDefault(); // Check if the submit button has a `name` attribute. If so, we need to append a hidden input\n      // to the form, as JS-submitted forms won't pass on the submit button value as its programatically submitted.\n\n      if (this.$submitBtn && this.$submitBtn.getAttribute('name')) {\n        var name = this.$submitBtn.getAttribute('name');\n        var value = this.$submitBtn.getAttribute('value'); // Add a hidden input, if it doesn't exist\n\n        this.updateOrCreateHiddenInput(name, value);\n      } // Either staight submit, or use Ajax\n\n\n      if (this.settings.submitMethod === 'ajax') {\n        this.ajaxSubmit();\n      } else {\n        // Before a server-side submit, refresh the saved hash immediately. Otherwise, the native submit\n        // handler - which technically unloads the page - will trigger the changed alert.\n        this.updateFormHash(); // Triger any JS events for this page, right away before navigating away\n\n        this.triggerJsEvents();\n        this.$form.submit();\n      }\n    }\n  }, {\n    key: \"onSubmitError\",\n    value: function onSubmitError(e) {\n      this.onFormError();\n    }\n  }, {\n    key: \"addFormUnloadEventListener\",\n    value: function addFormUnloadEventListener() {\n      var _this3 = this;\n\n      this.form.addEventListener(window, 'beforeunload', function (e) {\n        if (_this3.savedFormHash !== _this3.hashForm()) {\n          e.returnValue = t('Are you sure you want to leave?');\n        }\n      });\n    }\n  }, {\n    key: \"formTabEventListener\",\n    value: function formTabEventListener() {\n      var _this4 = this;\n\n      var $tabs = this.$form.querySelectorAll('[data-fui-page-tab-anchor]');\n      $tabs.forEach(function ($tab) {\n        _this4.form.addEventListener($tab, 'click', function (e) {\n          e.preventDefault();\n          var pageIndex = e.target.getAttribute('data-fui-page-index');\n          var pageId = e.target.getAttribute('data-fui-page-id');\n\n          _this4.togglePage({\n            nextPageIndex: pageIndex,\n            nextPageId: pageId,\n            totalPages: _this4.settings.pages.length\n          }); // Ensure we still update the current page server-side\n\n\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', e.target.getAttribute('href'), true);\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.setRequestHeader('Cache-Control', 'no-cache');\n          xhr.send();\n        });\n      });\n    }\n  }, {\n    key: \"hashForm\",\n    value: function hashForm() {\n      var hash = {};\n      var formData = new FormData(this.$form);\n      var excludedItems = ['g-recaptcha-response', 'CRAFT_CSRF_TOKEN', '__JSCHK'];\n\n      var _iterator = _createForOfIteratorHelper(formData.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          var isExcluded = excludedItems.filter(function (item) {\n            return pair[0].startsWith(item);\n          });\n\n          if (!isExcluded.length) {\n            // eslint-disable-next-line\n            hash[pair[0]] = pair[1];\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return JSON.stringify(hash);\n    }\n  }, {\n    key: \"updateFormHash\",\n    value: function updateFormHash() {\n      this.savedFormHash = this.hashForm();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var _this5 = this;\n\n      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!this.validationOnSubmit) {\n        return true;\n      }\n\n      var $fieldset = this.$form;\n\n      if (this.$currentPage) {\n        $fieldset = this.$currentPage;\n      }\n\n      var invalidFields = this.validator.validateAll($fieldset); // If there are errors, focus on the first one\n\n      if (invalidFields.length > 0 && focus) {\n        invalidFields[0].focus();\n      } // Remove any global errors if none - just in case\n\n\n      if (invalidFields.length === 0) {\n        this.removeFormAlert();\n      } // Set the debounce after a little bit, to prevent an infinite loop, as this method\n      // is called on `bouncerRemoveError`.\n\n\n      this.submitDebounce = true;\n      setTimeout(function () {\n        _this5.submitDebounce = false;\n      }, 500);\n      return !invalidFields.length;\n    }\n  }, {\n    key: \"hideSuccess\",\n    value: function hideSuccess() {\n      var $successMessage = this.$form.parentNode.querySelector('.fui-alert-success');\n\n      if ($successMessage && this.settings.submitActionMessageTimeout) {\n        var timeout = parseInt(this.settings.submitActionMessageTimeout, 10) * 1000;\n        setTimeout(function () {\n          $successMessage.remove();\n        }, timeout);\n      }\n    }\n  }, {\n    key: \"addLoading\",\n    value: function addLoading() {\n      if (this.$submitBtn) {\n        // Always disable the button\n        this.$submitBtn.setAttribute('disabled', true);\n\n        if (this.settings.loadingIndicator === 'spinner') {\n          this.$submitBtn.classList.add('fui-loading');\n        }\n\n        if (this.settings.loadingIndicator === 'text') {\n          this.$submitBtn.textContent = this.settings.loadingIndicatorText;\n        }\n      }\n    }\n  }, {\n    key: \"removeLoading\",\n    value: function removeLoading() {\n      if (this.$submitBtn) {\n        // Always enable the button\n        this.$submitBtn.removeAttribute('disabled');\n\n        if (this.settings.loadingIndicator === 'spinner') {\n          this.$submitBtn.classList.remove('fui-loading');\n        }\n\n        if (this.settings.loadingIndicator === 'text') {\n          this.$submitBtn.textContent = this.originalButtonText;\n        }\n      }\n    }\n  }, {\n    key: \"onFormError\",\n    value: function onFormError(errorMessage) {\n      if (errorMessage) {\n        this.showFormAlert(errorMessage, 'error');\n      } else {\n        this.showFormAlert(this.settings.errorMessage, 'error');\n      }\n\n      this.removeLoading();\n    }\n  }, {\n    key: \"showFormAlert\",\n    value: function showFormAlert(text, type) {\n      var $alert = this.$form.parentNode.querySelector('.fui-alert'); // Strip <p> tags\n\n      text = text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '');\n\n      if ($alert) {\n        // We have to cater for HTML entities - quick-n-dirty\n        if ($alert.innerHTML !== this.decodeHtml(text)) {\n          $alert.innerHTML = $alert.innerHTML + '<br>' + text;\n        }\n      } else {\n        $alert = document.createElement('div');\n        $alert.className = 'fui-alert fui-alert-' + type;\n        $alert.setAttribute('role', 'alert');\n        $alert.innerHTML = text; // For error notices, we have potential special handling on position\n\n        if (type == 'error') {\n          $alert.className += ' fui-alert-' + this.settings.errorMessagePosition;\n\n          if (this.settings.errorMessagePosition == 'bottom-form') {\n            this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n          } else if (this.settings.errorMessagePosition == 'top-form') {\n            this.$form.parentNode.insertBefore($alert, this.$form);\n          }\n        } else {\n          $alert.className += ' fui-alert-' + this.settings.submitActionMessagePosition;\n\n          if (this.settings.submitActionMessagePosition == 'bottom-form') {\n            // An even further special case when hiding the form!\n            if (this.settings.submitActionFormHide) {\n              this.$form.parentNode.insertBefore($alert, this.$form);\n            } else {\n              // Check if there's a submit button still. Might've been removed for multi-page, ajax.\n              if (this.$submitBtn.parentNode) {\n                this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n              } else {\n                this.$form.parentNode.insertBefore($alert, this.$form.nextSibling);\n              }\n            }\n          } else if (this.settings.submitActionMessagePosition == 'top-form') {\n            this.$form.parentNode.insertBefore($alert, this.$form);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"showTabErrors\",\n    value: function showTabErrors(errors) {\n      var _this6 = this;\n\n      Object.keys(errors).forEach(function (pageId, index) {\n        var $tab = _this6.$form.parentNode.querySelector('[data-fui-page-id=\"' + pageId + '\"]');\n\n        if ($tab) {\n          $tab.parentNode.classList.add('fui-tab-error');\n        }\n      });\n    }\n  }, {\n    key: \"decodeHtml\",\n    value: function decodeHtml(html) {\n      var txt = document.createElement('textarea');\n      txt.innerHTML = html;\n      return txt.value;\n    }\n  }, {\n    key: \"removeFormAlert\",\n    value: function removeFormAlert() {\n      var $alert = this.$form.parentNode.querySelector('.fui-alert');\n\n      if ($alert) {\n        $alert.remove();\n      }\n    }\n  }, {\n    key: \"removeTabErrors\",\n    value: function removeTabErrors() {\n      var $tabs = this.$form.parentNode.querySelectorAll('[data-fui-page-tab]');\n      $tabs.forEach(function ($tab) {\n        $tab.classList.remove('fui-tab-error');\n      });\n    }\n  }, {\n    key: \"removeBackInput\",\n    value: function removeBackInput() {\n      // Remove the hidden back input sent in any previous step\n      var $backButtonInput = this.$form.querySelector('[name=\"goingBack\"][type=\"hidden\"]');\n\n      if ($backButtonInput) {\n        $backButtonInput.remove();\n      } // Reset the chosen page\n\n\n      this.$form.goBack = null;\n    }\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      var _this7 = this;\n\n      // Remove all validation errors\n      Array.prototype.filter.call(this.$form.querySelectorAll('input, select, textarea'), function ($field) {\n        _this7.validator.removeError($field);\n      });\n      this.removeFormAlert();\n      this.removeTabErrors();\n      this.addLoading();\n    }\n  }, {\n    key: \"ajaxSubmit\",\n    value: function ajaxSubmit() {\n      var _this8 = this;\n\n      var formData = new FormData(this.$form);\n      var method = this.$form.getAttribute('method');\n      var action = this.$form.getAttribute('action');\n      var xhr = new XMLHttpRequest();\n      xhr.open(method ? method : 'POST', action ? action : window.location.href, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.timeout = (this.settings.ajaxTimeout || 10) * 1000;\n      this.beforeSubmit();\n\n      xhr.ontimeout = function () {\n        _this8.onAjaxError(t('The request timed out.'));\n      };\n\n      xhr.onerror = function (e) {\n        _this8.onAjaxError(t('The request encountered a network error. Please try again.'));\n      };\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            var response = JSON.parse(xhr.responseText);\n\n            if (response.errors) {\n              _this8.onAjaxError(response.errorMessage, response);\n            } else {\n              _this8.onAjaxSuccess(response);\n            }\n          } catch (e) {\n            _this8.onAjaxError(t('Unable to parse response `{e}`.', {\n              e: e\n            }));\n          }\n        } else {\n          _this8.onAjaxError(xhr.status + ': ' + xhr.statusText);\n        }\n      };\n\n      xhr.send(formData);\n    }\n  }, {\n    key: \"afterAjaxSubmit\",\n    value: function afterAjaxSubmit(data) {\n      var _this9 = this;\n\n      // This will be called regardless of success or error\n      this.removeBackInput();\n      this.updateSubmissionInput(data); // Check if there's any events in the response back, and fire them\n\n      if (data.events && Array.isArray(data.events)) {\n        data.events.forEach(function (eventData) {\n          _this9.$form.dispatchEvent(new CustomEvent(eventData.event, {\n            bubbles: true,\n            detail: {\n              data: eventData.data\n            }\n          }));\n        });\n      }\n    }\n  }, {\n    key: \"onAjaxError\",\n    value: function onAjaxError(errorMessage) {\n      var _this10 = this;\n\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var errors = data.errors || {};\n      var pageFieldErrors = data.pageFieldErrors || {}; // Show an error message at the top of the form\n\n      this.onFormError(errorMessage); // Update the page tabs (if any) to show error state\n\n      this.showTabErrors(pageFieldErrors); // Fire a fail event\n\n      this.submitHandler.formSubmitError(); // Fire cleanup methods after _any_ ajax call\n\n      this.afterAjaxSubmit(data); // Show server-side errors for each field\n\n      Object.keys(errors).forEach(function (handle, index) {\n        var _errors$handle = _slicedToArray(errors[handle], 1),\n            error = _errors$handle[0];\n\n        var $field = document.querySelector(\"[name=\\\"fields[\".concat(handle, \"]\\\"]\"));\n\n        if ($field) {\n          _this10.validator.showError($field, {\n            serverMessage: error\n          }); // Focus on the first error\n\n\n          if (index === 0) {\n            $field.focus();\n          }\n        }\n      }); // Go to the first page with an error, for good UX\n\n      this.togglePage(data, false);\n    }\n  }, {\n    key: \"onAjaxSuccess\",\n    value: function onAjaxSuccess(data) {\n      // Fire the event, because we've overridden the handler\n      this.submitHandler.formAfterSubmit(data); // Fire cleanup methods after _any_ ajax call\n\n      this.afterAjaxSubmit(data); // Reset the form hash, as all has been saved\n\n      this.updateFormHash(); // Triger any JS events for this page, right away before navigating away\n\n      this.triggerJsEvents(); // Check if we need to proceed to the next page\n\n      if (data.nextPageId) {\n        this.removeLoading();\n        this.togglePage(data);\n        return;\n      } // If we're redirecting away, do it immediately for nicer UX\n\n\n      if (data.redirectUrl) {\n        if (this.settings.submitActionTab === 'new-tab') {\n          window.open(data.redirectUrl, '_blank');\n        } else {\n          window.location.href = data.redirectUrl;\n        }\n\n        return;\n      } // Delay this a little, in case we're redirecting away - better UX to just keep it loading\n\n\n      this.removeLoading(); // For multi-page ajax forms, deal with them a little differently.\n\n      if (data.totalPages > 1) {\n        // If we have a success message at the top, go to the first page\n        if (this.settings.submitActionMessagePosition == 'top-form') {\n          this.togglePage({\n            nextPageIndex: 0,\n            nextPageId: this.settings.pages[0].id,\n            totalPages: this.settings.pages.length\n          });\n        } else {\n          // Otherwise, we want to hide the buttons because we have to stay on the last page\n          // to show the success message at the bottom of the form. Otherwise, showing it on the\n          // first page of an empty form is just plain weird UX.\n          if (this.$submitBtn) {\n            this.$submitBtn.remove();\n          } // Remove the back button - not great UX to go back to a finished form\n          // Remember, its the button and the hidden input\n\n\n          var $backButtonInputs = this.$form.querySelectorAll('[name=\"goingBack\"]');\n          $backButtonInputs.forEach(function ($backButtonInput) {\n            $backButtonInput.remove();\n          });\n        }\n      }\n\n      if (this.settings.submitAction === 'message') {\n        this.showFormAlert(data.submitActionMessage, 'success'); // Check if we need to remove the success message\n\n        this.hideSuccess();\n\n        if (this.settings.submitActionFormHide) {\n          this.$form.style.display = 'none';\n        } // Smooth-scroll to the top of the form.\n\n\n        if (this.settings.scrollToTop) {\n          window.scrollTo({\n            top: this.$form.getBoundingClientRect().top + window.pageYOffset - 100,\n            behavior: 'smooth'\n          });\n        }\n      } // Reset values regardless, for the moment\n\n\n      this.$form.reset(); // Remove the submission ID input in case we want to go again\n\n      this.removeHiddenInput('submissionId'); // Reset the form hash, as all has been saved\n\n      this.updateFormHash();\n    }\n  }, {\n    key: \"updateSubmissionInput\",\n    value: function updateSubmissionInput(data) {\n      if (!data.submissionId || !data.nextPageId) {\n        return;\n      } // Add the hidden submission input, if it doesn't exist\n\n\n      this.updateOrCreateHiddenInput('submissionId', data.submissionId);\n    }\n  }, {\n    key: \"updateOrCreateHiddenInput\",\n    value: function updateOrCreateHiddenInput(name, value) {\n      var $input = this.$form.querySelector('[name=\"' + name + '\"][type=\"hidden\"]');\n\n      if (!$input) {\n        $input = document.createElement('input');\n        $input.setAttribute('type', 'hidden');\n        $input.setAttribute('name', name);\n        this.$form.appendChild($input);\n      }\n\n      $input.setAttribute('value', value);\n    }\n  }, {\n    key: \"removeHiddenInput\",\n    value: function removeHiddenInput(name) {\n      var $input = this.$form.querySelector('[name=\"' + name + '\"][type=\"hidden\"]');\n\n      if ($input) {\n        $input.parentNode.removeChild($input);\n      }\n    }\n  }, {\n    key: \"togglePage\",\n    value: function togglePage(data) {\n      var _this11 = this;\n\n      var scrollToTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Trigger an event when a page is toggled\n      this.$form.dispatchEvent(new CustomEvent('onFormiePageToggle', {\n        bubbles: true,\n        detail: {\n          data: data\n        }\n      })); // Hide all pages\n\n      var $allPages = this.$form.querySelectorAll('.fui-page');\n\n      if (data.nextPageId) {\n        $allPages.forEach(function ($page) {\n          // Show the current page\n          if ($page.id === \"\".concat(_this11.getPageId(data.nextPageId))) {\n            $page.classList.remove('fui-hidden');\n          } else {\n            $page.classList.add('fui-hidden');\n          }\n        });\n      } // Update tabs and progress bar if we're using them\n\n\n      var $progress = this.$form.querySelector('.fui-progress-bar');\n\n      if ($progress) {\n        var pageIndex = parseInt(data.nextPageIndex, 10) + 1;\n        var progress = Math.round(pageIndex / data.totalPages * 100);\n        $progress.style.width = progress + '%';\n        $progress.setAttribute('aria-valuenow', progress);\n        $progress.textContent = progress + '%';\n      }\n\n      var $tabs = this.$form.querySelectorAll('.fui-tab');\n\n      if (data.nextPageId) {\n        $tabs.forEach(function ($tab) {\n          // Show the current page\n          if ($tab.id === 'fui-tab-' + data.nextPageId) {\n            $tab.classList.add('fui-tab-active');\n          } else {\n            $tab.classList.remove('fui-tab-active');\n          }\n        }); // Update the current page\n\n        this.setCurrentPage(data.nextPageId);\n      } // Smooth-scroll to the top of the form.\n\n\n      if (scrollToTop && this.settings.scrollToTop) {\n        window.scrollTo({\n          top: this.$form.getBoundingClientRect().top + window.pageYOffset - 100,\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, {\n    key: \"setCurrentPage\",\n    value: function setCurrentPage(pageId) {\n      this.settings.currentPageId = pageId;\n      this.$currentPage = document.querySelector(\"#\".concat(this.getPageId(pageId)));\n    }\n  }, {\n    key: \"getPageId\",\n    value: function getPageId(pageId) {\n      return \"\".concat(this.config.formHashId, \"-p-\").concat(pageId);\n    }\n  }, {\n    key: \"triggerJsEvents\",\n    value: function triggerJsEvents() {\n      var _this12 = this;\n\n      var currentPage = this.settings.pages.find(function (page) {\n        return page.id == _this12.settings.currentPageId;\n      }); // Find any JS events for the current page and fire\n\n      if (currentPage && currentPage.settings.enableJsEvents) {\n        var payload = {};\n        currentPage.settings.jsGtmEventOptions.forEach(function (option) {\n          payload[option.label] = option.value;\n        }); // Push to the datalayer\n\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push(payload);\n      }\n    }\n  }]);\n\n  return FormieFormTheme;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/formie-form-theme.js\n");

/***/ }),

/***/ "./src/js/formie-lib.js":
/*!******************************!*\
  !*** ./src/js/formie-lib.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Formie\": () => (/* binding */ Formie)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n/* harmony import */ var _formie_form_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formie-form-base */ \"./src/js/formie-form-base.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar globals = __webpack_require__(/*! ./utils/globals */ \"./src/js/utils/globals.js\");\n\n\n\nvar Formie = /*#__PURE__*/function () {\n  function Formie() {\n    _classCallCheck(this, Formie);\n\n    this.forms = [];\n  }\n\n  _createClass(Formie, [{\n    key: \"initForms\",\n    value: function initForms() {\n      var _this = this;\n\n      // TODO: Change this to not be an ID for greater flexibility at the next breakpoint\n      this.$forms = document.querySelectorAll('form[id^=\"formie-form-\"]') || []; // We use this in the CP, where it's a bit tricky to add a form ID. So check just in case.\n      // Might also be handy for front-end too!\n\n      if (!this.$forms.length) {\n        this.$forms = document.querySelectorAll('div[id^=\"formie-form-\"]') || [];\n      }\n\n      this.$forms.forEach(function ($form) {\n        _this.initForm($form);\n      }); // Emit a custom event to let scripts know the Formie class is ready\n\n      document.dispatchEvent(new CustomEvent('onFormieInit', {\n        bubbles: true,\n        detail: {\n          formie: this\n        }\n      }));\n    }\n  }, {\n    key: \"initForm\",\n    value: function initForm($form) {\n      var _this2 = this;\n\n      var formConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(formConfig)) {\n        // Initialize the form class with the `data-config` param on the form\n        formConfig = JSON.parse($form.getAttribute('data-config'));\n      }\n\n      if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(formConfig)) {\n        console.error('Unable to parse `data-config` form attribute for config. Ensure this attribute exists on your form and contains valid JSON.');\n        return;\n      } // See if we need to init additional, conditional JS (field, captchas, etc)\n\n\n      var registeredJs = formConfig.registeredJs || []; // Add an instance to this factory to the form config\n\n      formConfig.Formie = this; // Create the form class, save it to our collection\n\n      var form = new _formie_form_base__WEBPACK_IMPORTED_MODULE_1__.FormieFormBase(formConfig);\n      this.forms.push(form); // Find all `data-field-config` attributes for the current page and form\n      // and build an object of them to initialize when loaded.\n\n      form.fieldConfigs = this.parseFieldConfig($form, $form); // Is there any additional JS config registered for this form?\n\n      if (registeredJs.length) {\n        // Create a container to add these items to, so we can destroy them later\n        form.$registeredJs = document.createElement('div');\n        form.$registeredJs.setAttribute('data-fui-scripts', formConfig.formId);\n        document.body.appendChild(form.$registeredJs); // Create a `<script>` for each registered JS\n\n        registeredJs.forEach(function (config) {\n          var $script = document.createElement('script'); // Check if we've provided an external script to load. Ensure they're deferred so they don't block\n          // and use the onload call to trigger any actual scripts once its been loaded.\n\n          if (config.src) {\n            $script.src = config.src;\n            $script.defer = true; // Initialize all matching fields - their config is already rendered in templates\n\n            $script.onload = function () {\n              if (config.module) {\n                var fieldConfigs = form.fieldConfigs[config.module]; // Handle multiple fields on a page, creating a new JS class instance for each\n\n                if (fieldConfigs && Array.isArray(fieldConfigs) && fieldConfigs.length) {\n                  fieldConfigs.forEach(function (fieldConfig) {\n                    _this2.initJsClass(config.module, fieldConfig);\n                  });\n                } // Handle captchas that have global settings, instead of per-field\n\n\n                if (config.settings) {\n                  _this2.initJsClass(config.module, config.settings);\n                } // Special handling for some JS modules\n\n\n                if (config.module === 'FormieConditions') {\n                  _this2.initJsClass(config.module, {\n                    $form: $form\n                  });\n                }\n              }\n            };\n          }\n\n          form.$registeredJs.appendChild($script);\n        });\n      }\n    }\n  }, {\n    key: \"initJsClass\",\n    value: function initJsClass(className, params) {\n      var moduleClass = window[className];\n\n      if (moduleClass) {\n        new moduleClass(params);\n      }\n    } // Note the use of $form and $element to handle Repeater\n\n  }, {\n    key: \"parseFieldConfig\",\n    value: function parseFieldConfig($element, $form) {\n      var config = {};\n      $element.querySelectorAll('[data-field-config]').forEach(function ($field) {\n        var fieldConfig = JSON.parse($field.getAttribute('data-field-config')); // Some fields supply multiple modules, so normalise for ease-of-processing\n\n        if (!Array.isArray(fieldConfig)) {\n          fieldConfig = [fieldConfig];\n        }\n\n        fieldConfig.forEach(function (nestedFieldConfig) {\n          if (!config[nestedFieldConfig.module]) {\n            config[nestedFieldConfig.module] = [];\n          } // Provide field classes with the data they need\n\n\n          config[nestedFieldConfig.module].push(_objectSpread({\n            $form: $form,\n            $field: $field\n          }, nestedFieldConfig));\n        });\n      });\n      return config;\n    }\n  }, {\n    key: \"getForm\",\n    value: function getForm($form) {\n      return this.forms.find(function (form) {\n        return form.$form == $form;\n      });\n    }\n  }, {\n    key: \"getFormById\",\n    value: function getFormById(id) {\n      return this.forms.find(function (form) {\n        if (form.config) {\n          return form.config.formId == id;\n        }\n      });\n    }\n  }, {\n    key: \"getFormByHandle\",\n    value: function getFormByHandle(handle) {\n      return this.forms.find(function (form) {\n        if (form.config) {\n          return form.config.formHandle == handle;\n        }\n      });\n    }\n  }, {\n    key: \"destroyForm\",\n    value: function destroyForm($form) {\n      var form = this.getForm($form);\n\n      if (!form) {\n        return;\n      }\n\n      var index = this.forms.indexOf(form);\n\n      if (index === -1) {\n        return;\n      } // Delete any additional scripts for the form - if any\n\n\n      if (form.$registeredJs && form.$registeredJs.parentNode) {\n        form.$registeredJs.parentNode.removeChild(form.$registeredJs);\n      } // Remove all event listeners attached to this form\n\n\n      if (!(0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(form.listeners)) {\n        Object.keys(form.listeners).forEach(function (eventKey) {\n          form.removeEventListener(eventKey);\n        });\n      } // Destroy Bouncer events\n\n\n      if (form.formTheme && form.formTheme.validator) {\n        form.formTheme.validator.destroy();\n      } // Delete it from the factory\n\n\n      delete this.forms[index];\n    }\n  }]);\n\n  return Formie;\n}();\nwindow.Formie = Formie;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/formie-lib.js\n");

/***/ }),

/***/ "./src/js/formie.js":
/*!**************************!*\
  !*** ./src/js/formie.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _formie_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formie-lib */ \"./src/js/formie-lib.js\");\n // This should only be used when initializing Formie from the browser. When initializing with JS directly\n// import `formie-lib.js` directly into your JS modules.\n\nwindow.Formie = new _formie_lib__WEBPACK_IMPORTED_MODULE_0__.Formie(); // Don't init forms until the document is ready\n\ndocument.addEventListener('DOMContentLoaded', function (event) {\n  window.Formie.initForms();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybWllLmpzLmpzIiwibWFwcGluZ3MiOiI7O0NBRUE7QUFDQTs7QUFDQUMsTUFBTSxDQUFDRCxNQUFQLEdBQWdCLElBQUlBLCtDQUFKLEVBQWhCLEVBRUE7O0FBQ0FFLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFVBQUNDLEtBQUQsRUFBVztFQUNyREgsTUFBTSxDQUFDRCxNQUFQLENBQWNLLFNBQWQ7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2Zvcm1pZS5qcz9mYzZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1pZSB9IGZyb20gJy4vZm9ybWllLWxpYic7XG5cbi8vIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIGluaXRpYWxpemluZyBGb3JtaWUgZnJvbSB0aGUgYnJvd3Nlci4gV2hlbiBpbml0aWFsaXppbmcgd2l0aCBKUyBkaXJlY3RseVxuLy8gaW1wb3J0IGBmb3JtaWUtbGliLmpzYCBkaXJlY3RseSBpbnRvIHlvdXIgSlMgbW9kdWxlcy5cbndpbmRvdy5Gb3JtaWUgPSBuZXcgRm9ybWllKCk7XG5cbi8vIERvbid0IGluaXQgZm9ybXMgdW50aWwgdGhlIGRvY3VtZW50IGlzIHJlYWR5XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgd2luZG93LkZvcm1pZS5pbml0Rm9ybXMoKTtcbn0pO1xuIl0sIm5hbWVzIjpbIkZvcm1pZSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiaW5pdEZvcm1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/formie.js\n");

/***/ }),

/***/ "./src/js/utils/bouncer.js":
/*!*********************************!*\
  !*** ./src/js/utils/bouncer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bouncer\": () => (/* binding */ Bouncer)\n/* harmony export */ });\n/* eslint-disable */\n\n/*!\n * formbouncerjs v1.4.6\n * A lightweight form validation script that augments native HTML5 form validation elements and attributes.\n * (c) 2020 Chris Ferdinandi\n * MIT License\n * http://github.com/cferdinandi/bouncer\n */\n\n/**\n * The plugin constructor\n * @param {String} selector The selector to use for forms to be validated\n * @param {Object} options  User settings [optional]\n */\nvar Bouncer = function Bouncer(selector, options) {\n  //\n  // Variables\n  //\n  var defaults = {\n    // Classes & IDs\n    fieldClass: 'error',\n    errorClass: 'error-message',\n    fieldPrefix: 'bouncer-field_',\n    errorPrefix: 'bouncer-error_',\n    // Patterns\n    patterns: {\n      email: /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/,\n      url: /^(?:(?:https?|HTTPS?|ftp|FTP):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/,\n      number: /^(?:[-+]?[0-9]*[.,]?[0-9]+)$/,\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))/,\n      time: /^(?:(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]))$/,\n      month: /^(?:(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])))$/\n    },\n    // Custom Validations\n    customValidations: {},\n    // Messages\n    messageAfterField: true,\n    messageCustom: 'data-bouncer-message',\n    messageTarget: 'data-bouncer-target',\n    // messages: {\n    //     missingValue: {\n    //         checkbox: 'This field is required.',\n    //         radio: 'Please select a value.',\n    //         select: 'Please select a value.',\n    //         'select-multiple': 'Please select at least one value.',\n    //         default: 'Please fill out this field.',\n    //     },\n    //     patternMismatch: {\n    //         email: 'Please enter a valid email address.',\n    //         url: 'Please enter a URL.',\n    //         number: 'Please enter a number',\n    //         color: 'Please match the following format: #rrggbb',\n    //         date: 'Please use the YYYY-MM-DD format',\n    //         time: 'Please use the 24-hour time format. Ex. 23:00',\n    //         month: 'Please use the YYYY-MM format',\n    //         default: 'Please match the requested format.',\n    //     },\n    //     outOfRange: {\n    //         over: 'Please select a value that is no more than {max}.',\n    //         under: 'Please select a value that is no less than {min}.',\n    //     },\n    //     wrongLength: {\n    //         over: 'Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.',\n    //         under: 'Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.',\n    //     },\n    //     fallback: 'There was an error with this field.',\n    // },\n    // Form Submission\n    disableSubmit: false,\n    // Allow blur/click/input events to be opt-out\n    validateOnBlur: true,\n    // Allow validation to be turned off altogether. Useful for server-side validation use.\n    validateOnSubmit: true,\n    // Custom Events\n    emitEvents: true\n  }; //\n  // Methods\n  //\n\n  /**\n   * A wrapper for Array.prototype.forEach() for non-arrays\n   * @param  {Array-like} arr      The array-like object\n   * @param  {Function}   callback The callback to run\n   */\n\n  var forEach = function forEach(arr, callback) {\n    Array.prototype.forEach.call(arr, callback);\n  };\n  /**\n   * Merge two or more objects together.\n   * @param   {Object}   objects  The objects to merge together\n   * @returns {Object}            Merged values of defaults and options\n   */\n\n\n  var extend = function extend() {\n    var merged = {};\n    forEach(arguments, function (obj) {\n      for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) return;\n\n        if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n          merged[key] = extend(merged[key], obj[key]);\n        } else {\n          merged[key] = obj[key];\n        } // merged[key] = obj[key];\n\n      }\n    });\n    return merged;\n  };\n  /**\n   * Emit a custom event\n   * @param  {String} type    The event type\n   * @param  {Object} options The settings object\n   * @param  {Node}   anchor  The anchor element\n   * @param  {Node}   toggle  The toggle element\n   */\n\n\n  var emitEvent = function emitEvent(elem, type, details) {\n    if (typeof window.CustomEvent !== 'function') return;\n    var event = new CustomEvent(type, {\n      bubbles: true,\n      detail: details || {}\n    });\n    elem.dispatchEvent(event);\n  };\n  /**\n   * Add the `novalidate` attribute to all forms\n   * @param {Boolean} remove  If true, remove the `novalidate` attribute\n   */\n\n\n  var addNoValidate = function addNoValidate(selector) {\n    forEach(document.querySelectorAll(selector), function (form) {\n      form.setAttribute('novalidate', true);\n    });\n  };\n  /**\n   * Remove the `novalidate` attribute to all forms\n   */\n\n\n  var removeNoValidate = function removeNoValidate(selector) {\n    forEach(document.querySelectorAll(selector), function (form) {\n      form.removeAttribute('novalidate');\n    });\n  };\n  /**\n   * Check if a required field is missing its value\n   * @param  {Node} field The field to check\n   * @return {Boolean}       It true, field is missing it's value\n   */\n\n\n  var missingValue = function missingValue(field) {\n    // If not required, bail\n    if (!field.hasAttribute('required')) return false; // Handle checkboxes\n\n    if (field.type === 'checkbox') {\n      // Watch out for grouped checkboxes. Only validate the group as a whole\n      var checkboxInputs = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]:not([type=\"hidden\"])');\n\n      if (checkboxInputs.length) {\n        var checkedInputs = Array.prototype.filter.call(checkboxInputs, function (btn) {\n          return btn.checked;\n        }).length;\n        return !checkedInputs;\n      }\n\n      return !field.checked;\n    } // Don't validate any hidden fields\n\n\n    if (field.type === 'hidden') {\n      return false;\n    } // Get the field value length\n\n\n    var length = field.value.length; // Handle radio buttons\n\n    if (field.type === 'radio') {\n      length = Array.prototype.filter.call(field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]'), function (btn) {\n        return btn.checked;\n      }).length;\n    } // Check for value\n\n\n    return length < 1;\n  };\n  /**\n   * Check if field value doesn't match a patter.\n   * @param  {Node}   field    The field to check\n   * @param  {Object} settings The plugin settings\n   * @see https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute\n   * @return {Boolean}         If true, there's a pattern mismatch\n   */\n\n\n  var patternMismatch = function patternMismatch(field, settings) {\n    // Check if there's a pattern to match\n    var pattern = field.getAttribute('pattern');\n    pattern = pattern ? new RegExp('^(?:' + pattern + ')$') : settings.patterns[field.type];\n    if (!pattern || !field.value || field.value.length < 1) return false; // Validate the pattern\n\n    return field.value.match(pattern) ? false : true;\n  };\n  /**\n   * Check if field value is out-of-range\n   * @param  {Node}    field    The field to check\n   * @return {String}           Returns 'over', 'under', or false\n   */\n\n\n  var outOfRange = function outOfRange(field) {\n    // Make sure field has value\n    if (!field.value || field.value.length < 1) return false; // Check for range\n\n    var max = field.getAttribute('max');\n    var min = field.getAttribute('min'); // Check validity\n\n    var num = parseFloat(field.value);\n    if (max && num > max) return 'over';\n    if (min && num < min) return 'under';\n    return false;\n  };\n  /**\n   * Check if the field value is too long or too short\n   * @param  {Node}   field    The field to check\n   * @return {String}           Returns 'over', 'under', or false\n   */\n\n\n  var wrongLength = function wrongLength(field) {\n    // Make sure field has value\n    if (!field.value || field.value.length < 1) return false; // Check for min/max length\n\n    var max = field.getAttribute('maxlength');\n    var min = field.getAttribute('minlength'); // Check validity\n\n    var length = field.value.length;\n    if (max && length > max) return 'over';\n    if (min && length < min) return 'under';\n    return false;\n  };\n  /**\n   * Test for standard field validations\n   * @param  {Node}   field    The field to test\n   * @param  {Object} settings The plugin settings\n   * @return {Object}          The tests and their results\n   */\n\n\n  var runValidations = function runValidations(field, settings) {\n    return {\n      missingValue: missingValue(field),\n      patternMismatch: patternMismatch(field, settings),\n      outOfRange: outOfRange(field),\n      wrongLength: wrongLength(field)\n    };\n  };\n  /**\n   * Run any provided custom validations\n   * @param  {Node}   field       The field to test\n   * @param  {Object} errors      The existing errors\n   * @param  {Object} validations The custom validations to run\n   * @param  {Object} settings    The plugin settings\n   * @return {Object}             The tests and their results\n   */\n\n\n  var customValidations = function customValidations(field, errors, validations, settings) {\n    for (var test in validations) {\n      if (validations.hasOwnProperty(test)) {\n        errors[test] = validations[test](field, settings);\n      }\n    }\n\n    return errors;\n  };\n  /**\n   * Check if a field has any errors\n   * @param  {Object}  errors The validation test results\n   * @return {Boolean}        Returns true if there are errors\n   */\n\n\n  var hasErrors = function hasErrors(errors) {\n    for (var type in errors) {\n      if (errors[type]) return true;\n    }\n\n    return false;\n  };\n  /**\n   * Check a field for errors\n   * @param  {Node} field      The field to test\n   * @param  {Object} settings The plugin settings\n   * @return {Object}          The field validity and errors\n   */\n\n\n  var getErrors = function getErrors(field, settings) {\n    // Get standard validation errors\n    var errors = runValidations(field, settings); // Check for custom validations\n\n    errors = customValidations(field, errors, settings.customValidations, settings);\n    return {\n      valid: !hasErrors(errors),\n      errors: errors\n    };\n  };\n  /**\n   * Escape special characters for use with querySelector\n   * @author Mathias Bynens\n   * @link https://github.com/mathiasbynens/CSS.escape\n   * @param {String} id The anchor ID to escape\n   */\n\n\n  var escapeCharacters = function escapeCharacters(id) {\n    var string = String(id);\n    var length = string.length;\n    var index = -1;\n    var codeUnit;\n    var result = '';\n    var firstCodeUnit = string.charCodeAt(0);\n\n    while (++index < length) {\n      codeUnit = string.charCodeAt(index); // Note: there’s no need to special-case astral symbols, surrogate\n      // pairs, or lone surrogates.\n      // If the character is NULL (U+0000), then throw an\n      // `InvalidCharacterError` exception and terminate these steps.\n\n      if (codeUnit === 0x0000) {\n        throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n      }\n\n      if ( // If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n      // U+007F, […]\n      codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F || // If the character is the first character and is in the range [0-9]\n      // (U+0030 to U+0039), […]\n      index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 || // If the character is the second character and is in the range [0-9]\n      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n      index === 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit === 0x002D) {\n        // http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point\n        result += '\\\\' + codeUnit.toString(16) + ' ';\n        continue;\n      } // If the character is not handled by one of the above rules and is\n      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n      // U+005A), or [a-z] (U+0061 to U+007A), […]\n\n\n      if (codeUnit >= 0x0080 || codeUnit === 0x002D || codeUnit === 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {\n        // the character itself\n        result += string.charAt(index);\n        continue;\n      } // Otherwise, the escaped character.\n      // http://dev.w3.org/csswg/cssom/#escape-a-character\n\n\n      result += '\\\\' + string.charAt(index);\n    } // Return sanitized hash\n\n\n    return result;\n  };\n  /**\n   * Get or create an ID for a field\n   * @param  {Node}    field    The field\n   * @param  {Object}  settings The plugin settings\n   * @param  {Boolean} create   If true, create an ID if there isn't one\n   * @return {String}           The field ID\n   */\n\n\n  var getFieldID = function getFieldID(field, settings, create) {\n    var id = field.name ? field.name : field.id;\n\n    if (!id && create) {\n      id = settings.fieldPrefix + Math.floor(Math.random() * 999);\n      field.id = id;\n    } // if (field.type === 'checkbox') {\n    //     id += '_' + (field.value || field.id);\n    // }\n\n\n    return id;\n  };\n  /**\n   * Special handling for radio buttons and checkboxes wrapped in labels.\n   * @param  {Node} field The field with the error\n   * @return {Node}       The field to show the error on\n   */\n\n\n  var getErrorField = function getErrorField(field) {\n    // If the field is a radio button, get the last item in the radio group\n    // @todo if location is before, get first item\n    if (field.type === 'radio' && field.name) {\n      var group = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]');\n      field = group[group.length - 1];\n    } // Get the associated label for radio button or checkbox\n    // if (field.type === 'radio') {\n    //     var label = field.closest('label') || field.form.querySelector('[for=\"' + field.id + '\"]');\n    //     field = label || field;\n    // }\n\n\n    if (field.type === 'checkbox' || field.type === 'radio') {\n      // TODO: think of a way to make this less opinionated\n      field = field.closest('.fui-field-container');\n    }\n\n    return field;\n  };\n  /**\n   * Get the location for a field's error message\n   * @param  {Node}   field    The field\n   * @param  {Node}   target   The target for error message\n   * @param  {Object} settings The plugin settings\n   * @return {Node}            The error location\n   */\n\n\n  var getErrorLocation = function getErrorLocation(field, target, settings) {\n    // Check for a custom error message\n    var selector = field.getAttribute(settings.messageTarget);\n\n    if (selector) {\n      var location = field.form.querySelector(selector);\n\n      if (location) {\n        // @bugfix by @HaroldPutman\n        // https://github.com/cferdinandi/bouncer/pull/28\n        return location.firstChild || location.appendChild(document.createTextNode(''));\n      }\n    } // If the message should come after the field\n\n\n    if (settings.messageAfterField) {\n      if (!target) {\n        target = field;\n      } // If there's no next sibling, create one\n\n\n      if (!target.nextSibling) {\n        target.parentNode.appendChild(document.createTextNode(''));\n      }\n\n      return target.nextSibling;\n    } // If it should come before\n\n\n    return target;\n  };\n  /**\n   * Create a validation error message node\n   * @param  {Node} field      The field\n   * @param  {Object} settings The plugin settings\n   * @return {Node}            The error message node\n   */\n\n\n  var createError = function createError(field, settings) {\n    // Create the error message\n    var error = document.createElement('div');\n    error.className = settings.errorClass;\n    error.id = settings.errorPrefix + getFieldID(field, settings, true); // If the field is a radio button or checkbox, grab the last field label\n\n    var fieldTarget = getErrorField(field); // Inject the error message into the DOM\n\n    var location = getErrorLocation(field, fieldTarget, settings);\n    location.parentNode.insertBefore(error, location);\n    return error;\n  };\n  /**\n   * Get the error message test\n   * @param  {Node}            field    The field to get an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          settings The plugin settings\n   * @return {String|Function}          The error message\n   */\n\n\n  var getErrorMessage = function getErrorMessage(field, errors, settings) {\n    // Variables\n    var messages = settings.messages; // Missing value error\n\n    if (errors.missingValue) {\n      return messages.missingValue[field.type] || messages.missingValue[\"default\"];\n    } // Numbers that are out of range\n\n\n    if (errors.outOfRange) {\n      return messages.outOfRange[errors.outOfRange].replace('{max}', field.getAttribute('max')).replace('{min}', field.getAttribute('min')).replace('{length}', field.value.length);\n    } // Values that are too long or short\n\n\n    if (errors.wrongLength) {\n      return messages.wrongLength[errors.wrongLength].replace('{maxLength}', field.getAttribute('maxlength')).replace('{minLength}', field.getAttribute('minlength')).replace('{length}', field.value.length);\n    } // Pattern mismatch error\n\n\n    if (errors.patternMismatch) {\n      var custom = field.getAttribute(settings.messageCustom);\n      if (custom) return custom;\n      return messages.patternMismatch[field.type] || messages.patternMismatch[\"default\"];\n    } // Custom validations\n\n\n    for (var test in settings.customValidations) {\n      if (settings.customValidations.hasOwnProperty(test)) {\n        if (errors[test] && messages[test]) return messages[test];\n      }\n    } // Custom message, passed directly in\n\n\n    if (errors.customMessage) {\n      return errors.customMessage;\n    } // Fallback error message\n\n\n    return messages.fallback;\n  };\n  /**\n   * Add error attributes to a field\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var addErrorAttributes = function addErrorAttributes(field, error, settings) {\n    field.classList.add(settings.fieldClass);\n    field.setAttribute('aria-describedby', error.id);\n    field.setAttribute('aria-invalid', true); // TODO: think of a way to make this less opinionated\n\n    var $fieldNode = field.closest('.fui-field');\n\n    if ($fieldNode) {\n      $fieldNode.classList.add(settings.fieldClass);\n    }\n  };\n  /**\n   * Show error attributes on a field or radio/checkbox group\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var showErrorAttributes = function showErrorAttributes(field, error, settings) {\n    // If field is a radio button, add attributes to every button in the group\n    if (field.type === 'radio' && field.name) {\n      Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), function (button) {\n        addErrorAttributes(button, error, settings);\n      });\n    } // Otherwise, add an error class and aria attribute to the field\n\n\n    addErrorAttributes(field, error, settings);\n  };\n  /**\n   * Show an error message in the DOM\n   * @param  {Node} field      The field to show an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          settings The plugin settings\n   */\n\n\n  var showError = function showError(field, errors, settings) {\n    // Get/create an error message\n    var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings))) || createError(field, settings);\n    var msg = getErrorMessage(field, errors, settings);\n    error.textContent = typeof msg === 'function' ? msg(field, settings) : msg; // Add error attributes\n\n    showErrorAttributes(field, error, settings); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(field, 'bouncerShowError', {\n        errors: errors\n      });\n    }\n  };\n  /**\n   * Remove error attributes from a field\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeAttributes = function removeAttributes(field, settings) {\n    field.classList.remove(settings.fieldClass);\n    field.removeAttribute('aria-describedby');\n    field.removeAttribute('aria-invalid'); // TODO: think of a way to make this less opinionated\n\n    var $fieldNode = field.closest('.fui-field');\n\n    if ($fieldNode) {\n      $fieldNode.classList.remove(settings.fieldClass);\n    }\n  };\n  /**\n   * Remove error attributes from the field or radio group\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeErrorAttributes = function removeErrorAttributes(field, settings) {\n    // If field is a radio button, remove attributes from every button in the group\n    if (field.type === 'radio' && field.name) {\n      Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), function (button) {\n        removeAttributes(button, settings);\n      });\n      return;\n    } // Otherwise, add an error class and aria attribute to the field\n\n\n    removeAttributes(field, settings);\n  };\n  /**\n   * Remove an error message from the DOM\n   * @param  {Node} field      The field with the error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeError = function removeError(field, settings) {\n    // Get the error message for this field\n    var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings)));\n    if (!error) return; // Remove the error\n\n    error.parentNode.removeChild(error); // Remove error and a11y from the field\n\n    removeErrorAttributes(field, settings); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(field, 'bouncerRemoveError');\n    }\n  };\n  /**\n   * Remove errors from all fields\n   * @param  {String} selector The selector for the form\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeAllErrors = function removeAllErrors(selector, settings) {\n    forEach(document.querySelectorAll(selector), function (form) {\n      forEach(form.querySelectorAll('input, select, textarea'), function (field) {\n        removeError(field, settings);\n      });\n    });\n  }; //\n  // Variables\n  //\n\n\n  var publicAPIs = {};\n  var settings; //\n  // Methods\n  //\n\n  /**\n   * Show an error message in the DOM\n   * @param  {Node} field      The field to show an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          options Additional plugin settings\n   */\n\n  publicAPIs.showError = function (field, errors, options) {\n    var _settings = extend(settings, options || {});\n\n    return showError(field, errors, _settings);\n  };\n  /**\n   * Remove an error message from the DOM\n   * @param  {Node} field      The field with the error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  publicAPIs.removeError = function (field, options) {\n    var _settings = extend(settings, options || {});\n\n    return removeError(field, _settings);\n  };\n  /**\n   * Validate a field\n   * @param  {Node} field     The field to validate\n   * @param  {Object} options Validation options\n   * @return {Object}         The validity state and errors\n   */\n\n\n  publicAPIs.validate = function (field, options) {\n    // Don't validate submits, buttons, file and reset inputs, and disabled and readonly fields\n    if (field.disabled || field.readOnly || field.type === 'reset' || field.type === 'submit' || field.type === 'button') return; // Local settings\n\n    var _settings = extend(settings, options || {}); // Check for errors\n\n\n    var isValid = getErrors(field, _settings); // If valid, remove any error messages\n\n    if (isValid.valid) {\n      removeError(field, _settings);\n      return;\n    } // Otherwise, show an error message\n\n\n    showError(field, isValid.errors, _settings);\n    return isValid;\n  };\n  /**\n   * Validate all fields in a form or section\n   * @param  {Node} target The form or section to validate fields in\n   * @return {Array}       An array of fields with errors\n   */\n\n\n  publicAPIs.validateAll = function (target) {\n    return Array.prototype.filter.call(target.querySelectorAll('input, select, textarea'), function (field) {\n      var validate = publicAPIs.validate(field);\n      return validate && !validate.valid;\n    });\n  };\n  /**\n   * Run a validation on field blur\n   */\n\n\n  var blurHandler = function blurHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.matches(selector)) return; // Special-case for file field, blurs as soon as the selector kicks in\n\n    if (event.target.type === 'file') return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  }; // Leave this as opt-in for the moment, for better file-support\n\n\n  var changeHandler = function changeHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.matches(selector)) return; // Only handle change events for some fields\n\n    if (event.target.type !== 'file' && event.target.type !== 'checkbox' && event.target.type !== 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Run a validation on a fields with errors when the value changes\n   */\n\n\n  var inputHandler = function inputHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.matches(selector)) return; // Only run on fields with errors\n\n    if (!event.target.classList.contains(settings.fieldClass)) return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Run a validation on a fields with errors when the value changes\n   */\n\n\n  var clickHandler = function clickHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.matches(selector)) return; // Only run on fields with errors\n\n    if (!event.target.classList.contains(settings.fieldClass)) return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Validate an entire form when it's submitted\n   */\n\n\n  var submitHandler = function submitHandler(event) {\n    // Only run on matching elements\n    if (!event.target.matches(selector)) return; // Prevent form submission\n\n    event.preventDefault(); // Validate each field\n\n    var errors = publicAPIs.validateAll(event.target); // If there are errors, focus on the first one\n\n    if (errors.length > 0) {\n      errors[0].focus();\n      emitEvent(event.target, 'bouncerFormInvalid', {\n        errors: errors\n      });\n      return;\n    } // Otherwise, submit if not disabled\n\n\n    if (!settings.disableSubmit) {\n      event.target.submit();\n    } // Emit custom event\n\n\n    if (settings.emitEvents) {\n      emitEvent(event.target, 'bouncerFormValid');\n    }\n  };\n  /**\n   * Destroy the current plugin instantiation\n   */\n\n\n  publicAPIs.destroy = function () {\n    // Remove event listeners\n    if (settings.validateOnBlur) {\n      document.removeEventListener('blur', blurHandler, true);\n      document.removeEventListener('input', inputHandler, false);\n      document.removeEventListener('change', changeHandler, false);\n      document.removeEventListener('click', clickHandler, false);\n    }\n\n    if (settings.validateOnSubmit) {\n      document.removeEventListener('submit', submitHandler, false);\n    } // Remove all errors\n\n\n    removeAllErrors(selector, settings); // Remove novalidate attribute\n\n    removeNoValidate(selector); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(document, 'bouncerDestroyed', {\n        settings: settings\n      });\n    } // Reset settings\n\n\n    settings = null;\n  };\n  /**\n   * Instantiate a new instance of the plugin\n   */\n\n\n  var init = function init() {\n    // Create settings\n    settings = extend(defaults, options || {}); // Add novalidate attribute\n\n    addNoValidate(selector); // Event Listeners\n\n    if (settings.validateOnBlur) {\n      document.addEventListener('blur', blurHandler, true);\n      document.addEventListener('input', inputHandler, false);\n      document.addEventListener('change', changeHandler, false);\n      document.addEventListener('click', clickHandler, false);\n    }\n\n    if (settings.validateOnSubmit) {\n      document.addEventListener('submit', submitHandler, false);\n    } // Emit custom event\n\n\n    if (settings.emitEvents) {\n      emitEvent(document, 'bouncerInitialized', {\n        settings: settings\n      });\n    }\n  }; //\n  // Inits & Event Listeners\n  //\n\n\n  init();\n  return publicAPIs;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/utils/bouncer.js\n");

/***/ }),

/***/ "./src/js/utils/globals.js":
/*!*********************************!*\
  !*** ./src/js/utils/globals.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formdata_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formdata-polyfill */ \"../../../../node_modules/formdata-polyfill/formdata.min.js\");\n__webpack_require__.g.t = function (string) {\n  var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (window.FormieTranslations) {\n    string = window.FormieTranslations[string] || string;\n  }\n\n  return string.replace(/{([a-zA-Z0-9]+)}/g, function (match, p1) {\n    if (replacements[p1]) {\n      return replacements[p1];\n    }\n\n    return match;\n  });\n}; //\n// Polyfills for IE11\n//\n// CustomEvent()\n\n\n(function () {\n  if (typeof window.CustomEvent === 'function') return false;\n\n  function CustomEvent(event, params) {\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: null\n    };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  window.CustomEvent = CustomEvent;\n})(); // FormData\n\n\n // closest\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n\n    do {\n      if (el.matches(s)) return el;\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvZ2xvYmFscy5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSxxQkFBTSxDQUFDQyxDQUFQLEdBQVcsVUFBU0MsTUFBVCxFQUFvQztFQUFBLElBQW5CQyxZQUFtQix1RUFBSixFQUFJOztFQUMzQyxJQUFJQyxNQUFNLENBQUNDLGtCQUFYLEVBQStCO0lBQzNCSCxNQUFNLEdBQUdFLE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEJILE1BQTFCLEtBQXFDQSxNQUE5QztFQUNIOztFQUVELE9BQU9BLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlLG1CQUFmLEVBQW9DLFVBQUNDLEtBQUQsRUFBUUMsRUFBUixFQUFlO0lBQ3RELElBQUlMLFlBQVksQ0FBQ0ssRUFBRCxDQUFoQixFQUFzQjtNQUNsQixPQUFPTCxZQUFZLENBQUNLLEVBQUQsQ0FBbkI7SUFDSDs7SUFFRCxPQUFPRCxLQUFQO0VBQ0gsQ0FOTSxDQUFQO0FBT0gsQ0FaRCxFQWNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQSxDQUFDLFlBQVc7RUFDUixJQUFLLE9BQU9ILE1BQU0sQ0FBQ0ssV0FBZCxLQUE4QixVQUFuQyxFQUFnRCxPQUFPLEtBQVA7O0VBRWhELFNBQVNBLFdBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxNQUE3QixFQUFzQztJQUNsQ0EsTUFBTSxHQUFHQSxNQUFNLElBQUk7TUFBRUMsT0FBTyxFQUFFLEtBQVg7TUFBa0JDLFVBQVUsRUFBRSxLQUE5QjtNQUFxQ0MsTUFBTSxFQUFFO0lBQTdDLENBQW5CO0lBQ0EsSUFBSUMsR0FBRyxHQUFHQyxRQUFRLENBQUNDLFdBQVQsQ0FBc0IsYUFBdEIsQ0FBVjtJQUNBRixHQUFHLENBQUNHLGVBQUosQ0FBcUJSLEtBQXJCLEVBQTRCQyxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNFLFVBQW5ELEVBQStERixNQUFNLENBQUNHLE1BQXRFO0lBQ0EsT0FBT0MsR0FBUDtFQUNIOztFQUVEWCxNQUFNLENBQUNLLFdBQVAsR0FBcUJBLFdBQXJCO0FBQ0gsQ0FYRCxLQWFBOzs7Q0FHQTs7QUFDQSxJQUFJLENBQUNVLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkMsT0FBdkIsRUFBZ0M7RUFDNUJGLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkMsT0FBbEIsR0FBNEJGLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkUsaUJBQWxCLElBQXVDSCxPQUFPLENBQUNDLFNBQVIsQ0FBa0JHLHFCQUFyRjtBQUNIOztBQUVELElBQUksQ0FBQ0osT0FBTyxDQUFDQyxTQUFSLENBQWtCSSxPQUF2QixFQUFnQztFQUM1QkwsT0FBTyxDQUFDQyxTQUFSLENBQWtCSSxPQUFsQixHQUE0QixVQUFTQyxDQUFULEVBQVk7SUFDcEMsSUFBSUMsRUFBRSxHQUFHLElBQVQ7O0lBRUEsR0FBRztNQUNDLElBQUlBLEVBQUUsQ0FBQ0wsT0FBSCxDQUFXSSxDQUFYLENBQUosRUFBbUIsT0FBT0MsRUFBUDtNQUNuQkEsRUFBRSxHQUFHQSxFQUFFLENBQUNDLGFBQUgsSUFBb0JELEVBQUUsQ0FBQ0UsVUFBNUI7SUFDSCxDQUhELFFBR1NGLEVBQUUsS0FBSyxJQUFQLElBQWVBLEVBQUUsQ0FBQ0csUUFBSCxLQUFnQixDQUh4Qzs7SUFJQSxPQUFPLElBQVA7RUFDSCxDQVJEO0FBU0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvZ2xvYmFscy5qcz81MjczIl0sInNvdXJjZXNDb250ZW50IjpbImdsb2JhbC50ID0gZnVuY3Rpb24oc3RyaW5nLCByZXBsYWNlbWVudHMgPSB7fSkge1xuICAgIGlmICh3aW5kb3cuRm9ybWllVHJhbnNsYXRpb25zKSB7XG4gICAgICAgIHN0cmluZyA9IHdpbmRvdy5Gb3JtaWVUcmFuc2xhdGlvbnNbc3RyaW5nXSB8fCBzdHJpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC97KFthLXpBLVowLTldKyl9L2csIChtYXRjaCwgcDEpID0+IHtcbiAgICAgICAgaWYgKHJlcGxhY2VtZW50c1twMV0pIHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlbWVudHNbcDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xufTtcblxuLy9cbi8vIFBvbHlmaWxscyBmb3IgSUUxMVxuLy9cblxuLy8gQ3VzdG9tRXZlbnQoKVxuKGZ1bmN0aW9uKCkge1xuICAgIGlmICggdHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJyApIHJldHVybiBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCBldmVudCwgcGFyYW1zICkge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogbnVsbCB9O1xuICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoICdDdXN0b21FdmVudCcgKTtcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudCggZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCApO1xuICAgICAgICByZXR1cm4gZXZ0O1xuICAgIH1cblxuICAgIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50O1xufSkoKTtcblxuLy8gRm9ybURhdGFcbmltcG9ydCAnZm9ybWRhdGEtcG9seWZpbGwnO1xuXG4vLyBjbG9zZXN0XG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcbiAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID0gRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xufVxuXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcbiAgICBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24ocykge1xuICAgICAgICB2YXIgZWwgPSB0aGlzO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlbC5tYXRjaGVzKHMpKSByZXR1cm4gZWw7XG4gICAgICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZTtcbiAgICAgICAgfSB3aGlsZSAoZWwgIT09IG51bGwgJiYgZWwubm9kZVR5cGUgPT09IDEpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbImdsb2JhbCIsInQiLCJzdHJpbmciLCJyZXBsYWNlbWVudHMiLCJ3aW5kb3ciLCJGb3JtaWVUcmFuc2xhdGlvbnMiLCJyZXBsYWNlIiwibWF0Y2giLCJwMSIsIkN1c3RvbUV2ZW50IiwiZXZlbnQiLCJwYXJhbXMiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImV2dCIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJFbGVtZW50IiwicHJvdG90eXBlIiwibWF0Y2hlcyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiY2xvc2VzdCIsInMiLCJlbCIsInBhcmVudEVsZW1lbnQiLCJwYXJlbnROb2RlIiwibm9kZVR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/globals.js\n");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eventKey\": () => (/* binding */ eventKey),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty),\n/* harmony export */   \"toBoolean\": () => (/* binding */ toBoolean)\n/* harmony export */ });\nvar isEmpty = function isEmpty(obj) {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\nvar toBoolean = function toBoolean(val) {\n  return !/^(?:f(?:alse)?|no?|0+)$/i.test(val) && !!val;\n};\nvar eventKey = function eventKey(eventName) {\n  return eventName + '.' + Math.random();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBTUEsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU0MsR0FBVCxFQUFjO0VBQ2pDLE9BQU9BLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEdBQVosRUFBaUJHLE1BQWpCLEtBQTRCLENBQW5DLElBQXdDSCxHQUFHLENBQUNJLFdBQUosS0FBb0JILE1BQW5FO0FBQ0gsQ0FGTTtBQUlBLElBQU1JLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVNDLEdBQVQsRUFBYztFQUNuQyxPQUFPLENBQUMsMkJBQTJCQyxJQUEzQixDQUFnQ0QsR0FBaEMsQ0FBRCxJQUF5QyxDQUFDLENBQUNBLEdBQWxEO0FBQ0gsQ0FGTTtBQUlBLElBQU1FLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLFNBQVQsRUFBb0I7RUFDeEMsT0FBT0EsU0FBUyxHQUFHLEdBQVosR0FBa0JDLElBQUksQ0FBQ0MsTUFBTCxFQUF6QjtBQUNILENBRk0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvdXRpbHMuanM/ZDllZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59O1xuXG5leHBvcnQgY29uc3QgdG9Cb29sZWFuID0gZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuICEvXig/OmYoPzphbHNlKT98bm8/fDArKSQvaS50ZXN0KHZhbCkgJiYgISF2YWw7XG59O1xuXG5leHBvcnQgY29uc3QgZXZlbnRLZXkgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZXZlbnROYW1lICsgJy4nICsgTWF0aC5yYW5kb20oKTtcbn07XG5cbiJdLCJuYW1lcyI6WyJpc0VtcHR5Iiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImNvbnN0cnVjdG9yIiwidG9Cb29sZWFuIiwidmFsIiwidGVzdCIsImV2ZW50S2V5IiwiZXZlbnROYW1lIiwiTWF0aCIsInJhbmRvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/utils/utils.js\n");

/***/ }),

/***/ "./src/scss/formie-base.scss":
/*!***********************************!*\
  !*** ./src/scss/formie-base.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9mb3JtaWUtYmFzZS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2Zvcm1pZS1iYXNlLnNjc3M/ZDAzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/formie-base.scss\n");

/***/ }),

/***/ "./src/scss/formie-theme.scss":
/*!************************************!*\
  !*** ./src/scss/formie-theme.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9mb3JtaWUtdGhlbWUuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9mb3JtaWUtdGhlbWUuc2Nzcz82NjZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scss/formie-theme.scss\n");

/***/ }),

/***/ "./src/scss/fields/phone-country.scss":
/*!********************************************!*\
  !*** ./src/scss/fields/phone-country.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9maWVsZHMvcGhvbmUtY291bnRyeS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2ZpZWxkcy9waG9uZS1jb3VudHJ5LnNjc3M/NTAyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/fields/phone-country.scss\n");

/***/ }),

/***/ "./src/scss/fields/tags.scss":
/*!***********************************!*\
  !*** ./src/scss/fields/tags.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9maWVsZHMvdGFncy5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2ZpZWxkcy90YWdzLnNjc3M/ZWE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/fields/tags.scss\n");

/***/ }),

/***/ "../../../../node_modules/formdata-polyfill/formdata.min.js":
/*!******************************************************************!*\
  !*** ../../../../node_modules/formdata-polyfill/formdata.min.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*! formdata-polyfill. MIT License. Jimmy W?rting <https://jimmy.warting.se/opensource> */\n;(function(){var h;function l(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var m=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction n(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var q=n(this);function r(a,b){if(b)a:{var c=q;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&m(c,a,{configurable:!0,writable:!0,value:b})}}\nr(\"Symbol\",function(a){function b(f){if(this instanceof b)throw new TypeError(\"Symbol is not a constructor\");return new c(d+(f||\"\")+\"_\"+e++,f)}function c(f,g){this.A=f;m(this,\"description\",{configurable:!0,writable:!0,value:g})}if(a)return a;c.prototype.toString=function(){return this.A};var d=\"jscomp_symbol_\"+(1E9*Math.random()>>>0)+\"_\",e=0;return b});\nr(\"Symbol.iterator\",function(a){if(a)return a;a=Symbol(\"Symbol.iterator\");for(var b=\"Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \"),c=0;c<b.length;c++){var d=q[b[c]];\"function\"===typeof d&&\"function\"!=typeof d.prototype[a]&&m(d.prototype,a,{configurable:!0,writable:!0,value:function(){return u(l(this))}})}return a});function u(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}\nfunction v(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:l(a)}}var w;if(\"function\"==typeof Object.setPrototypeOf)w=Object.setPrototypeOf;else{var y;a:{var z={a:!0},A={};try{A.__proto__=z;y=A.a;break a}catch(a){}y=!1}w=y?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+\" is not extensible\");return a}:null}var B=w;function C(){this.m=!1;this.j=null;this.v=void 0;this.h=1;this.u=this.C=0;this.l=null}\nfunction D(a){if(a.m)throw new TypeError(\"Generator is already running\");a.m=!0}C.prototype.o=function(a){this.v=a};C.prototype.s=function(a){this.l={D:a,F:!0};this.h=this.C||this.u};C.prototype.return=function(a){this.l={return:a};this.h=this.u};function E(a,b){a.h=3;return{value:b}}function F(a){this.g=new C;this.G=a}F.prototype.o=function(a){D(this.g);if(this.g.j)return G(this,this.g.j.next,a,this.g.o);this.g.o(a);return H(this)};\nfunction I(a,b){D(a.g);var c=a.g.j;if(c)return G(a,\"return\"in c?c[\"return\"]:function(d){return{value:d,done:!0}},b,a.g.return);a.g.return(b);return H(a)}F.prototype.s=function(a){D(this.g);if(this.g.j)return G(this,this.g.j[\"throw\"],a,this.g.o);this.g.s(a);return H(this)};\nfunction G(a,b,c,d){try{var e=b.call(a.g.j,c);if(!(e instanceof Object))throw new TypeError(\"Iterator result \"+e+\" is not an object\");if(!e.done)return a.g.m=!1,e;var f=e.value}catch(g){return a.g.j=null,a.g.s(g),H(a)}a.g.j=null;d.call(a.g,f);return H(a)}function H(a){for(;a.g.h;)try{var b=a.G(a.g);if(b)return a.g.m=!1,{value:b.value,done:!1}}catch(c){a.g.v=void 0,a.g.s(c)}a.g.m=!1;if(a.g.l){b=a.g.l;a.g.l=null;if(b.F)throw b.D;return{value:b.return,done:!0}}return{value:void 0,done:!0}}\nfunction J(a){this.next=function(b){return a.o(b)};this.throw=function(b){return a.s(b)};this.return=function(b){return I(a,b)};this[Symbol.iterator]=function(){return this}}function K(a,b){b=new J(new F(b));B&&a.prototype&&B(b,a.prototype);return b}function L(a,b){a instanceof String&&(a+=\"\");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var f=c++;return{value:b(f,a[f]),done:!1}}d=!0;return{done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e}\nr(\"Array.prototype.entries\",function(a){return a?a:function(){return L(this,function(b,c){return[b,c]})}});\nif(\"undefined\"!==typeof Blob&&(\"undefined\"===typeof FormData||!FormData.prototype.keys)){var M=function(a,b){for(var c=0;c<a.length;c++)b(a[c])},N=function(a){return a.replace(/\\r?\\n|\\r/g,\"\\r\\n\")},O=function(a,b,c){if(b instanceof Blob){c=void 0!==c?String(c+\"\"):\"string\"===typeof b.name?b.name:\"blob\";if(b.name!==c||\"[object Blob]\"===Object.prototype.toString.call(b))b=new File([b],c);return[String(a),b]}return[String(a),String(b)]},P=function(a,b){if(a.length<b)throw new TypeError(b+\" argument required, but only \"+\na.length+\" present.\");},Q=\"object\"===typeof globalThis?globalThis:\"object\"===typeof window?window:\"object\"===typeof self?self:this,R=Q.FormData,S=Q.XMLHttpRequest&&Q.XMLHttpRequest.prototype.send,T=Q.Request&&Q.fetch,U=Q.navigator&&Q.navigator.sendBeacon,V=Q.Element&&Q.Element.prototype,W=Q.Symbol&&Symbol.toStringTag;W&&(Blob.prototype[W]||(Blob.prototype[W]=\"Blob\"),\"File\"in Q&&!File.prototype[W]&&(File.prototype[W]=\"File\"));try{new File([],\"\")}catch(a){Q.File=function(b,c,d){b=new Blob(b,d||{});\nObject.defineProperties(b,{name:{value:c},lastModified:{value:+(d&&void 0!==d.lastModified?new Date(d.lastModified):new Date)},toString:{value:function(){return\"[object File]\"}}});W&&Object.defineProperty(b,W,{value:\"File\"});return b}}var escape=function(a){return a.replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\")},X=function(a){this.i=[];var b=this;a&&M(a.elements,function(c){if(c.name&&!c.disabled&&\"submit\"!==c.type&&\"button\"!==c.type&&!c.matches(\"form fieldset[disabled] *\"))if(\"file\"===\nc.type){var d=c.files&&c.files.length?c.files:[new File([],\"\",{type:\"application/octet-stream\"})];M(d,function(e){b.append(c.name,e)})}else\"select-multiple\"===c.type||\"select-one\"===c.type?M(c.options,function(e){!e.disabled&&e.selected&&b.append(c.name,e.value)}):\"checkbox\"===c.type||\"radio\"===c.type?c.checked&&b.append(c.name,c.value):(d=\"textarea\"===c.type?N(c.value):c.value,b.append(c.name,d))})};h=X.prototype;h.append=function(a,b,c){P(arguments,2);this.i.push(O(a,b,c))};h.delete=function(a){P(arguments,\n1);var b=[];a=String(a);M(this.i,function(c){c[0]!==a&&b.push(c)});this.i=b};h.entries=function b(){var c,d=this;return K(b,function(e){1==e.h&&(c=0);if(3!=e.h)return c<d.i.length?e=E(e,d.i[c]):(e.h=0,e=void 0),e;c++;e.h=2})};h.forEach=function(b,c){P(arguments,1);for(var d=v(this),e=d.next();!e.done;e=d.next()){var f=v(e.value);e=f.next().value;f=f.next().value;b.call(c,f,e,this)}};h.get=function(b){P(arguments,1);var c=this.i;b=String(b);for(var d=0;d<c.length;d++)if(c[d][0]===b)return c[d][1];\nreturn null};h.getAll=function(b){P(arguments,1);var c=[];b=String(b);M(this.i,function(d){d[0]===b&&c.push(d[1])});return c};h.has=function(b){P(arguments,1);b=String(b);for(var c=0;c<this.i.length;c++)if(this.i[c][0]===b)return!0;return!1};h.keys=function c(){var d=this,e,f,g,k,p;return K(c,function(t){1==t.h&&(e=v(d),f=e.next());if(3!=t.h){if(f.done){t.h=0;return}g=f.value;k=v(g);p=k.next().value;return E(t,p)}f=e.next();t.h=2})};h.set=function(c,d,e){P(arguments,2);c=String(c);var f=[],g=O(c,\nd,e),k=!0;M(this.i,function(p){p[0]===c?k&&(k=!f.push(g)):f.push(p)});k&&f.push(g);this.i=f};h.values=function d(){var e=this,f,g,k,p,t;return K(d,function(x){1==x.h&&(f=v(e),g=f.next());if(3!=x.h){if(g.done){x.h=0;return}k=g.value;p=v(k);p.next();t=p.next().value;return E(x,t)}g=f.next();x.h=2})};X.prototype._asNative=function(){for(var d=new R,e=v(this),f=e.next();!f.done;f=e.next()){var g=v(f.value);f=g.next().value;g=g.next().value;d.append(f,g)}return d};X.prototype._blob=function(){var d=\"----formdata-polyfill-\"+\nMath.random(),e=[],f=\"--\"+d+'\\r\\nContent-Disposition: form-data; name=\"';this.forEach(function(g,k){return\"string\"==typeof g?e.push(f+escape(N(k))+('\"\\r\\n\\r\\n'+N(g)+\"\\r\\n\")):e.push(f+escape(N(k))+('\"; filename=\"'+escape(g.name)+'\"\\r\\nContent-Type: '+(g.type||\"application/octet-stream\")+\"\\r\\n\\r\\n\"),g,\"\\r\\n\")});e.push(\"--\"+d+\"--\");return new Blob(e,{type:\"multipart/form-data; boundary=\"+d})};X.prototype[Symbol.iterator]=function(){return this.entries()};X.prototype.toString=function(){return\"[object FormData]\"};\nV&&!V.matches&&(V.matches=V.matchesSelector||V.mozMatchesSelector||V.msMatchesSelector||V.oMatchesSelector||V.webkitMatchesSelector||function(d){d=(this.document||this.ownerDocument).querySelectorAll(d);for(var e=d.length;0<=--e&&d.item(e)!==this;);return-1<e});W&&(X.prototype[W]=\"FormData\");if(S){var Y=Q.XMLHttpRequest.prototype.setRequestHeader;Q.XMLHttpRequest.prototype.setRequestHeader=function(d,e){Y.call(this,d,e);\"content-type\"===d.toLowerCase()&&(this.B=!0)};Q.XMLHttpRequest.prototype.send=\nfunction(d){d instanceof X?(d=d._blob(),this.B||this.setRequestHeader(\"Content-Type\",d.type),S.call(this,d)):S.call(this,d)}}T&&(Q.fetch=function(d,e){e&&e.body&&e.body instanceof X&&(e.body=e.body._blob());return T.call(this,d,e)});U&&(Q.navigator.sendBeacon=function(d,e){e instanceof X&&(e=e._asNative());return U.call(this,d,e)});Q.FormData=X};})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/formdata-polyfill/formdata.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/formie": 0,
/******/ 			"css/fields/phone-country": 0,
/******/ 			"css/fields/tags": 0,
/******/ 			"css/formie-theme": 0,
/******/ 			"css/formie-base": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["formieConfigChunkLoadingGlobal"] = self["formieConfigChunkLoadingGlobal"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/js/formie.js")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/formie-base.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/formie-theme.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/fields/phone-country.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/fields/tags.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;