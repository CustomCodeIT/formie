/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/formie-form-base.js":
/*!************************************!*\
  !*** ./src/js/formie-form-base.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieFormBase\": () => (/* binding */ FormieFormBase)\n/* harmony export */ });\n/* harmony import */ var _formie_form_theme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formie-form-theme */ \"./src/js/formie-form-theme.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar globals = __webpack_require__(/*! ./utils/globals */ \"./src/js/utils/globals.js\");\n\n\nvar FormieFormBase = /*#__PURE__*/function () {\n  function FormieFormBase($form) {\n    var _this = this;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FormieFormBase);\n\n    this.$form = $form;\n    this.config = config;\n    this.settings = config.settings;\n    this.listeners = {};\n\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.form = this;\n\n    if (this.settings.outputJsTheme) {\n      this.formTheme = new _formie_form_theme__WEBPACK_IMPORTED_MODULE_0__.FormieFormTheme(this.$form, this.config);\n    } // Add helper classes to fields when their inputs are focused, have values etc.\n\n\n    this.registerFieldEvents(this.$form); // Hijack the form's submit handler, in case we need to do something\n\n    this.addEventListener(this.$form, 'submit', function (e) {\n      e.preventDefault();\n\n      var beforeSubmitEvent = _this.eventObject('onBeforeFormieSubmit', {\n        submitHandler: _this\n      });\n\n      if (!_this.$form.dispatchEvent(beforeSubmitEvent)) {\n        return;\n      } // Add a little delay for UX\n\n\n      setTimeout(function () {\n        // Call the validation hooks\n        if (!_this.validate() || !_this.afterValidate()) {\n          return;\n        } // Trigger Captchas\n\n\n        if (!_this.validateCaptchas()) {\n          return;\n        } // Trigger Payment Integrations\n\n\n        if (!_this.validatePayment()) {\n          return;\n        } // Proceed with submitting the form, which raises other validation events\n\n\n        _this.submitForm();\n      }, 300);\n    }, false);\n  }\n\n  _createClass(FormieFormBase, [{\n    key: \"validate\",\n    value: function validate() {\n      // Create an event for front-end validation (our own JS)\n      var validateEvent = this.eventObject('onFormieValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"afterValidate\",\n    value: function afterValidate() {\n      // Create an event for after validation. This is mostly for third-parties.\n      var afterValidateEvent = this.eventObject('onAfterFormieValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(afterValidateEvent);\n    }\n  }, {\n    key: \"validateCaptchas\",\n    value: function validateCaptchas() {\n      // Create an event for captchas, separate to validation\n      var validateEvent = this.eventObject('onFormieCaptchaValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"validatePayment\",\n    value: function validatePayment() {\n      // Create an event for payments, separate to validation\n      var validateEvent = this.eventObject('onFormiePaymentValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      var submitEvent = this.eventObject('onFormieSubmit', {\n        submitHandler: this\n      });\n\n      if (!this.$form.dispatchEvent(submitEvent)) {\n        return;\n      }\n\n      if (this.settings.submitMethod === 'ajax') {\n        this.formAfterSubmit();\n      } else {\n        this.$form.submit();\n      }\n    }\n  }, {\n    key: \"formAfterSubmit\",\n    value: function formAfterSubmit() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$form.dispatchEvent(new CustomEvent('onAfterFormieSubmit', {\n        bubbles: true,\n        detail: data\n      }));\n    }\n  }, {\n    key: \"formSubmitError\",\n    value: function formSubmitError() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$form.dispatchEvent(new CustomEvent('onFormieSubmitError', {\n        bubbles: true,\n        detail: data\n      }));\n    }\n  }, {\n    key: \"registerFieldEvents\",\n    value: function registerFieldEvents($element) {\n      var _this2 = this;\n\n      var $wrappers = $element.querySelectorAll('[data-field-type]');\n      $wrappers.forEach(function ($wrapper) {\n        var $input = $wrapper.querySelector('input, select');\n\n        if ($input) {\n          _this2.addEventListener($input, 'input', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('input', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          _this2.addEventListener($input, 'focus', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('focus', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          _this2.addEventListener($input, 'blur', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('blur', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          $wrapper.dispatchEvent(new CustomEvent('init', {\n            bubbles: false,\n            detail: {\n              input: $input\n            }\n          }));\n        }\n      });\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(element, event, func) {\n      this.listeners[event] = {\n        element: element,\n        func: func\n      };\n      element.addEventListener(event.split('.')[0], this.listeners[event].func);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(event) {\n      var eventInfo = this.listeners[event] || {};\n\n      if (eventInfo && eventInfo.element && eventInfo.func) {\n        eventInfo.element.removeEventListener(event.split('.')[0], eventInfo.func);\n        delete this.listeners[event];\n      }\n    }\n  }, {\n    key: \"eventObject\",\n    value: function eventObject(name, detail) {\n      return new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true,\n        detail: detail\n      });\n    }\n  }, {\n    key: \"getClasses\",\n    value: function getClasses(key) {\n      var classes = this.settings.classes || {};\n      return classes[key];\n    }\n  }]);\n\n  return FormieFormBase;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/formie-form-base.js\n");

/***/ }),

/***/ "./src/js/formie-form-theme.js":
/*!*************************************!*\
  !*** ./src/js/formie-form-theme.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieFormTheme\": () => (/* binding */ FormieFormTheme)\n/* harmony export */ });\n/* harmony import */ var _utils_bouncer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/bouncer */ \"./src/js/utils/bouncer.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\nvar FormieFormTheme = /*#__PURE__*/function () {\n  function FormieFormTheme($form) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FormieFormTheme);\n\n    this.$form = $form;\n    this.config = config;\n    this.settings = config.settings;\n    this.validationOnSubmit = !!this.settings.validationOnSubmit;\n    this.validationOnFocus = !!this.settings.validationOnFocus;\n    this.setCurrentPage(this.settings.currentPageId);\n\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.formTheme = this;\n    this.form = this.$form.form; // Setup classes according to theme config\n\n    this.loadingClass = this.form.getClasses('loading');\n    this.tabErrorClass = this.form.getClasses('tabError');\n    this.tabActiveClass = this.form.getClasses('tabActive');\n    this.errorMessageClass = this.form.getClasses('errorMessage');\n    this.successMessageClass = this.form.getClasses('successMessage');\n    this.alertClass = this.form.getClasses('alert');\n    this.alertErrorClass = this.form.getClasses('alertError');\n    this.alertSuccessClass = this.form.getClasses('alertSuccess');\n    this.tabClass = this.form.getClasses('tab');\n    this.initValidator(); // Check if this is a success page and if we need to hide the notice\n    // This is for non-ajax forms, where the page has reloaded\n\n    this.hideSuccess(); // Hijack the form's submit handler, in case we need to do something\n\n    this.addSubmitEventListener(); // Save the form's current state so we can tell if its changed later on\n\n    this.updateFormHash(); // Listen to form changes if the user tries to reload\n\n    if (this.settings.enableUnloadWarning) {\n      this.addFormUnloadEventListener();\n    } // Listen to tabs being clicked for ajax-enabled forms\n\n\n    if (this.settings.submitMethod === 'ajax') {\n      this.formTabEventListener();\n    }\n  }\n\n  _createClass(FormieFormTheme, [{\n    key: \"initValidator\",\n    value: function initValidator() {\n      var _this = this;\n\n      // Kick off validation - use this even if disabling client-side validation\n      // so we can use a nice API handle server-side errprs\n      var validatorSettings = {\n        fieldClass: 'fui-error',\n        errorClass: this.form.getClasses('fieldError'),\n        fieldPrefix: 'fui-field-',\n        errorPrefix: 'fui-error-',\n        messageAfterField: true,\n        messageCustom: 'data-fui-message',\n        messageTarget: 'data-fui-target',\n        validateOnBlur: this.validationOnFocus,\n        // Call validation on-demand\n        validateOnSubmit: false,\n        disableSubmit: false,\n        customValidations: {},\n        messages: {\n          missingValue: {\n            checkbox: t('This field is required.'),\n            radio: t('Please select a value.'),\n            select: t('Please select a value.'),\n            'select-multiple': t('Please select at least one value.'),\n            \"default\": t('Please fill out this field.')\n          },\n          patternMismatch: {\n            email: t('Please enter a valid email address.'),\n            url: t('Please enter a URL.'),\n            number: t('Please enter a number'),\n            color: t('Please match the following format: #rrggbb'),\n            date: t('Please use the YYYY-MM-DD format'),\n            time: t('Please use the 24-hour time format. Ex. 23:00'),\n            month: t('Please use the YYYY-MM format'),\n            \"default\": t('Please match the requested format.')\n          },\n          outOfRange: {\n            over: t('Please select a value that is no more than {max}.'),\n            under: t('Please select a value that is no less than {min}.')\n          },\n          wrongLength: {\n            over: t('Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.'),\n            under: t('Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.')\n          },\n          fallback: t('There was an error with this field.')\n        }\n      }; // Allow other modules to modify our validator settings (for custom rules and messages)\n\n      var registerFormieValidation = new CustomEvent('registerFormieValidation', {\n        bubbles: true,\n        detail: {\n          validatorSettings: validatorSettings\n        }\n      }); // Give a small amount of time for other JS scripts to register validations. These are lazy-loaded.\n      // Maybe re-think this so we don't have to deal with event listener registration before/after dispatch?\n\n      setTimeout(function () {\n        _this.$form.dispatchEvent(registerFormieValidation);\n\n        _this.validator = new _utils_bouncer__WEBPACK_IMPORTED_MODULE_0__.Bouncer(_this.$form, registerFormieValidation.detail.validatorSettings);\n      }, 500); // After we clear any error, validate the fielset again. Mostly so we can remove global errors\n\n      this.form.addEventListener(this.$form, 'bouncerRemoveError', function (e) {\n        // Prevent an infinite loop (check behaviour with an Agree field)\n        // https://github.com/verbb/formie/issues/905\n        if (!_this.submitDebounce) {\n          _this.validate(false);\n        }\n      }); // Override error messages defined in DOM - Bouncer only uses these as a last resort\n      // In future updates, we can probably remove this\n\n      this.form.addEventListener(this.$form, 'bouncerShowError', function (e) {\n        var message = null;\n        var $field = e.target;\n        var $fieldContainer = $field.closest('[data-field-type]'); // Get the error message as defined on the input element. Use the parent to find the element\n        // just to cater for some edge-cases where there might be multiple inputs (Datepicker).\n\n        var $message = $field.parentNode.querySelector('[data-fui-message]');\n\n        if ($message) {\n          message = $message.getAttribute('data-fui-message');\n        } // If there's a server error, it takes priority.\n\n\n        if (e.detail && e.detail.errors && e.detail.errors.serverMessage) {\n          message = e.detail.errors.serverMessage;\n        } // Check if we need to move the error out of the .fui-input-container node.\n        // Only the input itself should be in here.\n\n\n        var $errorToMove = $field.parentNode.querySelector('[data-error-message]');\n\n        if ($errorToMove && $errorToMove.parentNode.parentNode) {\n          $errorToMove.parentNode.parentNode.appendChild($errorToMove);\n        } // The error has been moved, find it again\n\n\n        if ($fieldContainer) {\n          var $error = $fieldContainer.querySelector('[data-error-message]');\n\n          if ($error && message) {\n            $error.textContent = message;\n          }\n        }\n      }, false);\n    }\n  }, {\n    key: \"addSubmitEventListener\",\n    value: function addSubmitEventListener() {\n      var _this2 = this;\n\n      var $submitBtns = this.$form.querySelectorAll('[type=\"submit\"]'); // Forms can have multiple submit buttons, and its easier to assign the currently clicked one\n      // than tracking it through the submit handler.\n\n      $submitBtns.forEach(function ($submitBtn) {\n        _this2.form.addEventListener($submitBtn, 'click', function (e) {\n          _this2.$submitBtn = e.target; // Store for later if we're using text spinner\n\n          _this2.originalButtonText = e.target.textContent.trim(); // Each submit button can do different things, to store that\n\n          _this2.updateSubmitAction(_this2.$submitBtn.getAttribute('data-submit-action'));\n        });\n      });\n      this.form.addEventListener(this.$form, 'onBeforeFormieSubmit', this.onBeforeSubmit.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieValidate', this.onValidate.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieSubmit', this.onSubmit.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieSubmitError', this.onSubmitError.bind(this));\n    }\n  }, {\n    key: \"onBeforeSubmit\",\n    value: function onBeforeSubmit(e) {\n      this.beforeSubmit(); // Save for later to trigger real submit\n\n      this.submitHandler = e.detail.submitHandler;\n    }\n  }, {\n    key: \"onValidate\",\n    value: function onValidate(e) {\n      // If invalid, we only want to stop if we're submitting.\n      if (!this.validate()) {\n        this.onFormError(); // Set a flag on the event, so other listeners can potentially do something\n\n        e.detail.invalid = true;\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      // Stop base behaviour of just submitting the form\n      e.preventDefault(); // Either staight submit, or use Ajax\n\n      if (this.settings.submitMethod === 'ajax') {\n        this.ajaxSubmit();\n      } else {\n        // Before a server-side submit, refresh the saved hash immediately. Otherwise, the native submit\n        // handler - which technically unloads the page - will trigger the changed alert.\n        // But trigger an alert if we're going back, and back-submission data isn't set\n        if (!this.settings.enableBackSubmission && this.form.submitAction === 'back') {// Don't reset the hash, trigger a warning if content has changed, because we're not submitting\n        } else {\n          this.updateFormHash();\n        } // Triger any JS events for this page, only if submitting (not going back/saving)\n\n\n        if (this.form.submitAction === 'submit') {\n          this.triggerJsEvents();\n        }\n\n        this.$form.submit();\n      }\n    }\n  }, {\n    key: \"onSubmitError\",\n    value: function onSubmitError(e) {\n      this.onFormError();\n    }\n  }, {\n    key: \"addFormUnloadEventListener\",\n    value: function addFormUnloadEventListener() {\n      var _this3 = this;\n\n      this.form.addEventListener(window, 'beforeunload', function (e) {\n        if (_this3.savedFormHash !== _this3.hashForm()) {\n          e.preventDefault();\n          return e.returnValue = t('Are you sure you want to leave?');\n        }\n      });\n    }\n  }, {\n    key: \"formTabEventListener\",\n    value: function formTabEventListener() {\n      var _this4 = this;\n\n      var $tabs = this.$form.querySelectorAll('[data-fui-page-tab-anchor]');\n      $tabs.forEach(function ($tab) {\n        _this4.form.addEventListener($tab, 'click', function (e) {\n          e.preventDefault();\n          var pageIndex = e.target.getAttribute('data-fui-page-index');\n          var pageId = e.target.getAttribute('data-fui-page-id');\n\n          _this4.togglePage({\n            nextPageIndex: pageIndex,\n            nextPageId: pageId,\n            totalPages: _this4.settings.pages.length\n          }); // Ensure we still update the current page server-side\n\n\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', e.target.getAttribute('href'), true);\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.setRequestHeader('Cache-Control', 'no-cache');\n          xhr.send();\n        });\n      });\n    }\n  }, {\n    key: \"hashForm\",\n    value: function hashForm() {\n      var hash = {};\n      var formData = new FormData(this.$form); // Exlcude some params from the hash, that are programatically changed\n\n      var excludedItems = ['g-recaptcha-response', 'h-captcha-response', 'CRAFT_CSRF_TOKEN', '__JSCHK', 'submitAction'];\n\n      var _iterator = _createForOfIteratorHelper(formData.entries()),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var pair = _step.value;\n          var isExcluded = excludedItems.filter(function (item) {\n            return pair[0].startsWith(item);\n          });\n\n          if (!isExcluded.length) {\n            // eslint-disable-next-line\n            hash[pair[0]] = pair[1];\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return JSON.stringify(hash);\n    }\n  }, {\n    key: \"updateFormHash\",\n    value: function updateFormHash() {\n      this.savedFormHash = this.hashForm();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var _this5 = this;\n\n      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!this.validationOnSubmit) {\n        return true;\n      } // Only validate on submit actions\n\n\n      if (this.form.submitAction !== 'submit') {\n        return true;\n      }\n\n      var $fieldset = this.$form;\n\n      if (this.$currentPage) {\n        $fieldset = this.$currentPage;\n      }\n\n      var invalidFields = this.validator.validateAll($fieldset); // If there are errors, focus on the first one\n\n      if (invalidFields.length > 0 && focus) {\n        invalidFields[0].focus();\n      } // Remove any global errors if none - just in case\n\n\n      if (invalidFields.length === 0) {\n        this.removeFormAlert();\n      } // Set the debounce after a little bit, to prevent an infinite loop, as this method\n      // is called on `bouncerRemoveError`.\n\n\n      this.submitDebounce = true;\n      setTimeout(function () {\n        _this5.submitDebounce = false;\n      }, 500);\n      return !invalidFields.length;\n    }\n  }, {\n    key: \"hideSuccess\",\n    value: function hideSuccess() {\n      var $successMessage = this.$form.parentNode.querySelector(\".\".concat(this.successMessageClass));\n\n      if ($successMessage && this.settings.submitActionMessageTimeout) {\n        var timeout = parseInt(this.settings.submitActionMessageTimeout, 10) * 1000;\n        setTimeout(function () {\n          $successMessage.remove();\n        }, timeout);\n      }\n    }\n  }, {\n    key: \"addLoading\",\n    value: function addLoading() {\n      if (this.$submitBtn) {\n        // Always disable the button\n        this.$submitBtn.setAttribute('disabled', true);\n\n        if (this.settings.loadingIndicator === 'spinner') {\n          this.$submitBtn.classList.add(this.loadingClass);\n        }\n\n        if (this.settings.loadingIndicator === 'text') {\n          this.$submitBtn.textContent = this.settings.loadingIndicatorText;\n        }\n      }\n    }\n  }, {\n    key: \"removeLoading\",\n    value: function removeLoading() {\n      if (this.$submitBtn) {\n        // Always enable the button\n        this.$submitBtn.removeAttribute('disabled');\n\n        if (this.settings.loadingIndicator === 'spinner') {\n          this.$submitBtn.classList.remove(this.loadingClass);\n        }\n\n        if (this.settings.loadingIndicator === 'text') {\n          this.$submitBtn.textContent = this.originalButtonText;\n        }\n      }\n    }\n  }, {\n    key: \"onFormError\",\n    value: function onFormError(errorMessage) {\n      if (errorMessage) {\n        this.showFormAlert(errorMessage, 'error');\n      } else {\n        this.showFormAlert(this.settings.errorMessage, 'error');\n      }\n\n      this.removeLoading();\n    }\n  }, {\n    key: \"showFormAlert\",\n    value: function showFormAlert(text, type) {\n      var $alert = this.$form.parentNode.querySelector('[role=\"alert\"]'); // Strip <p> tags\n\n      text = text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '');\n\n      if ($alert) {\n        // We have to cater for HTML entities - quick-n-dirty\n        if ($alert.innerHTML !== this.decodeHtml(text)) {\n          $alert.innerHTML = \"\".concat($alert.innerHTML, \"<br>\").concat(text);\n        }\n      } else {\n        $alert = document.createElement('div');\n        $alert.className = \"\".concat(this.alertClass);\n        $alert.setAttribute('role', 'alert');\n        $alert.innerHTML = text; // For error notices, we have potential special handling on position\n\n        if (type == 'error') {\n          $alert.className += \" \".concat(this.alertErrorClass, \" \").concat(this.alertClass, \"-\").concat(this.settings.errorMessagePosition);\n\n          if (this.settings.errorMessagePosition == 'bottom-form') {\n            this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n          } else if (this.settings.errorMessagePosition == 'top-form') {\n            this.$form.parentNode.insertBefore($alert, this.$form);\n          }\n        } else {\n          $alert.className += \" \".concat(this.alertSuccessClass, \" \").concat(this.alertClass, \"-\").concat(this.settings.submitActionMessagePosition);\n\n          if (this.settings.submitActionMessagePosition == 'bottom-form') {\n            // An even further special case when hiding the form!\n            if (this.settings.submitActionFormHide) {\n              this.$form.parentNode.insertBefore($alert, this.$form);\n            } else if (this.$submitBtn.parentNode) {\n              // Check if there's a submit button still. Might've been removed for multi-page, ajax.\n              this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n            } else {\n              this.$form.parentNode.insertBefore($alert, this.$form.nextSibling);\n            }\n          } else if (this.settings.submitActionMessagePosition == 'top-form') {\n            this.$form.parentNode.insertBefore($alert, this.$form);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"showTabErrors\",\n    value: function showTabErrors(errors) {\n      var _this6 = this;\n\n      Object.keys(errors).forEach(function (pageId, index) {\n        var $tab = _this6.$form.parentNode.querySelector(\"[data-fui-page-id=\\\"\".concat(pageId, \"\\\"]\"));\n\n        if ($tab) {\n          $tab.parentNode.classList.add(_this6.tabErrorClass);\n        }\n      });\n    }\n  }, {\n    key: \"decodeHtml\",\n    value: function decodeHtml(html) {\n      var txt = document.createElement('textarea');\n      txt.innerHTML = html;\n      return txt.value;\n    }\n  }, {\n    key: \"removeFormAlert\",\n    value: function removeFormAlert() {\n      var $alert = this.$form.parentNode.querySelector(\".\".concat(this.alertClass));\n\n      if ($alert) {\n        $alert.remove();\n      }\n    }\n  }, {\n    key: \"removeTabErrors\",\n    value: function removeTabErrors() {\n      var _this7 = this;\n\n      var $tabs = this.$form.parentNode.querySelectorAll('[data-fui-page-tab]');\n      $tabs.forEach(function ($tab) {\n        $tab.classList.remove(_this7.tabErrorClass);\n      });\n    }\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      var _this8 = this;\n\n      // Remove all validation errors\n      Array.prototype.filter.call(this.$form.querySelectorAll('input, select, textarea'), function ($field) {\n        _this8.validator.removeError($field);\n      });\n      this.removeFormAlert();\n      this.removeTabErrors(); // Don't set a loading if we're going back and the unload warning appears, because there's no way to re-enable\n      // the button after the user cancels the unload event\n\n      if (!this.settings.enableBackSubmission && this.form.submitAction === 'back') {// Do nothing\n      } else {\n        this.addLoading();\n      }\n    }\n  }, {\n    key: \"ajaxSubmit\",\n    value: function ajaxSubmit() {\n      var _this9 = this;\n\n      var formData = new FormData(this.$form);\n      var method = this.$form.getAttribute('method');\n      var action = this.$form.getAttribute('action');\n      var xhr = new XMLHttpRequest();\n      xhr.open(method ? method : 'POST', action ? action : window.location.href, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.timeout = (this.settings.ajaxTimeout || 10) * 1000;\n      this.beforeSubmit();\n\n      xhr.ontimeout = function () {\n        _this9.onAjaxError(t('The request timed out.'));\n      };\n\n      xhr.onerror = function (e) {\n        _this9.onAjaxError(t('The request encountered a network error. Please try again.'));\n      };\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            var response = JSON.parse(xhr.responseText);\n\n            if (response.errors) {\n              _this9.onAjaxError(response.errorMessage, response);\n            } else {\n              _this9.onAjaxSuccess(response);\n            }\n          } catch (e) {\n            _this9.onAjaxError(t('Unable to parse response `{e}`.', {\n              e: e\n            }));\n          }\n        } else {\n          _this9.onAjaxError(\"\".concat(xhr.status, \": \").concat(xhr.statusText));\n        }\n      };\n\n      xhr.send(formData);\n    }\n  }, {\n    key: \"afterAjaxSubmit\",\n    value: function afterAjaxSubmit(data) {\n      var _this10 = this;\n\n      // Reset the submit action, immediately, whether fail or success\n      this.updateSubmitAction('submit');\n      this.updateSubmissionInput(data); // Check if there's any events in the response back, and fire them\n\n      if (data.events && Array.isArray(data.events)) {\n        data.events.forEach(function (eventData) {\n          _this10.$form.dispatchEvent(new CustomEvent(eventData.event, {\n            bubbles: true,\n            detail: {\n              data: eventData.data\n            }\n          }));\n        });\n      }\n    }\n  }, {\n    key: \"onAjaxError\",\n    value: function onAjaxError(errorMessage) {\n      var _this11 = this;\n\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var errors = data.errors || {};\n      var pageFieldErrors = data.pageFieldErrors || {}; // Show an error message at the top of the form\n\n      this.onFormError(errorMessage); // Update the page tabs (if any) to show error state\n\n      this.showTabErrors(pageFieldErrors); // Fire a fail event\n\n      this.submitHandler.formSubmitError(); // Fire cleanup methods after _any_ ajax call\n\n      this.afterAjaxSubmit(data); // Show server-side errors for each field\n\n      Object.keys(errors).forEach(function (handle, index) {\n        var _errors$handle = _slicedToArray(errors[handle], 1),\n            error = _errors$handle[0];\n\n        var $field = _this11.$form.querySelector(\"[name=\\\"fields[\".concat(handle, \"]\\\"]\")); // Check for multiple fields\n\n\n        if (!$field) {\n          $field = _this11.$form.querySelector(\"[name=\\\"fields[\".concat(handle, \"][]\\\"]\"));\n        }\n\n        if ($field) {\n          _this11.validator.showError($field, {\n            serverMessage: error\n          }); // Focus on the first error\n\n\n          if (index === 0) {\n            $field.focus();\n          }\n        }\n      }); // Go to the first page with an error, for good UX\n\n      this.togglePage(data, false);\n    }\n  }, {\n    key: \"onAjaxSuccess\",\n    value: function onAjaxSuccess(data) {\n      // Fire the event, because we've overridden the handler\n      this.submitHandler.formAfterSubmit(data); // Fire cleanup methods after _any_ ajax call\n\n      this.afterAjaxSubmit(data); // Reset the form hash, as all has been saved\n\n      this.updateFormHash(); // Triger any JS events for this page, right away before navigating away\n\n      if (this.form.submitAction === 'submit') {\n        this.triggerJsEvents();\n      } // Check if we need to proceed to the next page\n\n\n      if (data.nextPageId) {\n        this.removeLoading();\n        this.togglePage(data);\n        return;\n      } // If we're redirecting away, do it immediately for nicer UX\n\n\n      if (data.redirectUrl) {\n        if (this.settings.submitActionTab === 'new-tab') {\n          // Reset values if in a new tab. No need when in the same tab.\n          this.$form.reset();\n          window.open(data.redirectUrl, '_blank');\n        } else {\n          window.location.href = data.redirectUrl;\n        }\n\n        return;\n      } // Delay this a little, in case we're redirecting away - better UX to just keep it loading\n\n\n      this.removeLoading(); // For multi-page ajax forms, deal with them a little differently.\n\n      if (data.totalPages > 1) {\n        // If we have a success message at the top, go to the first page\n        if (this.settings.submitActionMessagePosition == 'top-form') {\n          this.togglePage({\n            nextPageIndex: 0,\n            nextPageId: this.settings.pages[0].id,\n            totalPages: this.settings.pages.length\n          });\n        } else {\n          // Otherwise, we want to hide the buttons because we have to stay on the last page\n          // to show the success message at the bottom of the form. Otherwise, showing it on the\n          // first page of an empty form is just plain weird UX.\n          if (this.$submitBtn) {\n            this.$submitBtn.remove();\n          } // Remove the back button - not great UX to go back to a finished form\n          // Remember, its the button and the hidden input\n\n\n          var $backButtonInputs = this.$form.querySelectorAll('[data-submit-action=\"back\"]');\n          $backButtonInputs.forEach(function ($backButtonInput) {\n            $backButtonInput.remove();\n          });\n        }\n      }\n\n      if (this.settings.submitAction === 'message') {\n        // Allow the submit action message to be sent from the response, or fallback to static.\n        var submitActionMessage = data.submitActionMessage || this.settings.submitActionMessage;\n        this.showFormAlert(submitActionMessage, 'success'); // Check if we need to remove the success message\n\n        this.hideSuccess();\n\n        if (this.settings.submitActionFormHide) {\n          this.$form.style.display = 'none';\n        } // Smooth-scroll to the top of the form.\n\n\n        if (this.settings.scrollToTop) {\n          this.scrollToForm();\n        }\n      } // Reset values regardless, for the moment\n\n\n      this.$form.reset(); // Remove the submission ID input in case we want to go again\n\n      this.removeHiddenInput('submissionId'); // Reset the form hash, as all has been saved\n\n      this.updateFormHash();\n    }\n  }, {\n    key: \"updateSubmitAction\",\n    value: function updateSubmitAction(action) {\n      // All buttons should have a `[data-submit-action]` but just for backward-compatibility\n      // assume when not present, we're submitting\n      if (!action) {\n        action = 'submit';\n      } // Update the submit action on the form while we're at it. Store on the `$form`\n      // for each of lookup on event hooks like captchas.\n\n\n      this.form.submitAction = action;\n      this.updateOrCreateHiddenInput('submitAction', action);\n    }\n  }, {\n    key: \"updateSubmissionInput\",\n    value: function updateSubmissionInput(data) {\n      if (!data.submissionId || !data.nextPageId) {\n        return;\n      } // Add the hidden submission input, if it doesn't exist\n\n\n      this.updateOrCreateHiddenInput('submissionId', data.submissionId);\n    }\n  }, {\n    key: \"updateOrCreateHiddenInput\",\n    value: function updateOrCreateHiddenInput(name, value) {\n      var $input = this.$form.querySelector(\"[name=\\\"\".concat(name, \"\\\"][type=\\\"hidden\\\"]\"));\n\n      if (!$input) {\n        $input = document.createElement('input');\n        $input.setAttribute('type', 'hidden');\n        $input.setAttribute('name', name);\n        this.$form.appendChild($input);\n      }\n\n      $input.setAttribute('value', value);\n    }\n  }, {\n    key: \"removeHiddenInput\",\n    value: function removeHiddenInput(name) {\n      var $input = this.$form.querySelector(\"[name=\\\"\".concat(name, \"\\\"][type=\\\"hidden\\\"]\"));\n\n      if ($input) {\n        $input.parentNode.removeChild($input);\n      }\n    }\n  }, {\n    key: \"togglePage\",\n    value: function togglePage(data) {\n      var _this12 = this;\n\n      var scrollToTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Trigger an event when a page is toggled\n      this.$form.dispatchEvent(new CustomEvent('onFormiePageToggle', {\n        bubbles: true,\n        detail: {\n          data: data\n        }\n      })); // Hide all pages\n\n      var $allPages = this.$form.querySelectorAll('[data-fui-page]');\n\n      if (data.nextPageId) {\n        $allPages.forEach(function ($page) {\n          // Show the current page\n          if ($page.id === \"\".concat(_this12.getPageId(data.nextPageId))) {\n            $page.removeAttribute('data-fui-page-hidden');\n          } else {\n            $page.setAttribute('data-fui-page-hidden', true);\n          }\n        });\n      } // Update tabs and progress bar if we're using them\n\n\n      var $progress = this.$form.querySelector('[data-fui-progress-bar]');\n\n      if ($progress && data.nextPageIndex) {\n        var pageIndex = parseInt(data.nextPageIndex, 10) + 1;\n        var progress = Math.round(pageIndex / data.totalPages * 100);\n        $progress.style.width = \"\".concat(progress, \"%\");\n        $progress.setAttribute('aria-valuenow', progress);\n        $progress.textContent = \"\".concat(progress, \"%\");\n      }\n\n      var $tabs = this.$form.querySelectorAll('[data-fui-page-tab]');\n\n      if (data.nextPageId) {\n        $tabs.forEach(function ($tab) {\n          // Show the current page\n          if ($tab.id === \"\".concat(_this12.tabClass, \"-\").concat(data.nextPageId)) {\n            $tab.classList.add(_this12.tabActiveClass);\n          } else {\n            $tab.classList.remove(_this12.tabActiveClass);\n          }\n        }); // Update the current page\n\n        this.setCurrentPage(data.nextPageId);\n      } // Smooth-scroll to the top of the form.\n\n\n      if (this.settings.scrollToTop) {\n        this.scrollToForm();\n      }\n    }\n  }, {\n    key: \"setCurrentPage\",\n    value: function setCurrentPage(pageId) {\n      this.settings.currentPageId = pageId;\n      this.$currentPage = this.$form.querySelector(\"#\".concat(this.getPageId(pageId)));\n    }\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      var _this13 = this;\n\n      return this.settings.pages.find(function (page) {\n        return page.id == _this13.settings.currentPageId;\n      });\n    }\n  }, {\n    key: \"getCurrentPageIndex\",\n    value: function getCurrentPageIndex() {\n      var currentPage = this.getCurrentPage();\n\n      if (currentPage) {\n        return this.settings.pages.indexOf(currentPage);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getPageId\",\n    value: function getPageId(pageId) {\n      return \"\".concat(this.config.formHashId, \"-p-\").concat(pageId);\n    }\n  }, {\n    key: \"scrollToForm\",\n    value: function scrollToForm() {\n      // Check for scroll-padding-top or `scroll-margin-top`\n      var extraPadding = (document.documentElement.style['scroll-padding-top'] || '0px').replace('px', '');\n      var extraMargin = (document.documentElement.style['scroll-margin-top'] || '0px').replace('px', ''); // Because the form can be hidden, use the parent wrapper\n\n      window.scrollTo({\n        top: this.$form.parentNode.getBoundingClientRect().top + window.pageYOffset - 100 - extraPadding - extraMargin,\n        behavior: 'smooth'\n      });\n    }\n  }, {\n    key: \"triggerJsEvents\",\n    value: function triggerJsEvents() {\n      var currentPage = this.getCurrentPage(); // Find any JS events for the current page and fire\n\n      if (currentPage && currentPage.settings.enableJsEvents) {\n        var payload = {};\n        currentPage.settings.jsGtmEventOptions.forEach(function (option) {\n          payload[option.label] = option.value;\n        }); // Push to the datalayer\n\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push(payload);\n      }\n    }\n  }]);\n\n  return FormieFormTheme;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QW9CLEVBQXZDO1FBQ0F0SixNQUFNLENBQUNzSixTQUFQLENBQWlCQyxJQUFqQixDQUFzQkwsT0FBdEI7TUFDSDtJQUVKO0VBeDBCTDs7RUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2Zvcm1pZS1mb3JtLXRoZW1lLmpzPzBhYjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm91bmNlciB9IGZyb20gJy4vdXRpbHMvYm91bmNlcic7XG5cbmV4cG9ydCBjbGFzcyBGb3JtaWVGb3JtVGhlbWUge1xuICAgIGNvbnN0cnVjdG9yKCRmb3JtLCBjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLiRmb3JtID0gJGZvcm07XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gY29uZmlnLnNldHRpbmdzO1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25PblN1Ym1pdCA9ICEhdGhpcy5zZXR0aW5ncy52YWxpZGF0aW9uT25TdWJtaXQ7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk9uRm9jdXMgPSAhIXRoaXMuc2V0dGluZ3MudmFsaWRhdGlvbk9uRm9jdXM7XG5cbiAgICAgICAgdGhpcy5zZXRDdXJyZW50UGFnZSh0aGlzLnNldHRpbmdzLmN1cnJlbnRQYWdlSWQpO1xuXG4gICAgICAgIGlmICghdGhpcy4kZm9ybSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZm9ybS5mb3JtVGhlbWUgPSB0aGlzO1xuICAgICAgICB0aGlzLmZvcm0gPSB0aGlzLiRmb3JtLmZvcm07XG5cbiAgICAgICAgLy8gU2V0dXAgY2xhc3NlcyBhY2NvcmRpbmcgdG8gdGhlbWUgY29uZmlnXG4gICAgICAgIHRoaXMubG9hZGluZ0NsYXNzID0gdGhpcy5mb3JtLmdldENsYXNzZXMoJ2xvYWRpbmcnKTtcbiAgICAgICAgdGhpcy50YWJFcnJvckNsYXNzID0gdGhpcy5mb3JtLmdldENsYXNzZXMoJ3RhYkVycm9yJyk7XG4gICAgICAgIHRoaXMudGFiQWN0aXZlQ2xhc3MgPSB0aGlzLmZvcm0uZ2V0Q2xhc3NlcygndGFiQWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlQ2xhc3MgPSB0aGlzLmZvcm0uZ2V0Q2xhc3NlcygnZXJyb3JNZXNzYWdlJyk7XG4gICAgICAgIHRoaXMuc3VjY2Vzc01lc3NhZ2VDbGFzcyA9IHRoaXMuZm9ybS5nZXRDbGFzc2VzKCdzdWNjZXNzTWVzc2FnZScpO1xuICAgICAgICB0aGlzLmFsZXJ0Q2xhc3MgPSB0aGlzLmZvcm0uZ2V0Q2xhc3NlcygnYWxlcnQnKTtcbiAgICAgICAgdGhpcy5hbGVydEVycm9yQ2xhc3MgPSB0aGlzLmZvcm0uZ2V0Q2xhc3NlcygnYWxlcnRFcnJvcicpO1xuICAgICAgICB0aGlzLmFsZXJ0U3VjY2Vzc0NsYXNzID0gdGhpcy5mb3JtLmdldENsYXNzZXMoJ2FsZXJ0U3VjY2VzcycpO1xuICAgICAgICB0aGlzLnRhYkNsYXNzID0gdGhpcy5mb3JtLmdldENsYXNzZXMoJ3RhYicpO1xuXG4gICAgICAgIHRoaXMuaW5pdFZhbGlkYXRvcigpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBzdWNjZXNzIHBhZ2UgYW5kIGlmIHdlIG5lZWQgdG8gaGlkZSB0aGUgbm90aWNlXG4gICAgICAgIC8vIFRoaXMgaXMgZm9yIG5vbi1hamF4IGZvcm1zLCB3aGVyZSB0aGUgcGFnZSBoYXMgcmVsb2FkZWRcbiAgICAgICAgdGhpcy5oaWRlU3VjY2VzcygpO1xuXG4gICAgICAgIC8vIEhpamFjayB0aGUgZm9ybSdzIHN1Ym1pdCBoYW5kbGVyLCBpbiBjYXNlIHdlIG5lZWQgdG8gZG8gc29tZXRoaW5nXG4gICAgICAgIHRoaXMuYWRkU3VibWl0RXZlbnRMaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vIFNhdmUgdGhlIGZvcm0ncyBjdXJyZW50IHN0YXRlIHNvIHdlIGNhbiB0ZWxsIGlmIGl0cyBjaGFuZ2VkIGxhdGVyIG9uXG4gICAgICAgIHRoaXMudXBkYXRlRm9ybUhhc2goKTtcblxuICAgICAgICAvLyBMaXN0ZW4gdG8gZm9ybSBjaGFuZ2VzIGlmIHRoZSB1c2VyIHRyaWVzIHRvIHJlbG9hZFxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVVbmxvYWRXYXJuaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1VbmxvYWRFdmVudExpc3RlbmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMaXN0ZW4gdG8gdGFicyBiZWluZyBjbGlja2VkIGZvciBhamF4LWVuYWJsZWQgZm9ybXNcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3VibWl0TWV0aG9kID09PSAnYWpheCcpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybVRhYkV2ZW50TGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRWYWxpZGF0b3IoKSB7XG4gICAgICAgIC8vIEtpY2sgb2ZmIHZhbGlkYXRpb24gLSB1c2UgdGhpcyBldmVuIGlmIGRpc2FibGluZyBjbGllbnQtc2lkZSB2YWxpZGF0aW9uXG4gICAgICAgIC8vIHNvIHdlIGNhbiB1c2UgYSBuaWNlIEFQSSBoYW5kbGUgc2VydmVyLXNpZGUgZXJycHJzXG4gICAgICAgIGNvbnN0IHZhbGlkYXRvclNldHRpbmdzID0ge1xuICAgICAgICAgICAgZmllbGRDbGFzczogJ2Z1aS1lcnJvcicsXG4gICAgICAgICAgICBlcnJvckNsYXNzOiB0aGlzLmZvcm0uZ2V0Q2xhc3NlcygnZmllbGRFcnJvcicpLFxuICAgICAgICAgICAgZmllbGRQcmVmaXg6ICdmdWktZmllbGQtJyxcbiAgICAgICAgICAgIGVycm9yUHJlZml4OiAnZnVpLWVycm9yLScsXG4gICAgICAgICAgICBtZXNzYWdlQWZ0ZXJGaWVsZDogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2VDdXN0b206ICdkYXRhLWZ1aS1tZXNzYWdlJyxcbiAgICAgICAgICAgIG1lc3NhZ2VUYXJnZXQ6ICdkYXRhLWZ1aS10YXJnZXQnLFxuICAgICAgICAgICAgdmFsaWRhdGVPbkJsdXI6IHRoaXMudmFsaWRhdGlvbk9uRm9jdXMsXG5cbiAgICAgICAgICAgIC8vIENhbGwgdmFsaWRhdGlvbiBvbi1kZW1hbmRcbiAgICAgICAgICAgIHZhbGlkYXRlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgICAgICAgZGlzYWJsZVN1Ym1pdDogZmFsc2UsXG5cbiAgICAgICAgICAgIGN1c3RvbVZhbGlkYXRpb25zOiB7fSxcblxuICAgICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3g6IHQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJyksXG4gICAgICAgICAgICAgICAgICAgIHJhZGlvOiB0KCdQbGVhc2Ugc2VsZWN0IGEgdmFsdWUuJyksXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdDogdCgnUGxlYXNlIHNlbGVjdCBhIHZhbHVlLicpLFxuICAgICAgICAgICAgICAgICAgICAnc2VsZWN0LW11bHRpcGxlJzogdCgnUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgdmFsdWUuJyksXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHQoJ1BsZWFzZSBmaWxsIG91dCB0aGlzIGZpZWxkLicpLFxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBwYXR0ZXJuTWlzbWF0Y2g6IHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IHQoJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuJyksXG4gICAgICAgICAgICAgICAgICAgIHVybDogdCgnUGxlYXNlIGVudGVyIGEgVVJMLicpLFxuICAgICAgICAgICAgICAgICAgICBudW1iZXI6IHQoJ1BsZWFzZSBlbnRlciBhIG51bWJlcicpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdCgnUGxlYXNlIG1hdGNoIHRoZSBmb2xsb3dpbmcgZm9ybWF0OiAjcnJnZ2JiJyksXG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IHQoJ1BsZWFzZSB1c2UgdGhlIFlZWVktTU0tREQgZm9ybWF0JyksXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IHQoJ1BsZWFzZSB1c2UgdGhlIDI0LWhvdXIgdGltZSBmb3JtYXQuIEV4LiAyMzowMCcpLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogdCgnUGxlYXNlIHVzZSB0aGUgWVlZWS1NTSBmb3JtYXQnKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdCgnUGxlYXNlIG1hdGNoIHRoZSByZXF1ZXN0ZWQgZm9ybWF0LicpLFxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBvdXRPZlJhbmdlOiB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXI6IHQoJ1BsZWFzZSBzZWxlY3QgYSB2YWx1ZSB0aGF0IGlzIG5vIG1vcmUgdGhhbiB7bWF4fS4nKSxcbiAgICAgICAgICAgICAgICAgICAgdW5kZXI6IHQoJ1BsZWFzZSBzZWxlY3QgYSB2YWx1ZSB0aGF0IGlzIG5vIGxlc3MgdGhhbiB7bWlufS4nKSxcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd3JvbmdMZW5ndGg6IHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcjogdCgnUGxlYXNlIHNob3J0ZW4gdGhpcyB0ZXh0IHRvIG5vIG1vcmUgdGhhbiB7bWF4TGVuZ3RofSBjaGFyYWN0ZXJzLiBZb3UgYXJlIGN1cnJlbnRseSB1c2luZyB7bGVuZ3RofSBjaGFyYWN0ZXJzLicpLFxuICAgICAgICAgICAgICAgICAgICB1bmRlcjogdCgnUGxlYXNlIGxlbmd0aGVuIHRoaXMgdGV4dCB0byB7bWluTGVuZ3RofSBjaGFyYWN0ZXJzIG9yIG1vcmUuIFlvdSBhcmUgY3VycmVudGx5IHVzaW5nIHtsZW5ndGh9IGNoYXJhY3RlcnMuJyksXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGZhbGxiYWNrOiB0KCdUaGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGlzIGZpZWxkLicpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBBbGxvdyBvdGhlciBtb2R1bGVzIHRvIG1vZGlmeSBvdXIgdmFsaWRhdG9yIHNldHRpbmdzIChmb3IgY3VzdG9tIHJ1bGVzIGFuZCBtZXNzYWdlcylcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJGb3JtaWVWYWxpZGF0aW9uID0gbmV3IEN1c3RvbUV2ZW50KCdyZWdpc3RlckZvcm1pZVZhbGlkYXRpb24nLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yU2V0dGluZ3MsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBHaXZlIGEgc21hbGwgYW1vdW50IG9mIHRpbWUgZm9yIG90aGVyIEpTIHNjcmlwdHMgdG8gcmVnaXN0ZXIgdmFsaWRhdGlvbnMuIFRoZXNlIGFyZSBsYXp5LWxvYWRlZC5cbiAgICAgICAgLy8gTWF5YmUgcmUtdGhpbmsgdGhpcyBzbyB3ZSBkb24ndCBoYXZlIHRvIGRlYWwgd2l0aCBldmVudCBsaXN0ZW5lciByZWdpc3RyYXRpb24gYmVmb3JlL2FmdGVyIGRpc3BhdGNoP1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudChyZWdpc3RlckZvcm1pZVZhbGlkYXRpb24pO1xuXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IG5ldyBCb3VuY2VyKHRoaXMuJGZvcm0sIHJlZ2lzdGVyRm9ybWllVmFsaWRhdGlvbi5kZXRhaWwudmFsaWRhdG9yU2V0dGluZ3MpO1xuICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgIC8vIEFmdGVyIHdlIGNsZWFyIGFueSBlcnJvciwgdmFsaWRhdGUgdGhlIGZpZWxzZXQgYWdhaW4uIE1vc3RseSBzbyB3ZSBjYW4gcmVtb3ZlIGdsb2JhbCBlcnJvcnNcbiAgICAgICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcy4kZm9ybSwgJ2JvdW5jZXJSZW1vdmVFcnJvcicsIChlKSA9PiB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IGFuIGluZmluaXRlIGxvb3AgKGNoZWNrIGJlaGF2aW91ciB3aXRoIGFuIEFncmVlIGZpZWxkKVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmJiL2Zvcm1pZS9pc3N1ZXMvOTA1XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3VibWl0RGVib3VuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgZXJyb3IgbWVzc2FnZXMgZGVmaW5lZCBpbiBET00gLSBCb3VuY2VyIG9ubHkgdXNlcyB0aGVzZSBhcyBhIGxhc3QgcmVzb3J0XG4gICAgICAgIC8vIEluIGZ1dHVyZSB1cGRhdGVzLCB3ZSBjYW4gcHJvYmFibHkgcmVtb3ZlIHRoaXNcbiAgICAgICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcy4kZm9ybSwgJ2JvdW5jZXJTaG93RXJyb3InLCAoZSkgPT4ge1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgJGZpZWxkID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBjb25zdCAkZmllbGRDb250YWluZXIgPSAkZmllbGQuY2xvc2VzdCgnW2RhdGEtZmllbGQtdHlwZV0nKTtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBlcnJvciBtZXNzYWdlIGFzIGRlZmluZWQgb24gdGhlIGlucHV0IGVsZW1lbnQuIFVzZSB0aGUgcGFyZW50IHRvIGZpbmQgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGp1c3QgdG8gY2F0ZXIgZm9yIHNvbWUgZWRnZS1jYXNlcyB3aGVyZSB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBpbnB1dHMgKERhdGVwaWNrZXIpLlxuICAgICAgICAgICAgY29uc3QgJG1lc3NhZ2UgPSAkZmllbGQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1mdWktbWVzc2FnZV0nKTtcblxuICAgICAgICAgICAgaWYgKCRtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICRtZXNzYWdlLmdldEF0dHJpYnV0ZSgnZGF0YS1mdWktbWVzc2FnZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgc2VydmVyIGVycm9yLCBpdCB0YWtlcyBwcmlvcml0eS5cbiAgICAgICAgICAgIGlmIChlLmRldGFpbCAmJiBlLmRldGFpbC5lcnJvcnMgJiYgZS5kZXRhaWwuZXJyb3JzLnNlcnZlck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZS5kZXRhaWwuZXJyb3JzLnNlcnZlck1lc3NhZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gbW92ZSB0aGUgZXJyb3Igb3V0IG9mIHRoZSAuZnVpLWlucHV0LWNvbnRhaW5lciBub2RlLlxuICAgICAgICAgICAgLy8gT25seSB0aGUgaW5wdXQgaXRzZWxmIHNob3VsZCBiZSBpbiBoZXJlLlxuICAgICAgICAgICAgY29uc3QgJGVycm9yVG9Nb3ZlID0gJGZpZWxkLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignW2RhdGEtZXJyb3ItbWVzc2FnZV0nKTtcblxuICAgICAgICAgICAgaWYgKCRlcnJvclRvTW92ZSAmJiAkZXJyb3JUb01vdmUucGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgJGVycm9yVG9Nb3ZlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCgkZXJyb3JUb01vdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgZXJyb3IgaGFzIGJlZW4gbW92ZWQsIGZpbmQgaXQgYWdhaW5cbiAgICAgICAgICAgIGlmICgkZmllbGRDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCAkZXJyb3IgPSAkZmllbGRDb250YWluZXIucXVlcnlTZWxlY3RvcignW2RhdGEtZXJyb3ItbWVzc2FnZV0nKTtcblxuICAgICAgICAgICAgICAgIGlmICgkZXJyb3IgJiYgbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3IudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFkZFN1Ym1pdEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICAgIGNvbnN0ICRzdWJtaXRCdG5zID0gdGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cInN1Ym1pdFwiXScpO1xuXG4gICAgICAgIC8vIEZvcm1zIGNhbiBoYXZlIG11bHRpcGxlIHN1Ym1pdCBidXR0b25zLCBhbmQgaXRzIGVhc2llciB0byBhc3NpZ24gdGhlIGN1cnJlbnRseSBjbGlja2VkIG9uZVxuICAgICAgICAvLyB0aGFuIHRyYWNraW5nIGl0IHRocm91Z2ggdGhlIHN1Ym1pdCBoYW5kbGVyLlxuICAgICAgICAkc3VibWl0QnRucy5mb3JFYWNoKCgkc3VibWl0QnRuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcigkc3VibWl0QnRuLCAnY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHN1Ym1pdEJ0biA9IGUudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgZm9yIGxhdGVyIGlmIHdlJ3JlIHVzaW5nIHRleHQgc3Bpbm5lclxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxCdXR0b25UZXh0ID0gZS50YXJnZXQudGV4dENvbnRlbnQudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gRWFjaCBzdWJtaXQgYnV0dG9uIGNhbiBkbyBkaWZmZXJlbnQgdGhpbmdzLCB0byBzdG9yZSB0aGF0XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJtaXRBY3Rpb24odGhpcy4kc3VibWl0QnRuLmdldEF0dHJpYnV0ZSgnZGF0YS1zdWJtaXQtYWN0aW9uJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMuJGZvcm0sICdvbkJlZm9yZUZvcm1pZVN1Ym1pdCcsIHRoaXMub25CZWZvcmVTdWJtaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMuJGZvcm0sICdvbkZvcm1pZVZhbGlkYXRlJywgdGhpcy5vblZhbGlkYXRlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLiRmb3JtLCAnb25Gb3JtaWVTdWJtaXQnLCB0aGlzLm9uU3VibWl0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLiRmb3JtLCAnb25Gb3JtaWVTdWJtaXRFcnJvcicsIHRoaXMub25TdWJtaXRFcnJvci5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBvbkJlZm9yZVN1Ym1pdChlKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlU3VibWl0KCk7XG5cbiAgICAgICAgLy8gU2F2ZSBmb3IgbGF0ZXIgdG8gdHJpZ2dlciByZWFsIHN1Ym1pdFxuICAgICAgICB0aGlzLnN1Ym1pdEhhbmRsZXIgPSBlLmRldGFpbC5zdWJtaXRIYW5kbGVyO1xuICAgIH1cblxuICAgIG9uVmFsaWRhdGUoZSkge1xuICAgICAgICAvLyBJZiBpbnZhbGlkLCB3ZSBvbmx5IHdhbnQgdG8gc3RvcCBpZiB3ZSdyZSBzdWJtaXR0aW5nLlxuICAgICAgICBpZiAoIXRoaXMudmFsaWRhdGUoKSkge1xuICAgICAgICAgICAgdGhpcy5vbkZvcm1FcnJvcigpO1xuXG4gICAgICAgICAgICAvLyBTZXQgYSBmbGFnIG9uIHRoZSBldmVudCwgc28gb3RoZXIgbGlzdGVuZXJzIGNhbiBwb3RlbnRpYWxseSBkbyBzb21ldGhpbmdcbiAgICAgICAgICAgIGUuZGV0YWlsLmludmFsaWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblN1Ym1pdChlKSB7XG4gICAgICAgIC8vIFN0b3AgYmFzZSBiZWhhdmlvdXIgb2YganVzdCBzdWJtaXR0aW5nIHRoZSBmb3JtXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBFaXRoZXIgc3RhaWdodCBzdWJtaXQsIG9yIHVzZSBBamF4XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN1Ym1pdE1ldGhvZCA9PT0gJ2FqYXgnKSB7XG4gICAgICAgICAgICB0aGlzLmFqYXhTdWJtaXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEJlZm9yZSBhIHNlcnZlci1zaWRlIHN1Ym1pdCwgcmVmcmVzaCB0aGUgc2F2ZWQgaGFzaCBpbW1lZGlhdGVseS4gT3RoZXJ3aXNlLCB0aGUgbmF0aXZlIHN1Ym1pdFxuICAgICAgICAgICAgLy8gaGFuZGxlciAtIHdoaWNoIHRlY2huaWNhbGx5IHVubG9hZHMgdGhlIHBhZ2UgLSB3aWxsIHRyaWdnZXIgdGhlIGNoYW5nZWQgYWxlcnQuXG4gICAgICAgICAgICAvLyBCdXQgdHJpZ2dlciBhbiBhbGVydCBpZiB3ZSdyZSBnb2luZyBiYWNrLCBhbmQgYmFjay1zdWJtaXNzaW9uIGRhdGEgaXNuJ3Qgc2V0XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZW5hYmxlQmFja1N1Ym1pc3Npb24gJiYgdGhpcy5mb3JtLnN1Ym1pdEFjdGlvbiA9PT0gJ2JhY2snKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVzZXQgdGhlIGhhc2gsIHRyaWdnZXIgYSB3YXJuaW5nIGlmIGNvbnRlbnQgaGFzIGNoYW5nZWQsIGJlY2F1c2Ugd2UncmUgbm90IHN1Ym1pdHRpbmdcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGb3JtSGFzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUcmlnZXIgYW55IEpTIGV2ZW50cyBmb3IgdGhpcyBwYWdlLCBvbmx5IGlmIHN1Ym1pdHRpbmcgKG5vdCBnb2luZyBiYWNrL3NhdmluZylcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm0uc3VibWl0QWN0aW9uID09PSAnc3VibWl0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckpzRXZlbnRzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJGZvcm0uc3VibWl0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblN1Ym1pdEVycm9yKGUpIHtcbiAgICAgICAgdGhpcy5vbkZvcm1FcnJvcigpO1xuICAgIH1cblxuICAgIGFkZEZvcm1VbmxvYWRFdmVudExpc3RlbmVyKCkge1xuICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdiZWZvcmV1bmxvYWQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2F2ZWRGb3JtSGFzaCAhPT0gdGhpcy5oYXNoRm9ybSgpKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucmV0dXJuVmFsdWUgPSB0KCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmU/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvcm1UYWJFdmVudExpc3RlbmVyKCkge1xuICAgICAgICBjb25zdCAkdGFicyA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnVpLXBhZ2UtdGFiLWFuY2hvcl0nKTtcblxuICAgICAgICAkdGFicy5mb3JFYWNoKCgkdGFiKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcigkdGFiLCAnY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VJbmRleCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1mdWktcGFnZS1pbmRleCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VJZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1mdWktcGFnZS1pZCcpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFBhZ2VJbmRleDogcGFnZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICBuZXh0UGFnZUlkOiBwYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM6IHRoaXMuc2V0dGluZ3MucGFnZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHdlIHN0aWxsIHVwZGF0ZSB0aGUgY3VycmVudCBwYWdlIHNlcnZlci1zaWRlXG4gICAgICAgICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpO1xuICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7XG4gICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYXNoRm9ybSgpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IHt9O1xuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLiRmb3JtKTtcblxuICAgICAgICAvLyBFeGxjdWRlIHNvbWUgcGFyYW1zIGZyb20gdGhlIGhhc2gsIHRoYXQgYXJlIHByb2dyYW1hdGljYWxseSBjaGFuZ2VkXG4gICAgICAgIGNvbnN0IGV4Y2x1ZGVkSXRlbXMgPSBbJ2ctcmVjYXB0Y2hhLXJlc3BvbnNlJywgJ2gtY2FwdGNoYS1yZXNwb25zZScsICdDUkFGVF9DU1JGX1RPS0VOJywgJ19fSlNDSEsnLCAnc3VibWl0QWN0aW9uJ107XG5cbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgaXNFeGNsdWRlZCA9IGV4Y2x1ZGVkSXRlbXMuZmlsdGVyKChpdGVtKSA9PiB7IHJldHVybiBwYWlyWzBdLnN0YXJ0c1dpdGgoaXRlbSk7IH0pO1xuXG4gICAgICAgICAgICBpZiAoIWlzRXhjbHVkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgaGFzaFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaGFzaCk7XG4gICAgfVxuXG4gICAgdXBkYXRlRm9ybUhhc2goKSB7XG4gICAgICAgIHRoaXMuc2F2ZWRGb3JtSGFzaCA9IHRoaXMuaGFzaEZvcm0oKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZShmb2N1cyA9IHRydWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25PblN1Ym1pdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbmx5IHZhbGlkYXRlIG9uIHN1Ym1pdCBhY3Rpb25zXG4gICAgICAgIGlmICh0aGlzLmZvcm0uc3VibWl0QWN0aW9uICE9PSAnc3VibWl0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgJGZpZWxkc2V0ID0gdGhpcy4kZm9ybTtcblxuICAgICAgICBpZiAodGhpcy4kY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgICRmaWVsZHNldCA9IHRoaXMuJGN1cnJlbnRQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW52YWxpZEZpZWxkcyA9IHRoaXMudmFsaWRhdG9yLnZhbGlkYXRlQWxsKCRmaWVsZHNldCk7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGVycm9ycywgZm9jdXMgb24gdGhlIGZpcnN0IG9uZVxuICAgICAgICBpZiAoaW52YWxpZEZpZWxkcy5sZW5ndGggPiAwICYmIGZvY3VzKSB7XG4gICAgICAgICAgICBpbnZhbGlkRmllbGRzWzBdLmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYW55IGdsb2JhbCBlcnJvcnMgaWYgbm9uZSAtIGp1c3QgaW4gY2FzZVxuICAgICAgICBpZiAoaW52YWxpZEZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRm9ybUFsZXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGRlYm91bmNlIGFmdGVyIGEgbGl0dGxlIGJpdCwgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLCBhcyB0aGlzIG1ldGhvZFxuICAgICAgICAvLyBpcyBjYWxsZWQgb24gYGJvdW5jZXJSZW1vdmVFcnJvcmAuXG4gICAgICAgIHRoaXMuc3VibWl0RGVib3VuY2UgPSB0cnVlO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdWJtaXREZWJvdW5jZSA9IGZhbHNlO1xuICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgIHJldHVybiAhaW52YWxpZEZpZWxkcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgaGlkZVN1Y2Nlc3MoKSB7XG4gICAgICAgIGNvbnN0ICRzdWNjZXNzTWVzc2FnZSA9IHRoaXMuJGZvcm0ucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKGAuJHt0aGlzLnN1Y2Nlc3NNZXNzYWdlQ2xhc3N9YCk7XG5cbiAgICAgICAgaWYgKCRzdWNjZXNzTWVzc2FnZSAmJiB0aGlzLnNldHRpbmdzLnN1Ym1pdEFjdGlvbk1lc3NhZ2VUaW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gcGFyc2VJbnQodGhpcy5zZXR0aW5ncy5zdWJtaXRBY3Rpb25NZXNzYWdlVGltZW91dCwgMTApICogMTAwMDtcblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgJHN1Y2Nlc3NNZXNzYWdlLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRMb2FkaW5nKCkge1xuICAgICAgICBpZiAodGhpcy4kc3VibWl0QnRuKSB7XG4gICAgICAgICAgICAvLyBBbHdheXMgZGlzYWJsZSB0aGUgYnV0dG9uXG4gICAgICAgICAgICB0aGlzLiRzdWJtaXRCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5sb2FkaW5nSW5kaWNhdG9yID09PSAnc3Bpbm5lcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRzdWJtaXRCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLmxvYWRpbmdDbGFzcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvYWRpbmdJbmRpY2F0b3IgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuJHN1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IHRoaXMuc2V0dGluZ3MubG9hZGluZ0luZGljYXRvclRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVMb2FkaW5nKCkge1xuICAgICAgICBpZiAodGhpcy4kc3VibWl0QnRuKSB7XG4gICAgICAgICAgICAvLyBBbHdheXMgZW5hYmxlIHRoZSBidXR0b25cbiAgICAgICAgICAgIHRoaXMuJHN1Ym1pdEJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvYWRpbmdJbmRpY2F0b3IgPT09ICdzcGlubmVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMuJHN1Ym1pdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMubG9hZGluZ0NsYXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubG9hZGluZ0luZGljYXRvciA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3VibWl0QnRuLnRleHRDb250ZW50ID0gdGhpcy5vcmlnaW5hbEJ1dHRvblRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZvcm1FcnJvcihlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpcy5zaG93Rm9ybUFsZXJ0KGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3dGb3JtQWxlcnQodGhpcy5zZXR0aW5ncy5lcnJvck1lc3NhZ2UsICdlcnJvcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nKCk7XG4gICAgfVxuXG4gICAgc2hvd0Zvcm1BbGVydCh0ZXh0LCB0eXBlKSB7XG4gICAgICAgIGxldCAkYWxlcnQgPSB0aGlzLiRmb3JtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignW3JvbGU9XCJhbGVydFwiXScpO1xuXG4gICAgICAgIC8vIFN0cmlwIDxwPiB0YWdzXG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzxwW14+XSo+L2csICcnKS5yZXBsYWNlKC88XFwvcD4vZywgJycpO1xuXG4gICAgICAgIGlmICgkYWxlcnQpIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gY2F0ZXIgZm9yIEhUTUwgZW50aXRpZXMgLSBxdWljay1uLWRpcnR5XG4gICAgICAgICAgICBpZiAoJGFsZXJ0LmlubmVySFRNTCAhPT0gdGhpcy5kZWNvZGVIdG1sKHRleHQpKSB7XG4gICAgICAgICAgICAgICAgJGFsZXJ0LmlubmVySFRNTCA9IGAkeyRhbGVydC5pbm5lckhUTUx9PGJyPiR7dGV4dH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGFsZXJ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAkYWxlcnQuY2xhc3NOYW1lID0gYCR7dGhpcy5hbGVydENsYXNzfWA7XG4gICAgICAgICAgICAkYWxlcnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2FsZXJ0Jyk7XG4gICAgICAgICAgICAkYWxlcnQuaW5uZXJIVE1MID0gdGV4dDtcblxuICAgICAgICAgICAgLy8gRm9yIGVycm9yIG5vdGljZXMsIHdlIGhhdmUgcG90ZW50aWFsIHNwZWNpYWwgaGFuZGxpbmcgb24gcG9zaXRpb25cbiAgICAgICAgICAgIGlmICh0eXBlID09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAkYWxlcnQuY2xhc3NOYW1lICs9IGAgJHt0aGlzLmFsZXJ0RXJyb3JDbGFzc30gJHt0aGlzLmFsZXJ0Q2xhc3N9LSR7dGhpcy5zZXR0aW5ncy5lcnJvck1lc3NhZ2VQb3NpdGlvbn1gO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZXJyb3JNZXNzYWdlUG9zaXRpb24gPT0gJ2JvdHRvbS1mb3JtJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdWJtaXRCdG4ucGFyZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSgkYWxlcnQsIHRoaXMuJHN1Ym1pdEJ0bi5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MuZXJyb3JNZXNzYWdlUG9zaXRpb24gPT0gJ3RvcC1mb3JtJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCRhbGVydCwgdGhpcy4kZm9ybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkYWxlcnQuY2xhc3NOYW1lICs9IGAgJHt0aGlzLmFsZXJ0U3VjY2Vzc0NsYXNzfSAke3RoaXMuYWxlcnRDbGFzc30tJHt0aGlzLnNldHRpbmdzLnN1Ym1pdEFjdGlvbk1lc3NhZ2VQb3NpdGlvbn1gO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3VibWl0QWN0aW9uTWVzc2FnZVBvc2l0aW9uID09ICdib3R0b20tZm9ybScpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQW4gZXZlbiBmdXJ0aGVyIHNwZWNpYWwgY2FzZSB3aGVuIGhpZGluZyB0aGUgZm9ybSFcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3VibWl0QWN0aW9uRm9ybUhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoJGFsZXJ0LCB0aGlzLiRmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLiRzdWJtaXRCdG4ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBhIHN1Ym1pdCBidXR0b24gc3RpbGwuIE1pZ2h0J3ZlIGJlZW4gcmVtb3ZlZCBmb3IgbXVsdGktcGFnZSwgYWpheC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHN1Ym1pdEJ0bi5wYXJlbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCRhbGVydCwgdGhpcy4kc3VibWl0QnRuLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSgkYWxlcnQsIHRoaXMuJGZvcm0ubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnN1Ym1pdEFjdGlvbk1lc3NhZ2VQb3NpdGlvbiA9PSAndG9wLWZvcm0nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoJGFsZXJ0LCB0aGlzLiRmb3JtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93VGFiRXJyb3JzKGVycm9ycykge1xuICAgICAgICBPYmplY3Qua2V5cyhlcnJvcnMpLmZvckVhY2goKHBhZ2VJZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICR0YWIgPSB0aGlzLiRmb3JtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihgW2RhdGEtZnVpLXBhZ2UtaWQ9XCIke3BhZ2VJZH1cIl1gKTtcblxuICAgICAgICAgICAgaWYgKCR0YWIpIHtcbiAgICAgICAgICAgICAgICAkdGFiLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLnRhYkVycm9yQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWNvZGVIdG1sKGh0bWwpIHtcbiAgICAgICAgY29uc3QgdHh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgdHh0LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHJldHVybiB0eHQudmFsdWU7XG4gICAgfVxuXG4gICAgcmVtb3ZlRm9ybUFsZXJ0KCkge1xuICAgICAgICBjb25zdCAkYWxlcnQgPSB0aGlzLiRmb3JtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5hbGVydENsYXNzfWApO1xuXG4gICAgICAgIGlmICgkYWxlcnQpIHtcbiAgICAgICAgICAgICRhbGVydC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZVRhYkVycm9ycygpIHtcbiAgICAgICAgY29uc3QgJHRhYnMgPSB0aGlzLiRmb3JtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnVpLXBhZ2UtdGFiXScpO1xuXG4gICAgICAgICR0YWJzLmZvckVhY2goKCR0YWIpID0+IHtcbiAgICAgICAgICAgICR0YWIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnRhYkVycm9yQ2xhc3MpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBiZWZvcmVTdWJtaXQoKSB7XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnKSwgKCgkZmllbGQpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yLnJlbW92ZUVycm9yKCRmaWVsZCk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLnJlbW92ZUZvcm1BbGVydCgpO1xuICAgICAgICB0aGlzLnJlbW92ZVRhYkVycm9ycygpO1xuXG4gICAgICAgIC8vIERvbid0IHNldCBhIGxvYWRpbmcgaWYgd2UncmUgZ29pbmcgYmFjayBhbmQgdGhlIHVubG9hZCB3YXJuaW5nIGFwcGVhcnMsIGJlY2F1c2UgdGhlcmUncyBubyB3YXkgdG8gcmUtZW5hYmxlXG4gICAgICAgIC8vIHRoZSBidXR0b24gYWZ0ZXIgdGhlIHVzZXIgY2FuY2VscyB0aGUgdW5sb2FkIGV2ZW50XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVCYWNrU3VibWlzc2lvbiAmJiB0aGlzLmZvcm0uc3VibWl0QWN0aW9uID09PSAnYmFjaycpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkTG9hZGluZygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWpheFN1Ym1pdCgpIHtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcy4kZm9ybSk7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuJGZvcm0uZ2V0QXR0cmlidXRlKCdtZXRob2QnKTtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy4kZm9ybS5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpO1xuXG4gICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbihtZXRob2QgPyBtZXRob2QgOiAnUE9TVCcsIGFjdGlvbiA/IGFjdGlvbiA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCB0cnVlKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7XG4gICAgICAgIHhoci50aW1lb3V0ID0gKHRoaXMuc2V0dGluZ3MuYWpheFRpbWVvdXQgfHwgMTApICogMTAwMDtcblxuICAgICAgICB0aGlzLmJlZm9yZVN1Ym1pdCgpO1xuXG4gICAgICAgIHhoci5vbnRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQWpheEVycm9yKHQoJ1RoZSByZXF1ZXN0IHRpbWVkIG91dC4nKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgeGhyLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkFqYXhFcnJvcih0KCdUaGUgcmVxdWVzdCBlbmNvdW50ZXJlZCBhIG5ldHdvcmsgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uJykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQWpheEVycm9yKHJlc3BvbnNlLmVycm9yTWVzc2FnZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFqYXhTdWNjZXNzKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFqYXhFcnJvcih0KCdVbmFibGUgdG8gcGFyc2UgcmVzcG9uc2UgYHtlfWAuJywgeyBlIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25BamF4RXJyb3IoYCR7eGhyLnN0YXR1c306ICR7eGhyLnN0YXR1c1RleHR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICAgIH1cblxuICAgIGFmdGVyQWpheFN1Ym1pdChkYXRhKSB7XG4gICAgICAgIC8vIFJlc2V0IHRoZSBzdWJtaXQgYWN0aW9uLCBpbW1lZGlhdGVseSwgd2hldGhlciBmYWlsIG9yIHN1Y2Nlc3NcbiAgICAgICAgdGhpcy51cGRhdGVTdWJtaXRBY3Rpb24oJ3N1Ym1pdCcpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlU3VibWlzc2lvbklucHV0KGRhdGEpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlJ3MgYW55IGV2ZW50cyBpbiB0aGUgcmVzcG9uc2UgYmFjaywgYW5kIGZpcmUgdGhlbVxuICAgICAgICBpZiAoZGF0YS5ldmVudHMgJiYgQXJyYXkuaXNBcnJheShkYXRhLmV2ZW50cykpIHtcbiAgICAgICAgICAgIGRhdGEuZXZlbnRzLmZvckVhY2goKGV2ZW50RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnREYXRhLmV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZXZlbnREYXRhLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFqYXhFcnJvcihlcnJvck1lc3NhZ2UsIGRhdGEgPSB7fSkge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBkYXRhLmVycm9ycyB8fCB7fTtcbiAgICAgICAgY29uc3QgcGFnZUZpZWxkRXJyb3JzID0gZGF0YS5wYWdlRmllbGRFcnJvcnMgfHwge307XG5cbiAgICAgICAgLy8gU2hvdyBhbiBlcnJvciBtZXNzYWdlIGF0IHRoZSB0b3Agb2YgdGhlIGZvcm1cbiAgICAgICAgdGhpcy5vbkZvcm1FcnJvcihlcnJvck1lc3NhZ2UpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcGFnZSB0YWJzIChpZiBhbnkpIHRvIHNob3cgZXJyb3Igc3RhdGVcbiAgICAgICAgdGhpcy5zaG93VGFiRXJyb3JzKHBhZ2VGaWVsZEVycm9ycyk7XG5cbiAgICAgICAgLy8gRmlyZSBhIGZhaWwgZXZlbnRcbiAgICAgICAgdGhpcy5zdWJtaXRIYW5kbGVyLmZvcm1TdWJtaXRFcnJvcigpO1xuXG4gICAgICAgIC8vIEZpcmUgY2xlYW51cCBtZXRob2RzIGFmdGVyIF9hbnlfIGFqYXggY2FsbFxuICAgICAgICB0aGlzLmFmdGVyQWpheFN1Ym1pdChkYXRhKTtcblxuICAgICAgICAvLyBTaG93IHNlcnZlci1zaWRlIGVycm9ycyBmb3IgZWFjaCBmaWVsZFxuICAgICAgICBPYmplY3Qua2V5cyhlcnJvcnMpLmZvckVhY2goKGhhbmRsZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtlcnJvcl0gPSBlcnJvcnNbaGFuZGxlXTtcbiAgICAgICAgICAgIGxldCAkZmllbGQgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiZmllbGRzWyR7aGFuZGxlfV1cIl1gKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlIGZpZWxkc1xuICAgICAgICAgICAgaWYgKCEkZmllbGQpIHtcbiAgICAgICAgICAgICAgICAkZmllbGQgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiZmllbGRzWyR7aGFuZGxlfV1bXVwiXWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3Iuc2hvd0Vycm9yKCRmaWVsZCwgeyBzZXJ2ZXJNZXNzYWdlOiBlcnJvciB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEZvY3VzIG9uIHRoZSBmaXJzdCBlcnJvclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAkZmllbGQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEdvIHRvIHRoZSBmaXJzdCBwYWdlIHdpdGggYW4gZXJyb3IsIGZvciBnb29kIFVYXG4gICAgICAgIHRoaXMudG9nZ2xlUGFnZShkYXRhLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgb25BamF4U3VjY2VzcyhkYXRhKSB7XG4gICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50LCBiZWNhdXNlIHdlJ3ZlIG92ZXJyaWRkZW4gdGhlIGhhbmRsZXJcbiAgICAgICAgdGhpcy5zdWJtaXRIYW5kbGVyLmZvcm1BZnRlclN1Ym1pdChkYXRhKTtcblxuICAgICAgICAvLyBGaXJlIGNsZWFudXAgbWV0aG9kcyBhZnRlciBfYW55XyBhamF4IGNhbGxcbiAgICAgICAgdGhpcy5hZnRlckFqYXhTdWJtaXQoZGF0YSk7XG5cbiAgICAgICAgLy8gUmVzZXQgdGhlIGZvcm0gaGFzaCwgYXMgYWxsIGhhcyBiZWVuIHNhdmVkXG4gICAgICAgIHRoaXMudXBkYXRlRm9ybUhhc2goKTtcblxuICAgICAgICAvLyBUcmlnZXIgYW55IEpTIGV2ZW50cyBmb3IgdGhpcyBwYWdlLCByaWdodCBhd2F5IGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAgICAgICAgaWYgKHRoaXMuZm9ybS5zdWJtaXRBY3Rpb24gPT09ICdzdWJtaXQnKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJKc0V2ZW50cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBwcm9jZWVkIHRvIHRoZSBuZXh0IHBhZ2VcbiAgICAgICAgaWYgKGRhdGEubmV4dFBhZ2VJZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nKCk7XG5cbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUGFnZShkYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UncmUgcmVkaXJlY3RpbmcgYXdheSwgZG8gaXQgaW1tZWRpYXRlbHkgZm9yIG5pY2VyIFVYXG4gICAgICAgIGlmIChkYXRhLnJlZGlyZWN0VXJsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdWJtaXRBY3Rpb25UYWIgPT09ICduZXctdGFiJykge1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHZhbHVlcyBpZiBpbiBhIG5ldyB0YWIuIE5vIG5lZWQgd2hlbiBpbiB0aGUgc2FtZSB0YWIuXG4gICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5yZXNldCgpO1xuXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oZGF0YS5yZWRpcmVjdFVybCwgJ19ibGFuaycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRhdGEucmVkaXJlY3RVcmw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlbGF5IHRoaXMgYSBsaXR0bGUsIGluIGNhc2Ugd2UncmUgcmVkaXJlY3RpbmcgYXdheSAtIGJldHRlciBVWCB0byBqdXN0IGtlZXAgaXQgbG9hZGluZ1xuICAgICAgICB0aGlzLnJlbW92ZUxvYWRpbmcoKTtcblxuICAgICAgICAvLyBGb3IgbXVsdGktcGFnZSBhamF4IGZvcm1zLCBkZWFsIHdpdGggdGhlbSBhIGxpdHRsZSBkaWZmZXJlbnRseS5cbiAgICAgICAgaWYgKGRhdGEudG90YWxQYWdlcyA+IDEpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBzdWNjZXNzIG1lc3NhZ2UgYXQgdGhlIHRvcCwgZ28gdG8gdGhlIGZpcnN0IHBhZ2VcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN1Ym1pdEFjdGlvbk1lc3NhZ2VQb3NpdGlvbiA9PSAndG9wLWZvcm0nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFBhZ2VJbmRleDogMCxcbiAgICAgICAgICAgICAgICAgICAgbmV4dFBhZ2VJZDogdGhpcy5zZXR0aW5ncy5wYWdlc1swXS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlczogdGhpcy5zZXR0aW5ncy5wYWdlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2Ugd2FudCB0byBoaWRlIHRoZSBidXR0b25zIGJlY2F1c2Ugd2UgaGF2ZSB0byBzdGF5IG9uIHRoZSBsYXN0IHBhZ2VcbiAgICAgICAgICAgICAgICAvLyB0byBzaG93IHRoZSBzdWNjZXNzIG1lc3NhZ2UgYXQgdGhlIGJvdHRvbSBvZiB0aGUgZm9ybS4gT3RoZXJ3aXNlLCBzaG93aW5nIGl0IG9uIHRoZVxuICAgICAgICAgICAgICAgIC8vIGZpcnN0IHBhZ2Ugb2YgYW4gZW1wdHkgZm9ybSBpcyBqdXN0IHBsYWluIHdlaXJkIFVYLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiRzdWJtaXRCdG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3VibWl0QnRuLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgYmFjayBidXR0b24gLSBub3QgZ3JlYXQgVVggdG8gZ28gYmFjayB0byBhIGZpbmlzaGVkIGZvcm1cbiAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciwgaXRzIHRoZSBidXR0b24gYW5kIHRoZSBoaWRkZW4gaW5wdXRcbiAgICAgICAgICAgICAgICBjb25zdCAkYmFja0J1dHRvbklucHV0cyA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3VibWl0LWFjdGlvbj1cImJhY2tcIl0nKTtcblxuICAgICAgICAgICAgICAgICRiYWNrQnV0dG9uSW5wdXRzLmZvckVhY2goKCRiYWNrQnV0dG9uSW5wdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJGJhY2tCdXR0b25JbnB1dC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN1Ym1pdEFjdGlvbiA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAvLyBBbGxvdyB0aGUgc3VibWl0IGFjdGlvbiBtZXNzYWdlIHRvIGJlIHNlbnQgZnJvbSB0aGUgcmVzcG9uc2UsIG9yIGZhbGxiYWNrIHRvIHN0YXRpYy5cbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdEFjdGlvbk1lc3NhZ2UgPSBkYXRhLnN1Ym1pdEFjdGlvbk1lc3NhZ2UgfHwgdGhpcy5zZXR0aW5ncy5zdWJtaXRBY3Rpb25NZXNzYWdlO1xuXG4gICAgICAgICAgICB0aGlzLnNob3dGb3JtQWxlcnQoc3VibWl0QWN0aW9uTWVzc2FnZSwgJ3N1Y2Nlc3MnKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byByZW1vdmUgdGhlIHN1Y2Nlc3MgbWVzc2FnZVxuICAgICAgICAgICAgdGhpcy5oaWRlU3VjY2VzcygpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdWJtaXRBY3Rpb25Gb3JtSGlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU21vb3RoLXNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBmb3JtLlxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2Nyb2xsVG9Ub3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvRm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgdmFsdWVzIHJlZ2FyZGxlc3MsIGZvciB0aGUgbW9tZW50XG4gICAgICAgIHRoaXMuJGZvcm0ucmVzZXQoKTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHN1Ym1pc3Npb24gSUQgaW5wdXQgaW4gY2FzZSB3ZSB3YW50IHRvIGdvIGFnYWluXG4gICAgICAgIHRoaXMucmVtb3ZlSGlkZGVuSW5wdXQoJ3N1Ym1pc3Npb25JZCcpO1xuXG4gICAgICAgIC8vIFJlc2V0IHRoZSBmb3JtIGhhc2gsIGFzIGFsbCBoYXMgYmVlbiBzYXZlZFxuICAgICAgICB0aGlzLnVwZGF0ZUZvcm1IYXNoKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlU3VibWl0QWN0aW9uKGFjdGlvbikge1xuICAgICAgICAvLyBBbGwgYnV0dG9ucyBzaG91bGQgaGF2ZSBhIGBbZGF0YS1zdWJtaXQtYWN0aW9uXWAgYnV0IGp1c3QgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHlcbiAgICAgICAgLy8gYXNzdW1lIHdoZW4gbm90IHByZXNlbnQsIHdlJ3JlIHN1Ym1pdHRpbmdcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9ICdzdWJtaXQnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBzdWJtaXQgYWN0aW9uIG9uIHRoZSBmb3JtIHdoaWxlIHdlJ3JlIGF0IGl0LiBTdG9yZSBvbiB0aGUgYCRmb3JtYFxuICAgICAgICAvLyBmb3IgZWFjaCBvZiBsb29rdXAgb24gZXZlbnQgaG9va3MgbGlrZSBjYXB0Y2hhcy5cbiAgICAgICAgdGhpcy5mb3JtLnN1Ym1pdEFjdGlvbiA9IGFjdGlvbjtcblxuICAgICAgICB0aGlzLnVwZGF0ZU9yQ3JlYXRlSGlkZGVuSW5wdXQoJ3N1Ym1pdEFjdGlvbicsIGFjdGlvbik7XG4gICAgfVxuXG4gICAgdXBkYXRlU3VibWlzc2lvbklucHV0KGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhLnN1Ym1pc3Npb25JZCB8fCAhZGF0YS5uZXh0UGFnZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIGhpZGRlbiBzdWJtaXNzaW9uIGlucHV0LCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICAgIHRoaXMudXBkYXRlT3JDcmVhdGVIaWRkZW5JbnB1dCgnc3VibWlzc2lvbklkJywgZGF0YS5zdWJtaXNzaW9uSWQpO1xuICAgIH1cblxuICAgIHVwZGF0ZU9yQ3JlYXRlSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgbGV0ICRpbnB1dCA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdW3R5cGU9XCJoaWRkZW5cIl1gKTtcblxuICAgICAgICBpZiAoISRpbnB1dCkge1xuICAgICAgICAgICAgJGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICAkaW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgbmFtZSk7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLmFwcGVuZENoaWxkKCRpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICAkaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZW1vdmVIaWRkZW5JbnB1dChuYW1lKSB7XG4gICAgICAgIGNvbnN0ICRpbnB1dCA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdW3R5cGU9XCJoaWRkZW5cIl1gKTtcblxuICAgICAgICBpZiAoJGlucHV0KSB7XG4gICAgICAgICAgICAkaW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCgkaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlUGFnZShkYXRhLCBzY3JvbGxUb1RvcCA9IHRydWUpIHtcbiAgICAgICAgLy8gVHJpZ2dlciBhbiBldmVudCB3aGVuIGEgcGFnZSBpcyB0b2dnbGVkXG4gICAgICAgIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ29uRm9ybWllUGFnZVRvZ2dsZScsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIEhpZGUgYWxsIHBhZ2VzXG4gICAgICAgIGNvbnN0ICRhbGxQYWdlcyA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnVpLXBhZ2VdJyk7XG5cbiAgICAgICAgaWYgKGRhdGEubmV4dFBhZ2VJZCkge1xuICAgICAgICAgICAgJGFsbFBhZ2VzLmZvckVhY2goKCRwYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gU2hvdyB0aGUgY3VycmVudCBwYWdlXG4gICAgICAgICAgICAgICAgaWYgKCRwYWdlLmlkID09PSBgJHt0aGlzLmdldFBhZ2VJZChkYXRhLm5leHRQYWdlSWQpfWApIHtcbiAgICAgICAgICAgICAgICAgICAgJHBhZ2UucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZ1aS1wYWdlLWhpZGRlbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRwYWdlLnNldEF0dHJpYnV0ZSgnZGF0YS1mdWktcGFnZS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0YWJzIGFuZCBwcm9ncmVzcyBiYXIgaWYgd2UncmUgdXNpbmcgdGhlbVxuICAgICAgICBjb25zdCAkcHJvZ3Jlc3MgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWZ1aS1wcm9ncmVzcy1iYXJdJyk7XG5cbiAgICAgICAgaWYgKCRwcm9ncmVzcyAmJiBkYXRhLm5leHRQYWdlSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VJbmRleCA9IHBhcnNlSW50KGRhdGEubmV4dFBhZ2VJbmRleCwgMTApICsgMTtcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5yb3VuZCgocGFnZUluZGV4IC8gZGF0YS50b3RhbFBhZ2VzKSAqIDEwMCk7XG5cbiAgICAgICAgICAgICRwcm9ncmVzcy5zdHlsZS53aWR0aCA9IGAke3Byb2dyZXNzfSVgO1xuICAgICAgICAgICAgJHByb2dyZXNzLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW5vdycsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICRwcm9ncmVzcy50ZXh0Q29udGVudCA9IGAke3Byb2dyZXNzfSVgO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgJHRhYnMgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWZ1aS1wYWdlLXRhYl0nKTtcblxuICAgICAgICBpZiAoZGF0YS5uZXh0UGFnZUlkKSB7XG4gICAgICAgICAgICAkdGFicy5mb3JFYWNoKCgkdGFiKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gU2hvdyB0aGUgY3VycmVudCBwYWdlXG4gICAgICAgICAgICAgICAgaWYgKCR0YWIuaWQgPT09IGAke3RoaXMudGFiQ2xhc3N9LSR7ZGF0YS5uZXh0UGFnZUlkfWApIHtcbiAgICAgICAgICAgICAgICAgICAgJHRhYi5jbGFzc0xpc3QuYWRkKHRoaXMudGFiQWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICR0YWIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnRhYkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFBhZ2UoZGF0YS5uZXh0UGFnZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNtb290aC1zY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgZm9ybS5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2Nyb2xsVG9Ub3ApIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9Gb3JtKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDdXJyZW50UGFnZShwYWdlSWQpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5jdXJyZW50UGFnZUlkID0gcGFnZUlkO1xuICAgICAgICB0aGlzLiRjdXJyZW50UGFnZSA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5nZXRQYWdlSWQocGFnZUlkKX1gKTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50UGFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MucGFnZXMuZmluZCgocGFnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2UuaWQgPT0gdGhpcy5zZXR0aW5ncy5jdXJyZW50UGFnZUlkO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50UGFnZUluZGV4KCkge1xuICAgICAgICBjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMuZ2V0Q3VycmVudFBhZ2UoKTtcblxuICAgICAgICBpZiAoY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnBhZ2VzLmluZGV4T2YoY3VycmVudFBhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZ2V0UGFnZUlkKHBhZ2VJZCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWcuZm9ybUhhc2hJZH0tcC0ke3BhZ2VJZH1gO1xuICAgIH1cblxuICAgIHNjcm9sbFRvRm9ybSgpIHtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHNjcm9sbC1wYWRkaW5nLXRvcCBvciBgc2Nyb2xsLW1hcmdpbi10b3BgXG4gICAgICAgIGNvbnN0IGV4dHJhUGFkZGluZyA9IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGVbJ3Njcm9sbC1wYWRkaW5nLXRvcCddIHx8ICcwcHgnKS5yZXBsYWNlKCdweCcsICcnKTtcbiAgICAgICAgY29uc3QgZXh0cmFNYXJnaW4gPSAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlWydzY3JvbGwtbWFyZ2luLXRvcCddIHx8ICcwcHgnKS5yZXBsYWNlKCdweCcsICcnKTtcblxuICAgICAgICAvLyBCZWNhdXNlIHRoZSBmb3JtIGNhbiBiZSBoaWRkZW4sIHVzZSB0aGUgcGFyZW50IHdyYXBwZXJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHtcbiAgICAgICAgICAgIHRvcDogdGhpcy4kZm9ybS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCAtIDEwMCAtIGV4dHJhUGFkZGluZyAtIGV4dHJhTWFyZ2luLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0cmlnZ2VySnNFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gdGhpcy5nZXRDdXJyZW50UGFnZSgpO1xuXG4gICAgICAgIC8vIEZpbmQgYW55IEpTIGV2ZW50cyBmb3IgdGhlIGN1cnJlbnQgcGFnZSBhbmQgZmlyZVxuICAgICAgICBpZiAoY3VycmVudFBhZ2UgJiYgY3VycmVudFBhZ2Uuc2V0dGluZ3MuZW5hYmxlSnNFdmVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcblxuICAgICAgICAgICAgY3VycmVudFBhZ2Uuc2V0dGluZ3MuanNHdG1FdmVudE9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZFtvcHRpb24ubGFiZWxdID0gb3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFB1c2ggdG8gdGhlIGRhdGFsYXllclxuICAgICAgICAgICAgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107XG4gICAgICAgICAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2gocGF5bG9hZCk7XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCb3VuY2VyIiwiRm9ybWllRm9ybVRoZW1lIiwiJGZvcm0iLCJjb25maWciLCJzZXR0aW5ncyIsInZhbGlkYXRpb25PblN1Ym1pdCIsInZhbGlkYXRpb25PbkZvY3VzIiwic2V0Q3VycmVudFBhZ2UiLCJjdXJyZW50UGFnZUlkIiwiZm9ybVRoZW1lIiwiZm9ybSIsImxvYWRpbmdDbGFzcyIsImdldENsYXNzZXMiLCJ0YWJFcnJvckNsYXNzIiwidGFiQWN0aXZlQ2xhc3MiLCJlcnJvck1lc3NhZ2VDbGFzcyIsInN1Y2Nlc3NNZXNzYWdlQ2xhc3MiLCJhbGVydENsYXNzIiwiYWxlcnRFcnJvckNsYXNzIiwiYWxlcnRTdWNjZXNzQ2xhc3MiLCJ0YWJDbGFzcyIsImluaXRWYWxpZGF0b3IiLCJoaWRlU3VjY2VzcyIsImFkZFN1Ym1pdEV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVGb3JtSGFzaCIsImVuYWJsZVVubG9hZFdhcm5pbmciLCJhZGRGb3JtVW5sb2FkRXZlbnRMaXN0ZW5lciIsInN1Ym1pdE1ldGhvZCIsImZvcm1UYWJFdmVudExpc3RlbmVyIiwidmFsaWRhdG9yU2V0dGluZ3MiLCJmaWVsZENsYXNzIiwiZXJyb3JDbGFzcyIsImZpZWxkUHJlZml4IiwiZXJyb3JQcmVmaXgiLCJtZXNzYWdlQWZ0ZXJGaWVsZCIsIm1lc3NhZ2VDdXN0b20iLCJtZXNzYWdlVGFyZ2V0IiwidmFsaWRhdGVPbkJsdXIiLCJ2YWxpZGF0ZU9uU3VibWl0IiwiZGlzYWJsZVN1Ym1pdCIsImN1c3RvbVZhbGlkYXRpb25zIiwibWVzc2FnZXMiLCJtaXNzaW5nVmFsdWUiLCJjaGVja2JveCIsInQiLCJyYWRpbyIsInNlbGVjdCIsInBhdHRlcm5NaXNtYXRjaCIsImVtYWlsIiwidXJsIiwibnVtYmVyIiwiY29sb3IiLCJkYXRlIiwidGltZSIsIm1vbnRoIiwib3V0T2ZSYW5nZSIsIm92ZXIiLCJ1bmRlciIsIndyb25nTGVuZ3RoIiwiZmFsbGJhY2siLCJyZWdpc3RlckZvcm1pZVZhbGlkYXRpb24iLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJzZXRUaW1lb3V0IiwiZGlzcGF0Y2hFdmVudCIsInZhbGlkYXRvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwic3VibWl0RGVib3VuY2UiLCJ2YWxpZGF0ZSIsIm1lc3NhZ2UiLCIkZmllbGQiLCJ0YXJnZXQiLCIkZmllbGRDb250YWluZXIiLCJjbG9zZXN0IiwiJG1lc3NhZ2UiLCJwYXJlbnROb2RlIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImVycm9ycyIsInNlcnZlck1lc3NhZ2UiLCIkZXJyb3JUb01vdmUiLCJhcHBlbmRDaGlsZCIsIiRlcnJvciIsInRleHRDb250ZW50IiwiJHN1Ym1pdEJ0bnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIiRzdWJtaXRCdG4iLCJvcmlnaW5hbEJ1dHRvblRleHQiLCJ0cmltIiwidXBkYXRlU3VibWl0QWN0aW9uIiwib25CZWZvcmVTdWJtaXQiLCJiaW5kIiwib25WYWxpZGF0ZSIsIm9uU3VibWl0Iiwib25TdWJtaXRFcnJvciIsImJlZm9yZVN1Ym1pdCIsInN1Ym1pdEhhbmRsZXIiLCJvbkZvcm1FcnJvciIsImludmFsaWQiLCJwcmV2ZW50RGVmYXVsdCIsImFqYXhTdWJtaXQiLCJlbmFibGVCYWNrU3VibWlzc2lvbiIsInN1Ym1pdEFjdGlvbiIsInRyaWdnZXJKc0V2ZW50cyIsInN1Ym1pdCIsIndpbmRvdyIsInNhdmVkRm9ybUhhc2giLCJoYXNoRm9ybSIsInJldHVyblZhbHVlIiwiJHRhYnMiLCIkdGFiIiwicGFnZUluZGV4IiwicGFnZUlkIiwidG9nZ2xlUGFnZSIsIm5leHRQYWdlSW5kZXgiLCJuZXh0UGFnZUlkIiwidG90YWxQYWdlcyIsInBhZ2VzIiwibGVuZ3RoIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJoYXNoIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImV4Y2x1ZGVkSXRlbXMiLCJlbnRyaWVzIiwicGFpciIsImlzRXhjbHVkZWQiLCJmaWx0ZXIiLCJpdGVtIiwic3RhcnRzV2l0aCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb2N1cyIsIiRmaWVsZHNldCIsIiRjdXJyZW50UGFnZSIsImludmFsaWRGaWVsZHMiLCJ2YWxpZGF0ZUFsbCIsInJlbW92ZUZvcm1BbGVydCIsIiRzdWNjZXNzTWVzc2FnZSIsInN1Ym1pdEFjdGlvbk1lc3NhZ2VUaW1lb3V0IiwidGltZW91dCIsInBhcnNlSW50IiwicmVtb3ZlIiwic2V0QXR0cmlidXRlIiwibG9hZGluZ0luZGljYXRvciIsImNsYXNzTGlzdCIsImFkZCIsImxvYWRpbmdJbmRpY2F0b3JUZXh0IiwicmVtb3ZlQXR0cmlidXRlIiwiZXJyb3JNZXNzYWdlIiwic2hvd0Zvcm1BbGVydCIsInJlbW92ZUxvYWRpbmciLCJ0ZXh0IiwidHlwZSIsIiRhbGVydCIsInJlcGxhY2UiLCJpbm5lckhUTUwiLCJkZWNvZGVIdG1sIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiZXJyb3JNZXNzYWdlUG9zaXRpb24iLCJpbnNlcnRCZWZvcmUiLCJzdWJtaXRBY3Rpb25NZXNzYWdlUG9zaXRpb24iLCJzdWJtaXRBY3Rpb25Gb3JtSGlkZSIsIm5leHRTaWJsaW5nIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4IiwiaHRtbCIsInR4dCIsInZhbHVlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwicmVtb3ZlRXJyb3IiLCJyZW1vdmVUYWJFcnJvcnMiLCJhZGRMb2FkaW5nIiwibWV0aG9kIiwiYWN0aW9uIiwibG9jYXRpb24iLCJocmVmIiwiYWpheFRpbWVvdXQiLCJvbnRpbWVvdXQiLCJvbkFqYXhFcnJvciIsIm9uZXJyb3IiLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZSIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwib25BamF4U3VjY2VzcyIsInN0YXR1c1RleHQiLCJkYXRhIiwidXBkYXRlU3VibWlzc2lvbklucHV0IiwiZXZlbnRzIiwiaXNBcnJheSIsImV2ZW50RGF0YSIsImV2ZW50IiwicGFnZUZpZWxkRXJyb3JzIiwic2hvd1RhYkVycm9ycyIsImZvcm1TdWJtaXRFcnJvciIsImFmdGVyQWpheFN1Ym1pdCIsImhhbmRsZSIsImVycm9yIiwic2hvd0Vycm9yIiwiZm9ybUFmdGVyU3VibWl0IiwicmVkaXJlY3RVcmwiLCJzdWJtaXRBY3Rpb25UYWIiLCJyZXNldCIsImlkIiwiJGJhY2tCdXR0b25JbnB1dHMiLCIkYmFja0J1dHRvbklucHV0Iiwic3VibWl0QWN0aW9uTWVzc2FnZSIsInN0eWxlIiwiZGlzcGxheSIsInNjcm9sbFRvVG9wIiwic2Nyb2xsVG9Gb3JtIiwicmVtb3ZlSGlkZGVuSW5wdXQiLCJ1cGRhdGVPckNyZWF0ZUhpZGRlbklucHV0Iiwic3VibWlzc2lvbklkIiwibmFtZSIsIiRpbnB1dCIsInJlbW92ZUNoaWxkIiwiJGFsbFBhZ2VzIiwiJHBhZ2UiLCJnZXRQYWdlSWQiLCIkcHJvZ3Jlc3MiLCJwcm9ncmVzcyIsIk1hdGgiLCJyb3VuZCIsIndpZHRoIiwiZmluZCIsInBhZ2UiLCJjdXJyZW50UGFnZSIsImdldEN1cnJlbnRQYWdlIiwiaW5kZXhPZiIsImZvcm1IYXNoSWQiLCJleHRyYVBhZGRpbmciLCJkb2N1bWVudEVsZW1lbnQiLCJleHRyYU1hcmdpbiIsInNjcm9sbFRvIiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVlPZmZzZXQiLCJiZWhhdmlvciIsImVuYWJsZUpzRXZlbnRzIiwicGF5bG9hZCIsImpzR3RtRXZlbnRPcHRpb25zIiwib3B0aW9uIiwibGFiZWwiLCJkYXRhTGF5ZXIiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/formie-form-theme.js\n");

/***/ }),

/***/ "./src/js/formie-lib.js":
/*!******************************!*\
  !*** ./src/js/formie-lib.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Formie\": () => (/* binding */ Formie)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n/* harmony import */ var _formie_form_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formie-form-base */ \"./src/js/formie-form-base.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar globals = __webpack_require__(/*! ./utils/globals */ \"./src/js/utils/globals.js\");\n\n\n\nvar Formie = /*#__PURE__*/function () {\n  function Formie() {\n    _classCallCheck(this, Formie);\n\n    this.forms = [];\n  }\n\n  _createClass(Formie, [{\n    key: \"initForms\",\n    value: function initForms() {\n      var _this = this;\n\n      this.$forms = document.querySelectorAll('form[data-fui-form]') || []; // We use this in the CP, where it's a bit tricky to add a form ID. So check just in case.\n      // Might also be handy for front-end too!\n\n      if (!this.$forms.length) {\n        this.$forms = document.querySelectorAll('div[data-fui-form]') || [];\n      }\n\n      this.$forms.forEach(function ($form) {\n        _this.initForm($form);\n      }); // Emit a custom event to let scripts know the Formie class is ready\n\n      document.dispatchEvent(new CustomEvent('onFormieInit', {\n        bubbles: true,\n        detail: {\n          formie: this\n        }\n      }));\n    }\n  }, {\n    key: \"initForm\",\n    value: function initForm($form) {\n      var _this2 = this;\n\n      var formConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(formConfig)) {\n        // Initialize the form class with the `data-fui-form` param on the form\n        formConfig = JSON.parse($form.getAttribute('data-fui-form'));\n      }\n\n      if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(formConfig)) {\n        console.error('Unable to parse `data-fui-form` form attribute for config. Ensure this attribute exists on your form and contains valid JSON.');\n        return;\n      } // See if we need to init additional, conditional JS (field, captchas, etc)\n\n\n      var registeredJs = formConfig.registeredJs || []; // Add an instance to this factory to the form config\n\n      formConfig.Formie = this; // Create the form class, save it to our collection\n\n      var form = new _formie_form_base__WEBPACK_IMPORTED_MODULE_1__.FormieFormBase($form, formConfig);\n      this.forms.push(form); // Find all `data-field-config` attributes for the current page and form\n      // and build an object of them to initialize when loaded.\n\n      form.fieldConfigs = this.parseFieldConfig($form, $form); // Is there any additional JS config registered for this form?\n\n      if (registeredJs.length) {\n        // Create a container to add these items to, so we can destroy them later\n        form.$registeredJs = document.createElement('div');\n        form.$registeredJs.setAttribute('data-fui-scripts', formConfig.formId);\n        document.body.appendChild(form.$registeredJs); // Create a `<script>` for each registered JS\n\n        registeredJs.forEach(function (config) {\n          var $script = document.createElement('script'); // Check if we've provided an external script to load. Ensure they're deferred so they don't block\n          // and use the onload call to trigger any actual scripts once its been loaded.\n\n          if (config.src) {\n            $script.src = config.src;\n            $script.defer = true; // Initialize all matching fields - their config is already rendered in templates\n\n            $script.onload = function () {\n              if (config.module) {\n                var fieldConfigs = form.fieldConfigs[config.module]; // Handle multiple fields on a page, creating a new JS class instance for each\n\n                if (fieldConfigs && Array.isArray(fieldConfigs) && fieldConfigs.length) {\n                  fieldConfigs.forEach(function (fieldConfig) {\n                    _this2.initJsClass(config.module, fieldConfig);\n                  });\n                } // Handle integrations that have global settings, instead of per-field\n\n\n                if (config.settings) {\n                  _this2.initJsClass(config.module, _objectSpread({\n                    $form: $form\n                  }, config.settings));\n                } // Special handling for some JS modules\n\n\n                if (config.module === 'FormieConditions') {\n                  _this2.initJsClass(config.module, {\n                    $form: $form\n                  });\n                }\n              }\n            };\n          }\n\n          form.$registeredJs.appendChild($script);\n        });\n      }\n    }\n  }, {\n    key: \"initJsClass\",\n    value: function initJsClass(className, params) {\n      var moduleClass = window[className];\n\n      if (moduleClass) {\n        new moduleClass(params);\n      }\n    } // Note the use of $form and $element to handle Repeater\n\n  }, {\n    key: \"parseFieldConfig\",\n    value: function parseFieldConfig($element, $form) {\n      var config = {};\n      $element.querySelectorAll('[data-field-config]').forEach(function ($field) {\n        var fieldConfig = JSON.parse($field.getAttribute('data-field-config')); // Some fields supply multiple modules, so normalise for ease-of-processing\n\n        if (!Array.isArray(fieldConfig)) {\n          fieldConfig = [fieldConfig];\n        }\n\n        fieldConfig.forEach(function (nestedFieldConfig) {\n          if (!config[nestedFieldConfig.module]) {\n            config[nestedFieldConfig.module] = [];\n          } // Provide field classes with the data they need\n\n\n          config[nestedFieldConfig.module].push(_objectSpread({\n            $form: $form,\n            $field: $field\n          }, nestedFieldConfig));\n        });\n      });\n      return config;\n    }\n  }, {\n    key: \"getForm\",\n    value: function getForm($form) {\n      return this.forms.find(function (form) {\n        return form.$form == $form;\n      });\n    }\n  }, {\n    key: \"getFormById\",\n    value: function getFormById(id) {\n      // eslint-disable-next-line array-callback-return\n      return this.forms.find(function (form) {\n        if (form.config) {\n          return form.config.formId == id;\n        }\n      });\n    }\n  }, {\n    key: \"getFormByHandle\",\n    value: function getFormByHandle(handle) {\n      // eslint-disable-next-line array-callback-return\n      return this.forms.find(function (form) {\n        if (form.config) {\n          return form.config.formHandle == handle;\n        }\n      });\n    }\n  }, {\n    key: \"destroyForm\",\n    value: function destroyForm($form) {\n      var form = this.getForm($form);\n\n      if (!form) {\n        return;\n      }\n\n      var index = this.forms.indexOf(form);\n\n      if (index === -1) {\n        return;\n      } // Delete any additional scripts for the form - if any\n\n\n      if (form.$registeredJs && form.$registeredJs.parentNode) {\n        form.$registeredJs.parentNode.removeChild(form.$registeredJs);\n      } // Remove all event listeners attached to this form\n\n\n      if (!(0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(form.listeners)) {\n        Object.keys(form.listeners).forEach(function (eventKey) {\n          form.removeEventListener(eventKey);\n        });\n      } // Destroy Bouncer events\n\n\n      if (form.formTheme && form.formTheme.validator) {\n        form.formTheme.validator.destroy();\n      } // Delete it from the factory\n\n\n      delete this.forms[index];\n    }\n  }]);\n\n  return Formie;\n}();\nwindow.Formie = Formie;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQVl2QyxJQUFJLENBQUNxQyxTQUFqQixFQUE0QnBELE9BQTVCLENBQW9DLFVBQUN1RCxRQUFELEVBQWM7VUFDOUN4QyxJQUFJLENBQUN5QyxtQkFBTCxDQUF5QkQsUUFBekI7UUFDSCxDQUZEO01BR0gsQ0F2QmMsQ0F5QmY7OztNQUNBLElBQUl4QyxJQUFJLENBQUMwQyxTQUFMLElBQWtCMUMsSUFBSSxDQUFDMEMsU0FBTCxDQUFlQyxTQUFyQyxFQUFnRDtRQUM1QzNDLElBQUksQ0FBQzBDLFNBQUwsQ0FBZUMsU0FBZixDQUF5QkMsT0FBekI7TUFDSCxDQTVCYyxDQThCZjs7O01BQ0EsT0FBTyxLQUFLaEUsS0FBTCxDQUFXcUQsS0FBWCxDQUFQO0lBQ0g7RUF0TUw7O0VBQUE7QUFBQTtBQXlNQVQsTUFBTSxDQUFDN0MsTUFBUCxHQUFnQkEsTUFBaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZm9ybWllLWxpYi5qcz8yMmEwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdsb2JhbHMgPSByZXF1aXJlKCcuL3V0aWxzL2dsb2JhbHMnKTtcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICcuL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0IHsgRm9ybWllRm9ybUJhc2UgfSBmcm9tICcuL2Zvcm1pZS1mb3JtLWJhc2UnO1xuXG5leHBvcnQgY2xhc3MgRm9ybWllIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5mb3JtcyA9IFtdO1xuICAgIH1cblxuICAgIGluaXRGb3JtcygpIHtcbiAgICAgICAgdGhpcy4kZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtW2RhdGEtZnVpLWZvcm1dJykgfHwgW107XG5cbiAgICAgICAgLy8gV2UgdXNlIHRoaXMgaW4gdGhlIENQLCB3aGVyZSBpdCdzIGEgYml0IHRyaWNreSB0byBhZGQgYSBmb3JtIElELiBTbyBjaGVjayBqdXN0IGluIGNhc2UuXG4gICAgICAgIC8vIE1pZ2h0IGFsc28gYmUgaGFuZHkgZm9yIGZyb250LWVuZCB0b28hXG4gICAgICAgIGlmICghdGhpcy4kZm9ybXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdltkYXRhLWZ1aS1mb3JtXScpIHx8IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZm9ybXMuZm9yRWFjaCgoJGZvcm0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdEZvcm0oJGZvcm0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBFbWl0IGEgY3VzdG9tIGV2ZW50IHRvIGxldCBzY3JpcHRzIGtub3cgdGhlIEZvcm1pZSBjbGFzcyBpcyByZWFkeVxuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnb25Gb3JtaWVJbml0Jywge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIGZvcm1pZTogdGhpcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpbml0Rm9ybSgkZm9ybSwgZm9ybUNvbmZpZyA9IHt9KSB7XG4gICAgICAgIGlmIChpc0VtcHR5KGZvcm1Db25maWcpKSB7XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBmb3JtIGNsYXNzIHdpdGggdGhlIGBkYXRhLWZ1aS1mb3JtYCBwYXJhbSBvbiB0aGUgZm9ybVxuICAgICAgICAgICAgZm9ybUNvbmZpZyA9IEpTT04ucGFyc2UoJGZvcm0uZ2V0QXR0cmlidXRlKCdkYXRhLWZ1aS1mb3JtJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRW1wdHkoZm9ybUNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBgZGF0YS1mdWktZm9ybWAgZm9ybSBhdHRyaWJ1dGUgZm9yIGNvbmZpZy4gRW5zdXJlIHRoaXMgYXR0cmlidXRlIGV4aXN0cyBvbiB5b3VyIGZvcm0gYW5kIGNvbnRhaW5zIHZhbGlkIEpTT04uJyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlZSBpZiB3ZSBuZWVkIHRvIGluaXQgYWRkaXRpb25hbCwgY29uZGl0aW9uYWwgSlMgKGZpZWxkLCBjYXB0Y2hhcywgZXRjKVxuICAgICAgICBjb25zdCByZWdpc3RlcmVkSnMgPSBmb3JtQ29uZmlnLnJlZ2lzdGVyZWRKcyB8fCBbXTtcblxuICAgICAgICAvLyBBZGQgYW4gaW5zdGFuY2UgdG8gdGhpcyBmYWN0b3J5IHRvIHRoZSBmb3JtIGNvbmZpZ1xuICAgICAgICBmb3JtQ29uZmlnLkZvcm1pZSA9IHRoaXM7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBmb3JtIGNsYXNzLCBzYXZlIGl0IHRvIG91ciBjb2xsZWN0aW9uXG4gICAgICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybWllRm9ybUJhc2UoJGZvcm0sIGZvcm1Db25maWcpO1xuXG4gICAgICAgIHRoaXMuZm9ybXMucHVzaChmb3JtKTtcblxuICAgICAgICAvLyBGaW5kIGFsbCBgZGF0YS1maWVsZC1jb25maWdgIGF0dHJpYnV0ZXMgZm9yIHRoZSBjdXJyZW50IHBhZ2UgYW5kIGZvcm1cbiAgICAgICAgLy8gYW5kIGJ1aWxkIGFuIG9iamVjdCBvZiB0aGVtIHRvIGluaXRpYWxpemUgd2hlbiBsb2FkZWQuXG4gICAgICAgIGZvcm0uZmllbGRDb25maWdzID0gdGhpcy5wYXJzZUZpZWxkQ29uZmlnKCRmb3JtLCAkZm9ybSk7XG5cbiAgICAgICAgLy8gSXMgdGhlcmUgYW55IGFkZGl0aW9uYWwgSlMgY29uZmlnIHJlZ2lzdGVyZWQgZm9yIHRoaXMgZm9ybT9cbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRKcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGNvbnRhaW5lciB0byBhZGQgdGhlc2UgaXRlbXMgdG8sIHNvIHdlIGNhbiBkZXN0cm95IHRoZW0gbGF0ZXJcbiAgICAgICAgICAgIGZvcm0uJHJlZ2lzdGVyZWRKcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZm9ybS4kcmVnaXN0ZXJlZEpzLnNldEF0dHJpYnV0ZSgnZGF0YS1mdWktc2NyaXB0cycsIGZvcm1Db25maWcuZm9ybUlkKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybS4kcmVnaXN0ZXJlZEpzKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgYDxzY3JpcHQ+YCBmb3IgZWFjaCByZWdpc3RlcmVkIEpTXG4gICAgICAgICAgICByZWdpc3RlcmVkSnMuZm9yRWFjaCgoY29uZmlnKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgJHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UndmUgcHJvdmlkZWQgYW4gZXh0ZXJuYWwgc2NyaXB0IHRvIGxvYWQuIEVuc3VyZSB0aGV5J3JlIGRlZmVycmVkIHNvIHRoZXkgZG9uJ3QgYmxvY2tcbiAgICAgICAgICAgICAgICAvLyBhbmQgdXNlIHRoZSBvbmxvYWQgY2FsbCB0byB0cmlnZ2VyIGFueSBhY3R1YWwgc2NyaXB0cyBvbmNlIGl0cyBiZWVuIGxvYWRlZC5cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnNyYykge1xuICAgICAgICAgICAgICAgICAgICAkc2NyaXB0LnNyYyA9IGNvbmZpZy5zcmM7XG4gICAgICAgICAgICAgICAgICAgICRzY3JpcHQuZGVmZXIgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgYWxsIG1hdGNoaW5nIGZpZWxkcyAtIHRoZWlyIGNvbmZpZyBpcyBhbHJlYWR5IHJlbmRlcmVkIGluIHRlbXBsYXRlc1xuICAgICAgICAgICAgICAgICAgICAkc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcubW9kdWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRDb25maWdzID0gZm9ybS5maWVsZENvbmZpZ3NbY29uZmlnLm1vZHVsZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgbXVsdGlwbGUgZmllbGRzIG9uIGEgcGFnZSwgY3JlYXRpbmcgYSBuZXcgSlMgY2xhc3MgaW5zdGFuY2UgZm9yIGVhY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRDb25maWdzICYmIEFycmF5LmlzQXJyYXkoZmllbGRDb25maWdzKSAmJiBmaWVsZENvbmZpZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkQ29uZmlncy5mb3JFYWNoKChmaWVsZENvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0SnNDbGFzcyhjb25maWcubW9kdWxlLCBmaWVsZENvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBpbnRlZ3JhdGlvbnMgdGhhdCBoYXZlIGdsb2JhbCBzZXR0aW5ncywgaW5zdGVhZCBvZiBwZXItZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdEpzQ2xhc3MoY29uZmlnLm1vZHVsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jb25maWcuc2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHNvbWUgSlMgbW9kdWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcubW9kdWxlID09PSAnRm9ybWllQ29uZGl0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0SnNDbGFzcyhjb25maWcubW9kdWxlLCB7ICRmb3JtIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3JtLiRyZWdpc3RlcmVkSnMuYXBwZW5kQ2hpbGQoJHNjcmlwdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRKc0NsYXNzKGNsYXNzTmFtZSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZUNsYXNzID0gd2luZG93W2NsYXNzTmFtZV07XG5cbiAgICAgICAgaWYgKG1vZHVsZUNsYXNzKSB7XG4gICAgICAgICAgICBuZXcgbW9kdWxlQ2xhc3MocGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vdGUgdGhlIHVzZSBvZiAkZm9ybSBhbmQgJGVsZW1lbnQgdG8gaGFuZGxlIFJlcGVhdGVyXG4gICAgcGFyc2VGaWVsZENvbmZpZygkZWxlbWVudCwgJGZvcm0pIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0ge307XG5cbiAgICAgICAgJGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZmllbGQtY29uZmlnXScpLmZvckVhY2goKCRmaWVsZCkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpZWxkQ29uZmlnID0gSlNPTi5wYXJzZSgkZmllbGQuZ2V0QXR0cmlidXRlKCdkYXRhLWZpZWxkLWNvbmZpZycpKTtcblxuICAgICAgICAgICAgLy8gU29tZSBmaWVsZHMgc3VwcGx5IG11bHRpcGxlIG1vZHVsZXMsIHNvIG5vcm1hbGlzZSBmb3IgZWFzZS1vZi1wcm9jZXNzaW5nXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmllbGRDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgZmllbGRDb25maWcgPSBbZmllbGRDb25maWddO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaWVsZENvbmZpZy5mb3JFYWNoKChuZXN0ZWRGaWVsZENvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnW25lc3RlZEZpZWxkQ29uZmlnLm1vZHVsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnW25lc3RlZEZpZWxkQ29uZmlnLm1vZHVsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQcm92aWRlIGZpZWxkIGNsYXNzZXMgd2l0aCB0aGUgZGF0YSB0aGV5IG5lZWRcbiAgICAgICAgICAgICAgICBjb25maWdbbmVzdGVkRmllbGRDb25maWcubW9kdWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJGZvcm0sXG4gICAgICAgICAgICAgICAgICAgICRmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgLi4ubmVzdGVkRmllbGRDb25maWcsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGdldEZvcm0oJGZvcm0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybXMuZmluZCgoZm9ybSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm0uJGZvcm0gPT0gJGZvcm07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEZvcm1CeUlkKGlkKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybXMuZmluZCgoZm9ybSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZvcm0uY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm0uY29uZmlnLmZvcm1JZCA9PSBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Rm9ybUJ5SGFuZGxlKGhhbmRsZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1zLmZpbmQoKGZvcm0pID0+IHtcbiAgICAgICAgICAgIGlmIChmb3JtLmNvbmZpZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtLmNvbmZpZy5mb3JtSGFuZGxlID09IGhhbmRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVzdHJveUZvcm0oJGZvcm0pIHtcbiAgICAgICAgY29uc3QgZm9ybSA9IHRoaXMuZ2V0Rm9ybSgkZm9ybSk7XG5cbiAgICAgICAgaWYgKCFmb3JtKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZm9ybXMuaW5kZXhPZihmb3JtKTtcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWxldGUgYW55IGFkZGl0aW9uYWwgc2NyaXB0cyBmb3IgdGhlIGZvcm0gLSBpZiBhbnlcbiAgICAgICAgaWYgKGZvcm0uJHJlZ2lzdGVyZWRKcyAmJiBmb3JtLiRyZWdpc3RlcmVkSnMucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgZm9ybS4kcmVnaXN0ZXJlZEpzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9ybS4kcmVnaXN0ZXJlZEpzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgZXZlbnQgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIHRoaXMgZm9ybVxuICAgICAgICBpZiAoIWlzRW1wdHkoZm9ybS5saXN0ZW5lcnMpKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhmb3JtLmxpc3RlbmVycykuZm9yRWFjaCgoZXZlbnRLZXkpID0+IHtcbiAgICAgICAgICAgICAgICBmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRLZXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXN0cm95IEJvdW5jZXIgZXZlbnRzXG4gICAgICAgIGlmIChmb3JtLmZvcm1UaGVtZSAmJiBmb3JtLmZvcm1UaGVtZS52YWxpZGF0b3IpIHtcbiAgICAgICAgICAgIGZvcm0uZm9ybVRoZW1lLnZhbGlkYXRvci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWxldGUgaXQgZnJvbSB0aGUgZmFjdG9yeVxuICAgICAgICBkZWxldGUgdGhpcy5mb3Jtc1tpbmRleF07XG4gICAgfVxufVxuXG53aW5kb3cuRm9ybWllID0gRm9ybWllO1xuIl0sIm5hbWVzIjpbImdsb2JhbHMiLCJyZXF1aXJlIiwiaXNFbXB0eSIsIkZvcm1pZUZvcm1CYXNlIiwiRm9ybWllIiwiZm9ybXMiLCIkZm9ybXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJmb3JFYWNoIiwiJGZvcm0iLCJpbml0Rm9ybSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJmb3JtaWUiLCJmb3JtQ29uZmlnIiwiSlNPTiIsInBhcnNlIiwiZ2V0QXR0cmlidXRlIiwiY29uc29sZSIsImVycm9yIiwicmVnaXN0ZXJlZEpzIiwiZm9ybSIsInB1c2giLCJmaWVsZENvbmZpZ3MiLCJwYXJzZUZpZWxkQ29uZmlnIiwiJHJlZ2lzdGVyZWRKcyIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJmb3JtSWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjb25maWciLCIkc2NyaXB0Iiwic3JjIiwiZGVmZXIiLCJvbmxvYWQiLCJtb2R1bGUiLCJBcnJheSIsImlzQXJyYXkiLCJmaWVsZENvbmZpZyIsImluaXRKc0NsYXNzIiwic2V0dGluZ3MiLCJjbGFzc05hbWUiLCJwYXJhbXMiLCJtb2R1bGVDbGFzcyIsIndpbmRvdyIsIiRlbGVtZW50IiwiJGZpZWxkIiwibmVzdGVkRmllbGRDb25maWciLCJmaW5kIiwiaWQiLCJoYW5kbGUiLCJmb3JtSGFuZGxlIiwiZ2V0Rm9ybSIsImluZGV4IiwiaW5kZXhPZiIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImxpc3RlbmVycyIsIk9iamVjdCIsImtleXMiLCJldmVudEtleSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmb3JtVGhlbWUiLCJ2YWxpZGF0b3IiLCJkZXN0cm95Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/formie-lib.js\n");

/***/ }),

/***/ "./src/js/formie.js":
/*!**************************!*\
  !*** ./src/js/formie.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _formie_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formie-lib */ \"./src/js/formie-lib.js\");\n // This should only be used when initializing Formie from the browser. When initializing with JS directly\n// import `formie-lib.js` directly into your JS modules.\n\nwindow.Formie = new _formie_lib__WEBPACK_IMPORTED_MODULE_0__.Formie(); // Don't init forms until the document is ready, or the document already loaded\n// https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event#checking_whether_loading_is_already_complete\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', function (event) {\n    window.Formie.initForms();\n  });\n} else {\n  window.Formie.initForms();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybWllLmpzLmpzIiwibWFwcGluZ3MiOiI7O0NBRUE7QUFDQTs7QUFDQUMsTUFBTSxDQUFDRCxNQUFQLEdBQWdCLElBQUlBLCtDQUFKLEVBQWhCLEVBRUE7QUFDQTs7QUFDQSxJQUFJRSxRQUFRLENBQUNDLFVBQVQsS0FBd0IsU0FBNUIsRUFBdUM7RUFDbkNELFFBQVEsQ0FBQ0UsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFVBQUNDLEtBQUQsRUFBVztJQUNyREosTUFBTSxDQUFDRCxNQUFQLENBQWNNLFNBQWQ7RUFDSCxDQUZEO0FBR0gsQ0FKRCxNQUlPO0VBQ0hMLE1BQU0sQ0FBQ0QsTUFBUCxDQUFjTSxTQUFkO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZm9ybWllLmpzP2ZjNmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybWllIH0gZnJvbSAnLi9mb3JtaWUtbGliJztcblxuLy8gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gaW5pdGlhbGl6aW5nIEZvcm1pZSBmcm9tIHRoZSBicm93c2VyLiBXaGVuIGluaXRpYWxpemluZyB3aXRoIEpTIGRpcmVjdGx5XG4vLyBpbXBvcnQgYGZvcm1pZS1saWIuanNgIGRpcmVjdGx5IGludG8geW91ciBKUyBtb2R1bGVzLlxud2luZG93LkZvcm1pZSA9IG5ldyBGb3JtaWUoKTtcblxuLy8gRG9uJ3QgaW5pdCBmb3JtcyB1bnRpbCB0aGUgZG9jdW1lbnQgaXMgcmVhZHksIG9yIHRoZSBkb2N1bWVudCBhbHJlYWR5IGxvYWRlZFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50L0RPTUNvbnRlbnRMb2FkZWRfZXZlbnQjY2hlY2tpbmdfd2hldGhlcl9sb2FkaW5nX2lzX2FscmVhZHlfY29tcGxldGVcbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIHdpbmRvdy5Gb3JtaWUuaW5pdEZvcm1zKCk7XG4gICAgfSk7XG59IGVsc2Uge1xuICAgIHdpbmRvdy5Gb3JtaWUuaW5pdEZvcm1zKCk7XG59XG4iXSwibmFtZXMiOlsiRm9ybWllIiwid2luZG93IiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiaW5pdEZvcm1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/formie.js\n");

/***/ }),

/***/ "./src/js/utils/bouncer.js":
/*!*********************************!*\
  !*** ./src/js/utils/bouncer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bouncer\": () => (/* binding */ Bouncer)\n/* harmony export */ });\n/* eslint-disable */\n\n/*!\n * formbouncerjs v1.4.6\n * A lightweight form validation script that augments native HTML5 form validation elements and attributes.\n * (c) 2020 Chris Ferdinandi\n * MIT License\n * http://github.com/cferdinandi/bouncer\n */\n\n/**\n * The plugin constructor\n * @param {DOMElement} formElement The DOM Element to use for forms to be validated\n * @param {Object} options  User settings [optional]\n */\nvar Bouncer = function Bouncer(formElement, options) {\n  //\n  // Variables\n  //\n  var defaults = {\n    // Classes & IDs\n    fieldClass: 'error',\n    errorClass: 'error-message',\n    fieldPrefix: 'bouncer-field_',\n    errorPrefix: 'bouncer-error_',\n    // Patterns\n    patterns: {\n      email: /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/,\n      url: /^(?:(?:https?|HTTPS?|ftp|FTP):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/,\n      number: /^(?:[-+]?[0-9]*[.,]?[0-9]+)$/,\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))/,\n      time: /^(?:(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]))$/,\n      month: /^(?:(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])))$/\n    },\n    // Custom Validations\n    customValidations: {},\n    // Messages\n    messageAfterField: true,\n    messageCustom: 'data-bouncer-message',\n    messageTarget: 'data-bouncer-target',\n    // messages: {\n    //     missingValue: {\n    //         checkbox: 'This field is required.',\n    //         radio: 'Please select a value.',\n    //         select: 'Please select a value.',\n    //         'select-multiple': 'Please select at least one value.',\n    //         default: 'Please fill out this field.',\n    //     },\n    //     patternMismatch: {\n    //         email: 'Please enter a valid email address.',\n    //         url: 'Please enter a URL.',\n    //         number: 'Please enter a number',\n    //         color: 'Please match the following format: #rrggbb',\n    //         date: 'Please use the YYYY-MM-DD format',\n    //         time: 'Please use the 24-hour time format. Ex. 23:00',\n    //         month: 'Please use the YYYY-MM format',\n    //         default: 'Please match the requested format.',\n    //     },\n    //     outOfRange: {\n    //         over: 'Please select a value that is no more than {max}.',\n    //         under: 'Please select a value that is no less than {min}.',\n    //     },\n    //     wrongLength: {\n    //         over: 'Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.',\n    //         under: 'Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.',\n    //     },\n    //     fallback: 'There was an error with this field.',\n    // },\n    // Form Submission\n    disableSubmit: false,\n    // Allow blur/click/input events to be opt-out\n    validateOnBlur: true,\n    // Allow validation to be turned off altogether. Useful for server-side validation use.\n    validateOnSubmit: true,\n    // Custom Events\n    emitEvents: true\n  }; //\n  // Methods\n  //\n\n  /**\n   * A wrapper for Array.prototype.forEach() for non-arrays\n   * @param  {Array-like} arr      The array-like object\n   * @param  {Function}   callback The callback to run\n   */\n\n  var forEach = function forEach(arr, callback) {\n    Array.prototype.forEach.call(arr, callback);\n  };\n  /**\n   * Merge two or more objects together.\n   * @param   {Object}   objects  The objects to merge together\n   * @returns {Object}            Merged values of defaults and options\n   */\n\n\n  var extend = function extend() {\n    var merged = {};\n    forEach(arguments, function (obj) {\n      for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) return;\n\n        if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n          merged[key] = extend(merged[key], obj[key]);\n        } else {\n          merged[key] = obj[key];\n        } // merged[key] = obj[key];\n\n      }\n    });\n    return merged;\n  };\n  /**\n   * Emit a custom event\n   * @param  {String} type    The event type\n   * @param  {Object} options The settings object\n   * @param  {Node}   anchor  The anchor element\n   * @param  {Node}   toggle  The toggle element\n   */\n\n\n  var emitEvent = function emitEvent(elem, type, details) {\n    if (typeof window.CustomEvent !== 'function') return;\n    var event = new CustomEvent(type, {\n      bubbles: true,\n      detail: details || {}\n    });\n    elem.dispatchEvent(event);\n  };\n  /**\n   * Add the `novalidate` attribute to all forms\n   * @param {Boolean} remove  If true, remove the `novalidate` attribute\n   */\n\n\n  var addNoValidate = function addNoValidate(form) {\n    form.setAttribute('novalidate', true);\n  };\n  /**\n   * Remove the `novalidate` attribute to all forms\n   */\n\n\n  var removeNoValidate = function removeNoValidate(form) {\n    form.removeAttribute('novalidate');\n  };\n  /**\n   * Check if a required field is missing its value\n   * @param  {Node} field The field to check\n   * @return {Boolean}       It true, field is missing it's value\n   */\n\n\n  var missingValue = function missingValue(field) {\n    // If not required, bail\n    if (!field.hasAttribute('required')) return false; // Handle checkboxes\n\n    if (field.type === 'checkbox') {\n      // Watch out for grouped checkboxes. Only validate the group as a whole\n      var checkboxInputs = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]:not([type=\"hidden\"])');\n\n      if (checkboxInputs.length) {\n        var checkedInputs = Array.prototype.filter.call(checkboxInputs, function (btn) {\n          return btn.checked;\n        }).length;\n        return !checkedInputs;\n      }\n\n      return !field.checked;\n    } // Don't validate any hidden fields\n\n\n    if (field.type === 'hidden') {\n      return false;\n    } // Get the field value length\n\n\n    var length = field.value.length; // Handle radio buttons\n\n    if (field.type === 'radio') {\n      length = Array.prototype.filter.call(field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]'), function (btn) {\n        return btn.checked;\n      }).length;\n    } // Check for value\n\n\n    return length < 1;\n  };\n  /**\n   * Check if field value doesn't match a patter.\n   * @param  {Node}   field    The field to check\n   * @param  {Object} settings The plugin settings\n   * @see https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute\n   * @return {Boolean}         If true, there's a pattern mismatch\n   */\n\n\n  var patternMismatch = function patternMismatch(field, settings) {\n    // Check if there's a pattern to match\n    var pattern = field.getAttribute('pattern');\n    pattern = pattern ? new RegExp('^(?:' + pattern + ')$') : settings.patterns[field.type];\n    if (!pattern || !field.value || field.value.length < 1) return false; // Validate the pattern\n\n    return field.value.match(pattern) ? false : true;\n  };\n  /**\n   * Check if field value is out-of-range\n   * @param  {Node}    field    The field to check\n   * @return {String}           Returns 'over', 'under', or false\n   */\n\n\n  var outOfRange = function outOfRange(field) {\n    // Make sure field has value\n    if (!field.value || field.value.length < 1) return false; // Check for range\n\n    var max = field.getAttribute('max');\n    var min = field.getAttribute('min'); // Check validity\n\n    var num = parseFloat(field.value);\n    if (max && num > max) return 'over';\n    if (min && num < min) return 'under';\n    return false;\n  };\n  /**\n   * Check if the field value is too long or too short\n   * @param  {Node}   field    The field to check\n   * @return {String}           Returns 'over', 'under', or false\n   */\n\n\n  var wrongLength = function wrongLength(field) {\n    // Make sure field has value\n    if (!field.value || field.value.length < 1) return false; // Check for min/max length\n\n    var max = field.getAttribute('maxlength');\n    var min = field.getAttribute('minlength'); // Check validity\n\n    var length = field.value.length;\n    if (max && length > max) return 'over';\n    if (min && length < min) return 'under';\n    return false;\n  };\n  /**\n   * Test for standard field validations\n   * @param  {Node}   field    The field to test\n   * @param  {Object} settings The plugin settings\n   * @return {Object}          The tests and their results\n   */\n\n\n  var runValidations = function runValidations(field, settings) {\n    return {\n      missingValue: missingValue(field),\n      patternMismatch: patternMismatch(field, settings),\n      outOfRange: outOfRange(field),\n      wrongLength: wrongLength(field)\n    };\n  };\n  /**\n   * Run any provided custom validations\n   * @param  {Node}   field       The field to test\n   * @param  {Object} errors      The existing errors\n   * @param  {Object} validations The custom validations to run\n   * @param  {Object} settings    The plugin settings\n   * @return {Object}             The tests and their results\n   */\n\n\n  var customValidations = function customValidations(field, errors, validations, settings) {\n    for (var test in validations) {\n      if (validations.hasOwnProperty(test)) {\n        errors[test] = validations[test](field, settings);\n      }\n    }\n\n    return errors;\n  };\n  /**\n   * Check if a field has any errors\n   * @param  {Object}  errors The validation test results\n   * @return {Boolean}        Returns true if there are errors\n   */\n\n\n  var hasErrors = function hasErrors(errors) {\n    for (var type in errors) {\n      if (errors[type]) return true;\n    }\n\n    return false;\n  };\n  /**\n   * Check a field for errors\n   * @param  {Node} field      The field to test\n   * @param  {Object} settings The plugin settings\n   * @return {Object}          The field validity and errors\n   */\n\n\n  var getErrors = function getErrors(field, settings) {\n    // Get standard validation errors\n    var errors = runValidations(field, settings); // Check for custom validations\n\n    errors = customValidations(field, errors, settings.customValidations, settings);\n    return {\n      valid: !hasErrors(errors),\n      errors: errors\n    };\n  };\n  /**\n   * Escape special characters for use with querySelector\n   * @author Mathias Bynens\n   * @link https://github.com/mathiasbynens/CSS.escape\n   * @param {String} id The anchor ID to escape\n   */\n\n\n  var escapeCharacters = function escapeCharacters(id) {\n    var string = String(id);\n    var length = string.length;\n    var index = -1;\n    var codeUnit;\n    var result = '';\n    var firstCodeUnit = string.charCodeAt(0);\n\n    while (++index < length) {\n      codeUnit = string.charCodeAt(index); // Note: there’s no need to special-case astral symbols, surrogate\n      // pairs, or lone surrogates.\n      // If the character is NULL (U+0000), then throw an\n      // `InvalidCharacterError` exception and terminate these steps.\n\n      if (codeUnit === 0x0000) {\n        throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n      }\n\n      if ( // If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n      // U+007F, […]\n      codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F || // If the character is the first character and is in the range [0-9]\n      // (U+0030 to U+0039), […]\n      index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 || // If the character is the second character and is in the range [0-9]\n      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n      index === 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit === 0x002D) {\n        // http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point\n        result += '\\\\' + codeUnit.toString(16) + ' ';\n        continue;\n      } // If the character is not handled by one of the above rules and is\n      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n      // U+005A), or [a-z] (U+0061 to U+007A), […]\n\n\n      if (codeUnit >= 0x0080 || codeUnit === 0x002D || codeUnit === 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {\n        // the character itself\n        result += string.charAt(index);\n        continue;\n      } // Otherwise, the escaped character.\n      // http://dev.w3.org/csswg/cssom/#escape-a-character\n\n\n      result += '\\\\' + string.charAt(index);\n    } // Return sanitized hash\n\n\n    return result;\n  };\n  /**\n   * Get or create an ID for a field\n   * @param  {Node}    field    The field\n   * @param  {Object}  settings The plugin settings\n   * @param  {Boolean} create   If true, create an ID if there isn't one\n   * @return {String}           The field ID\n   */\n\n\n  var getFieldID = function getFieldID(field, settings, create) {\n    var id = field.name ? field.name : field.id;\n\n    if (!id && create) {\n      id = settings.fieldPrefix + Math.floor(Math.random() * 999);\n      field.id = id;\n    } // if (field.type === 'checkbox') {\n    //     id += '_' + (field.value || field.id);\n    // }\n\n\n    return id;\n  };\n  /**\n   * Special handling for radio buttons and checkboxes wrapped in labels.\n   * @param  {Node} field The field with the error\n   * @return {Node}       The field to show the error on\n   */\n\n\n  var getErrorField = function getErrorField(field) {\n    // If the field is a radio button, get the last item in the radio group\n    // @todo if location is before, get first item\n    if (field.type === 'radio' && field.name) {\n      var group = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]');\n      field = group[group.length - 1];\n    } // Get the associated label for radio button or checkbox\n    // if (field.type === 'radio') {\n    //     var label = field.closest('label') || field.form.querySelector('[for=\"' + field.id + '\"]');\n    //     field = label || field;\n    // }\n\n\n    if (field.type === 'checkbox' || field.type === 'radio') {\n      field = field.closest('[data-field-handle]');\n    }\n\n    return field;\n  };\n  /**\n   * Get the location for a field's error message\n   * @param  {Node}   field    The field\n   * @param  {Node}   target   The target for error message\n   * @param  {Object} settings The plugin settings\n   * @return {Node}            The error location\n   */\n\n\n  var getErrorLocation = function getErrorLocation(field, target, settings) {\n    // Check for a custom error message\n    var selector = field.getAttribute(settings.messageTarget);\n\n    if (selector) {\n      var location = field.form.querySelector(selector);\n\n      if (location) {\n        // @bugfix by @HaroldPutman\n        // https://github.com/cferdinandi/bouncer/pull/28\n        return location.firstChild || location.appendChild(document.createTextNode(''));\n      }\n    } // If the message should come after the field\n\n\n    if (settings.messageAfterField) {\n      if (!target) {\n        target = field;\n      } // If there's no next sibling, create one\n\n\n      if (!target.nextSibling) {\n        target.parentNode.appendChild(document.createTextNode(''));\n      }\n\n      return target.nextSibling;\n    } // If it should come before\n\n\n    return target;\n  };\n  /**\n   * Create a validation error message node\n   * @param  {Node} field      The field\n   * @param  {Object} settings The plugin settings\n   * @return {Node}            The error message node\n   */\n\n\n  var createError = function createError(field, settings) {\n    // Create the error message\n    var error = document.createElement('div');\n    error.className = settings.errorClass;\n    error.setAttribute('data-error-message', '');\n    error.id = settings.errorPrefix + getFieldID(field, settings, true); // If the field is a radio button or checkbox, grab the last field label\n\n    var fieldTarget = getErrorField(field); // Inject the error message into the DOM\n\n    var location = getErrorLocation(field, fieldTarget, settings);\n    location.parentNode.insertBefore(error, location);\n    return error;\n  };\n  /**\n   * Get the error message test\n   * @param  {Node}            field    The field to get an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          settings The plugin settings\n   * @return {String|Function}          The error message\n   */\n\n\n  var getErrorMessage = function getErrorMessage(field, errors, settings) {\n    // Variables\n    var messages = settings.messages; // Missing value error\n\n    if (errors.missingValue) {\n      return messages.missingValue[field.type] || messages.missingValue[\"default\"];\n    } // Numbers that are out of range\n\n\n    if (errors.outOfRange) {\n      return messages.outOfRange[errors.outOfRange].replace('{max}', field.getAttribute('max')).replace('{min}', field.getAttribute('min')).replace('{length}', field.value.length);\n    } // Values that are too long or short\n\n\n    if (errors.wrongLength) {\n      return messages.wrongLength[errors.wrongLength].replace('{maxLength}', field.getAttribute('maxlength')).replace('{minLength}', field.getAttribute('minlength')).replace('{length}', field.value.length);\n    } // Pattern mismatch error\n\n\n    if (errors.patternMismatch) {\n      var custom = field.getAttribute(settings.messageCustom);\n      if (custom) return custom;\n      return messages.patternMismatch[field.type] || messages.patternMismatch[\"default\"];\n    } // Custom validations\n\n\n    for (var test in settings.customValidations) {\n      if (settings.customValidations.hasOwnProperty(test)) {\n        if (errors[test] && messages[test]) return messages[test];\n      }\n    } // Custom message, passed directly in\n\n\n    if (errors.customMessage) {\n      return errors.customMessage;\n    } // Fallback error message\n\n\n    return messages.fallback;\n  };\n  /**\n   * Add error attributes to a field\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var addErrorAttributes = function addErrorAttributes(field, error, settings) {\n    field.classList.add(settings.fieldClass);\n    field.setAttribute('aria-describedby', error.id);\n    field.setAttribute('aria-invalid', true);\n    var $fieldNode = field.closest('[data-field-handle]');\n\n    if ($fieldNode) {\n      $fieldNode.classList.add(settings.fieldClass);\n    }\n  };\n  /**\n   * Show error attributes on a field or radio/checkbox group\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var showErrorAttributes = function showErrorAttributes(field, error, settings) {\n    // If field is a radio button, add attributes to every button in the group\n    if (field.type === 'radio' && field.name) {\n      Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), function (button) {\n        addErrorAttributes(button, error, settings);\n      });\n    } // Otherwise, add an error class and aria attribute to the field\n\n\n    addErrorAttributes(field, error, settings);\n  };\n  /**\n   * Show an error message in the DOM\n   * @param  {Node} field      The field to show an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          settings The plugin settings\n   */\n\n\n  var showError = function showError(field, errors, settings) {\n    // Get/create an error message\n    var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings))) || createError(field, settings);\n    var msg = getErrorMessage(field, errors, settings);\n    error.textContent = typeof msg === 'function' ? msg(field, settings) : msg; // Add error attributes\n\n    showErrorAttributes(field, error, settings); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(field, 'bouncerShowError', {\n        errors: errors\n      });\n    }\n  };\n  /**\n   * Remove error attributes from a field\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeAttributes = function removeAttributes(field, settings) {\n    field.classList.remove(settings.fieldClass);\n    field.removeAttribute('aria-describedby');\n    field.removeAttribute('aria-invalid');\n    var $fieldNode = field.closest('[data-field-handle]');\n\n    if ($fieldNode) {\n      $fieldNode.classList.remove(settings.fieldClass);\n    }\n  };\n  /**\n   * Remove error attributes from the field or radio group\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeErrorAttributes = function removeErrorAttributes(field, settings) {\n    // If field is a radio button, remove attributes from every button in the group\n    if (field.type === 'radio' && field.name) {\n      Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), function (button) {\n        removeAttributes(button, settings);\n      });\n      return;\n    } // Otherwise, add an error class and aria attribute to the field\n\n\n    removeAttributes(field, settings);\n  };\n  /**\n   * Remove an error message from the DOM\n   * @param  {Node} field      The field with the error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeError = function removeError(field, settings) {\n    // Get the error message for this field\n    var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings)));\n    if (!error) return; // Remove the error\n\n    error.parentNode.removeChild(error); // Remove error and a11y from the field\n\n    removeErrorAttributes(field, settings); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(field, 'bouncerRemoveError');\n    }\n  };\n  /**\n   * Remove errors from all fields\n   * @param  {String} selector The selector for the form\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeAllErrors = function removeAllErrors(form, settings) {\n    forEach(form.querySelectorAll('input, select, textarea'), function (field) {\n      removeError(field, settings);\n    });\n  }; //\n  // Variables\n  //\n\n\n  var publicAPIs = {};\n  var settings; //\n  // Methods\n  //\n\n  /**\n   * Show an error message in the DOM\n   * @param  {Node} field      The field to show an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          options Additional plugin settings\n   */\n\n  publicAPIs.showError = function (field, errors, options) {\n    var _settings = extend(settings, options || {});\n\n    return showError(field, errors, _settings);\n  };\n  /**\n   * Remove an error message from the DOM\n   * @param  {Node} field      The field with the error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  publicAPIs.removeError = function (field, options) {\n    var _settings = extend(settings, options || {});\n\n    return removeError(field, _settings);\n  };\n  /**\n   * Validate a field\n   * @param  {Node} field     The field to validate\n   * @param  {Object} options Validation options\n   * @return {Object}         The validity state and errors\n   */\n\n\n  publicAPIs.validate = function (field, options) {\n    // Don't validate submits, buttons, file and reset inputs, and disabled and readonly fields\n    if (field.disabled || field.readOnly || field.type === 'reset' || field.type === 'submit' || field.type === 'button') return; // Local settings\n\n    var _settings = extend(settings, options || {}); // Check for errors\n\n\n    var isValid = getErrors(field, _settings); // If valid, remove any error messages\n\n    if (isValid.valid) {\n      removeError(field, _settings);\n      return;\n    } // Otherwise, show an error message\n\n\n    showError(field, isValid.errors, _settings);\n    return isValid;\n  };\n  /**\n   * Validate all fields in a form or section\n   * @param  {Node} target The form or section to validate fields in\n   * @return {Array}       An array of fields with errors\n   */\n\n\n  publicAPIs.validateAll = function (target) {\n    return Array.prototype.filter.call(target.querySelectorAll('input, select, textarea'), function (field) {\n      var validate = publicAPIs.validate(field);\n      return validate && !validate.valid;\n    });\n  };\n  /**\n   * Run a validation on field blur\n   */\n\n\n  var blurHandler = function blurHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Special-case for file field, blurs as soon as the selector kicks in\n\n    if (event.target.type === 'file') return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  }; // Leave this as opt-in for the moment, for better file-support\n\n\n  var changeHandler = function changeHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Only handle change events for some fields\n\n    if (event.target.type !== 'file' && event.target.type !== 'checkbox' && event.target.type !== 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Run a validation on a fields with errors when the value changes\n   */\n\n\n  var inputHandler = function inputHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Only run on fields with errors\n\n    if (!event.target.classList.contains(settings.fieldClass)) return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Run a validation on a fields with errors when the value changes\n   */\n\n\n  var clickHandler = function clickHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Only run on fields with errors\n\n    if (!event.target.classList.contains(settings.fieldClass)) return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Validate an entire form when it's submitted\n   */\n\n\n  var submitHandler = function submitHandler(event) {\n    // Only run on matching elements\n    if (!event.target.isSameNode(formElement)) return; // Prevent form submission\n\n    event.preventDefault(); // Validate each field\n\n    var errors = publicAPIs.validateAll(event.target); // If there are errors, focus on the first one\n\n    if (errors.length > 0) {\n      errors[0].focus();\n      emitEvent(event.target, 'bouncerFormInvalid', {\n        errors: errors\n      });\n      return;\n    } // Otherwise, submit if not disabled\n\n\n    if (!settings.disableSubmit) {\n      event.target.submit();\n    } // Emit custom event\n\n\n    if (settings.emitEvents) {\n      emitEvent(event.target, 'bouncerFormValid');\n    }\n  };\n  /**\n   * Destroy the current plugin instantiation\n   */\n\n\n  publicAPIs.destroy = function () {\n    // Remove event listeners\n    if (settings.validateOnBlur) {\n      document.removeEventListener('blur', blurHandler, true);\n      document.removeEventListener('input', inputHandler, false);\n      document.removeEventListener('change', changeHandler, false);\n      document.removeEventListener('click', clickHandler, false);\n    }\n\n    if (settings.validateOnSubmit) {\n      document.removeEventListener('submit', submitHandler, false);\n    } // Remove all errors\n\n\n    removeAllErrors(formElement, settings); // Remove novalidate attribute\n\n    removeNoValidate(formElement); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(document, 'bouncerDestroyed', {\n        settings: settings\n      });\n    } // Reset settings\n\n\n    settings = null;\n  };\n  /**\n   * Instantiate a new instance of the plugin\n   */\n\n\n  var init = function init() {\n    // Create settings\n    settings = extend(defaults, options || {}); // Add novalidate attribute\n\n    addNoValidate(formElement); // Event Listeners\n\n    if (settings.validateOnBlur) {\n      document.addEventListener('blur', blurHandler, true);\n      document.addEventListener('input', inputHandler, false);\n      document.addEventListener('change', changeHandler, false);\n      document.addEventListener('click', clickHandler, false);\n    }\n\n    if (settings.validateOnSubmit) {\n      document.addEventListener('submit', submitHandler, false);\n    } // Emit custom event\n\n\n    if (settings.emitEvents) {\n      emitEvent(document, 'bouncerInitialized', {\n        settings: settings\n      });\n    }\n  }; //\n  // Inits & Event Listeners\n  //\n\n\n  init();\n  return publicAPIs;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/utils/bouncer.js\n");

/***/ }),

/***/ "./src/js/utils/globals.js":
/*!*********************************!*\
  !*** ./src/js/utils/globals.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formdata_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formdata-polyfill */ \"../../../../node_modules/formdata-polyfill/formdata.min.js\");\n__webpack_require__.g.t = function (string) {\n  var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (window.FormieTranslations) {\n    string = window.FormieTranslations[string] || string;\n  }\n\n  return string.replace(/{([a-zA-Z0-9]+)}/g, function (match, p1) {\n    if (replacements[p1]) {\n      return replacements[p1];\n    }\n\n    return match;\n  });\n}; //\n// Polyfills for IE11\n//\n// CustomEvent()\n\n\n(function () {\n  if (typeof window.CustomEvent === 'function') {\n    return false;\n  }\n\n  function CustomEvent(event, params) {\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: null\n    };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  window.CustomEvent = CustomEvent;\n})(); // FormData\n\n\n // closest\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n\n    do {\n      if (el.matches(s)) {\n        return el;\n      }\n\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvZ2xvYmFscy5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSxxQkFBTSxDQUFDQyxDQUFQLEdBQVcsVUFBU0MsTUFBVCxFQUFvQztFQUFBLElBQW5CQyxZQUFtQix1RUFBSixFQUFJOztFQUMzQyxJQUFJQyxNQUFNLENBQUNDLGtCQUFYLEVBQStCO0lBQzNCSCxNQUFNLEdBQUdFLE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEJILE1BQTFCLEtBQXFDQSxNQUE5QztFQUNIOztFQUVELE9BQU9BLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlLG1CQUFmLEVBQW9DLFVBQUNDLEtBQUQsRUFBUUMsRUFBUixFQUFlO0lBQ3RELElBQUlMLFlBQVksQ0FBQ0ssRUFBRCxDQUFoQixFQUFzQjtNQUNsQixPQUFPTCxZQUFZLENBQUNLLEVBQUQsQ0FBbkI7SUFDSDs7SUFFRCxPQUFPRCxLQUFQO0VBQ0gsQ0FOTSxDQUFQO0FBT0gsQ0FaRCxFQWNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQSxDQUFDLFlBQVc7RUFDUixJQUFJLE9BQU9ILE1BQU0sQ0FBQ0ssV0FBZCxLQUE4QixVQUFsQyxFQUE4QztJQUFFLE9BQU8sS0FBUDtFQUFlOztFQUUvRCxTQUFTQSxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0M7SUFDaENBLE1BQU0sR0FBR0EsTUFBTSxJQUFJO01BQUVDLE9BQU8sRUFBRSxLQUFYO01BQWtCQyxVQUFVLEVBQUUsS0FBOUI7TUFBcUNDLE1BQU0sRUFBRTtJQUE3QyxDQUFuQjtJQUNBLElBQU1DLEdBQUcsR0FBR0MsUUFBUSxDQUFDQyxXQUFULENBQXFCLGFBQXJCLENBQVo7SUFDQUYsR0FBRyxDQUFDRyxlQUFKLENBQW9CUixLQUFwQixFQUEyQkMsTUFBTSxDQUFDQyxPQUFsQyxFQUEyQ0QsTUFBTSxDQUFDRSxVQUFsRCxFQUE4REYsTUFBTSxDQUFDRyxNQUFyRTtJQUNBLE9BQU9DLEdBQVA7RUFDSDs7RUFFRFgsTUFBTSxDQUFDSyxXQUFQLEdBQXFCQSxXQUFyQjtBQUNILENBWEQsS0FhQTs7O0NBR0E7O0FBQ0EsSUFBSSxDQUFDVSxPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQXZCLEVBQWdDO0VBQzVCRixPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQWxCLEdBQTRCRixPQUFPLENBQUNDLFNBQVIsQ0FBa0JFLGlCQUFsQixJQUF1Q0gsT0FBTyxDQUFDQyxTQUFSLENBQWtCRyxxQkFBckY7QUFDSDs7QUFFRCxJQUFJLENBQUNKLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkksT0FBdkIsRUFBZ0M7RUFDNUJMLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkksT0FBbEIsR0FBNEIsVUFBU0MsQ0FBVCxFQUFZO0lBQ3BDLElBQUlDLEVBQUUsR0FBRyxJQUFUOztJQUVBLEdBQUc7TUFDQyxJQUFJQSxFQUFFLENBQUNMLE9BQUgsQ0FBV0ksQ0FBWCxDQUFKLEVBQW1CO1FBQUUsT0FBT0MsRUFBUDtNQUFZOztNQUNqQ0EsRUFBRSxHQUFHQSxFQUFFLENBQUNDLGFBQUgsSUFBb0JELEVBQUUsQ0FBQ0UsVUFBNUI7SUFDSCxDQUhELFFBR1NGLEVBQUUsS0FBSyxJQUFQLElBQWVBLEVBQUUsQ0FBQ0csUUFBSCxLQUFnQixDQUh4Qzs7SUFJQSxPQUFPLElBQVA7RUFDSCxDQVJEO0FBU0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvZ2xvYmFscy5qcz81MjczIl0sInNvdXJjZXNDb250ZW50IjpbImdsb2JhbC50ID0gZnVuY3Rpb24oc3RyaW5nLCByZXBsYWNlbWVudHMgPSB7fSkge1xuICAgIGlmICh3aW5kb3cuRm9ybWllVHJhbnNsYXRpb25zKSB7XG4gICAgICAgIHN0cmluZyA9IHdpbmRvdy5Gb3JtaWVUcmFuc2xhdGlvbnNbc3RyaW5nXSB8fCBzdHJpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC97KFthLXpBLVowLTldKyl9L2csIChtYXRjaCwgcDEpID0+IHtcbiAgICAgICAgaWYgKHJlcGxhY2VtZW50c1twMV0pIHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlbWVudHNbcDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xufTtcblxuLy9cbi8vIFBvbHlmaWxscyBmb3IgSUUxMVxuLy9cblxuLy8gQ3VzdG9tRXZlbnQoKVxuKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogbnVsbCB9O1xuICAgICAgICBjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcbn0pKCk7XG5cbi8vIEZvcm1EYXRhXG5pbXBvcnQgJ2Zvcm1kYXRhLXBvbHlmaWxsJztcblxuLy8gY2xvc2VzdFxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgbGV0IGVsID0gdGhpcztcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZWwubWF0Y2hlcyhzKSkgeyByZXR1cm4gZWw7IH1cbiAgICAgICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgICAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwidCIsInN0cmluZyIsInJlcGxhY2VtZW50cyIsIndpbmRvdyIsIkZvcm1pZVRyYW5zbGF0aW9ucyIsInJlcGxhY2UiLCJtYXRjaCIsInAxIiwiQ3VzdG9tRXZlbnQiLCJldmVudCIsInBhcmFtcyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZXZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJjbG9zZXN0IiwicyIsImVsIiwicGFyZW50RWxlbWVudCIsInBhcmVudE5vZGUiLCJub2RlVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/utils/globals.js\n");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eventKey\": () => (/* binding */ eventKey),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty),\n/* harmony export */   \"toBoolean\": () => (/* binding */ toBoolean)\n/* harmony export */ });\nvar isEmpty = function isEmpty(obj) {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\nvar toBoolean = function toBoolean(val) {\n  return !/^(?:f(?:alse)?|no?|0+)$/i.test(val) && !!val;\n};\nvar eventKey = function eventKey(eventName) {\n  var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!namespace) {\n    namespace = Math.random().toString(36).substr(2, 5);\n  }\n\n  return \"\".concat(eventName, \".\").concat(namespace);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBTUEsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU0MsR0FBVCxFQUFjO0VBQ2pDLE9BQU9BLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEdBQVosRUFBaUJHLE1BQWpCLEtBQTRCLENBQW5DLElBQXdDSCxHQUFHLENBQUNJLFdBQUosS0FBb0JILE1BQW5FO0FBQ0gsQ0FGTTtBQUlBLElBQU1JLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVNDLEdBQVQsRUFBYztFQUNuQyxPQUFPLENBQUMsMkJBQTJCQyxJQUEzQixDQUFnQ0QsR0FBaEMsQ0FBRCxJQUF5QyxDQUFDLENBQUNBLEdBQWxEO0FBQ0gsQ0FGTTtBQUlBLElBQU1FLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLFNBQVQsRUFBc0M7RUFBQSxJQUFsQkMsU0FBa0IsdUVBQU4sSUFBTTs7RUFDMUQsSUFBSSxDQUFDQSxTQUFMLEVBQWdCO0lBQ1pBLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxNQUFMLEdBQWNDLFFBQWQsQ0FBdUIsRUFBdkIsRUFBMkJDLE1BQTNCLENBQWtDLENBQWxDLEVBQXFDLENBQXJDLENBQVo7RUFDSDs7RUFFRCxpQkFBVUwsU0FBVixjQUF1QkMsU0FBdkI7QUFDSCxDQU5NIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzL3V0aWxzLmpzP2Q5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IHRvQm9vbGVhbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAhL14oPzpmKD86YWxzZSk/fG5vP3wwKykkL2kudGVzdCh2YWwpICYmICEhdmFsO1xufTtcblxuZXhwb3J0IGNvbnN0IGV2ZW50S2V5ID0gZnVuY3Rpb24oZXZlbnROYW1lLCBuYW1lc3BhY2UgPSBudWxsKSB7XG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgbmFtZXNwYWNlID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtldmVudE5hbWV9LiR7bmFtZXNwYWNlfWA7XG59O1xuIl0sIm5hbWVzIjpbImlzRW1wdHkiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJ0b0Jvb2xlYW4iLCJ2YWwiLCJ0ZXN0IiwiZXZlbnRLZXkiLCJldmVudE5hbWUiLCJuYW1lc3BhY2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/utils.js\n");

/***/ }),

/***/ "./src/scss/formie-base.scss":
/*!***********************************!*\
  !*** ./src/scss/formie-base.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9mb3JtaWUtYmFzZS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2Zvcm1pZS1iYXNlLnNjc3M/ZDAzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/formie-base.scss\n");

/***/ }),

/***/ "./src/scss/formie-theme.scss":
/*!************************************!*\
  !*** ./src/scss/formie-theme.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9mb3JtaWUtdGhlbWUuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9mb3JtaWUtdGhlbWUuc2Nzcz82NjZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scss/formie-theme.scss\n");

/***/ }),

/***/ "./src/scss/fields/phone-country.scss":
/*!********************************************!*\
  !*** ./src/scss/fields/phone-country.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9maWVsZHMvcGhvbmUtY291bnRyeS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2ZpZWxkcy9waG9uZS1jb3VudHJ5LnNjc3M/NTAyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/fields/phone-country.scss\n");

/***/ }),

/***/ "./src/scss/fields/tags.scss":
/*!***********************************!*\
  !*** ./src/scss/fields/tags.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9maWVsZHMvdGFncy5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2ZpZWxkcy90YWdzLnNjc3M/ZWE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/fields/tags.scss\n");

/***/ }),

/***/ "../../../../node_modules/formdata-polyfill/formdata.min.js":
/*!******************************************************************!*\
  !*** ../../../../node_modules/formdata-polyfill/formdata.min.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*! formdata-polyfill. MIT License. Jimmy W?rting <https://jimmy.warting.se/opensource> */\n;(function(){var h;function l(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var m=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction n(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var q=n(this);function r(a,b){if(b)a:{var c=q;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&m(c,a,{configurable:!0,writable:!0,value:b})}}\nr(\"Symbol\",function(a){function b(f){if(this instanceof b)throw new TypeError(\"Symbol is not a constructor\");return new c(d+(f||\"\")+\"_\"+e++,f)}function c(f,g){this.A=f;m(this,\"description\",{configurable:!0,writable:!0,value:g})}if(a)return a;c.prototype.toString=function(){return this.A};var d=\"jscomp_symbol_\"+(1E9*Math.random()>>>0)+\"_\",e=0;return b});\nr(\"Symbol.iterator\",function(a){if(a)return a;a=Symbol(\"Symbol.iterator\");for(var b=\"Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \"),c=0;c<b.length;c++){var d=q[b[c]];\"function\"===typeof d&&\"function\"!=typeof d.prototype[a]&&m(d.prototype,a,{configurable:!0,writable:!0,value:function(){return u(l(this))}})}return a});function u(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}\nfunction v(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:l(a)}}var w;if(\"function\"==typeof Object.setPrototypeOf)w=Object.setPrototypeOf;else{var y;a:{var z={a:!0},A={};try{A.__proto__=z;y=A.a;break a}catch(a){}y=!1}w=y?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+\" is not extensible\");return a}:null}var B=w;function C(){this.m=!1;this.j=null;this.v=void 0;this.h=1;this.u=this.C=0;this.l=null}\nfunction D(a){if(a.m)throw new TypeError(\"Generator is already running\");a.m=!0}C.prototype.o=function(a){this.v=a};C.prototype.s=function(a){this.l={D:a,F:!0};this.h=this.C||this.u};C.prototype.return=function(a){this.l={return:a};this.h=this.u};function E(a,b){a.h=3;return{value:b}}function F(a){this.g=new C;this.G=a}F.prototype.o=function(a){D(this.g);if(this.g.j)return G(this,this.g.j.next,a,this.g.o);this.g.o(a);return H(this)};\nfunction I(a,b){D(a.g);var c=a.g.j;if(c)return G(a,\"return\"in c?c[\"return\"]:function(d){return{value:d,done:!0}},b,a.g.return);a.g.return(b);return H(a)}F.prototype.s=function(a){D(this.g);if(this.g.j)return G(this,this.g.j[\"throw\"],a,this.g.o);this.g.s(a);return H(this)};\nfunction G(a,b,c,d){try{var e=b.call(a.g.j,c);if(!(e instanceof Object))throw new TypeError(\"Iterator result \"+e+\" is not an object\");if(!e.done)return a.g.m=!1,e;var f=e.value}catch(g){return a.g.j=null,a.g.s(g),H(a)}a.g.j=null;d.call(a.g,f);return H(a)}function H(a){for(;a.g.h;)try{var b=a.G(a.g);if(b)return a.g.m=!1,{value:b.value,done:!1}}catch(c){a.g.v=void 0,a.g.s(c)}a.g.m=!1;if(a.g.l){b=a.g.l;a.g.l=null;if(b.F)throw b.D;return{value:b.return,done:!0}}return{value:void 0,done:!0}}\nfunction J(a){this.next=function(b){return a.o(b)};this.throw=function(b){return a.s(b)};this.return=function(b){return I(a,b)};this[Symbol.iterator]=function(){return this}}function K(a,b){b=new J(new F(b));B&&a.prototype&&B(b,a.prototype);return b}function L(a,b){a instanceof String&&(a+=\"\");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var f=c++;return{value:b(f,a[f]),done:!1}}d=!0;return{done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e}\nr(\"Array.prototype.entries\",function(a){return a?a:function(){return L(this,function(b,c){return[b,c]})}});\nif(\"undefined\"!==typeof Blob&&(\"undefined\"===typeof FormData||!FormData.prototype.keys)){var M=function(a,b){for(var c=0;c<a.length;c++)b(a[c])},N=function(a){return a.replace(/\\r?\\n|\\r/g,\"\\r\\n\")},O=function(a,b,c){if(b instanceof Blob){c=void 0!==c?String(c+\"\"):\"string\"===typeof b.name?b.name:\"blob\";if(b.name!==c||\"[object Blob]\"===Object.prototype.toString.call(b))b=new File([b],c);return[String(a),b]}return[String(a),String(b)]},P=function(a,b){if(a.length<b)throw new TypeError(b+\" argument required, but only \"+\na.length+\" present.\");},Q=\"object\"===typeof globalThis?globalThis:\"object\"===typeof window?window:\"object\"===typeof self?self:this,R=Q.FormData,S=Q.XMLHttpRequest&&Q.XMLHttpRequest.prototype.send,T=Q.Request&&Q.fetch,U=Q.navigator&&Q.navigator.sendBeacon,V=Q.Element&&Q.Element.prototype,W=Q.Symbol&&Symbol.toStringTag;W&&(Blob.prototype[W]||(Blob.prototype[W]=\"Blob\"),\"File\"in Q&&!File.prototype[W]&&(File.prototype[W]=\"File\"));try{new File([],\"\")}catch(a){Q.File=function(b,c,d){b=new Blob(b,d||{});\nObject.defineProperties(b,{name:{value:c},lastModified:{value:+(d&&void 0!==d.lastModified?new Date(d.lastModified):new Date)},toString:{value:function(){return\"[object File]\"}}});W&&Object.defineProperty(b,W,{value:\"File\"});return b}}var escape=function(a){return a.replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\")},X=function(a){this.i=[];var b=this;a&&M(a.elements,function(c){if(c.name&&!c.disabled&&\"submit\"!==c.type&&\"button\"!==c.type&&!c.matches(\"form fieldset[disabled] *\"))if(\"file\"===\nc.type){var d=c.files&&c.files.length?c.files:[new File([],\"\",{type:\"application/octet-stream\"})];M(d,function(e){b.append(c.name,e)})}else\"select-multiple\"===c.type||\"select-one\"===c.type?M(c.options,function(e){!e.disabled&&e.selected&&b.append(c.name,e.value)}):\"checkbox\"===c.type||\"radio\"===c.type?c.checked&&b.append(c.name,c.value):(d=\"textarea\"===c.type?N(c.value):c.value,b.append(c.name,d))})};h=X.prototype;h.append=function(a,b,c){P(arguments,2);this.i.push(O(a,b,c))};h.delete=function(a){P(arguments,\n1);var b=[];a=String(a);M(this.i,function(c){c[0]!==a&&b.push(c)});this.i=b};h.entries=function b(){var c,d=this;return K(b,function(e){1==e.h&&(c=0);if(3!=e.h)return c<d.i.length?e=E(e,d.i[c]):(e.h=0,e=void 0),e;c++;e.h=2})};h.forEach=function(b,c){P(arguments,1);for(var d=v(this),e=d.next();!e.done;e=d.next()){var f=v(e.value);e=f.next().value;f=f.next().value;b.call(c,f,e,this)}};h.get=function(b){P(arguments,1);var c=this.i;b=String(b);for(var d=0;d<c.length;d++)if(c[d][0]===b)return c[d][1];\nreturn null};h.getAll=function(b){P(arguments,1);var c=[];b=String(b);M(this.i,function(d){d[0]===b&&c.push(d[1])});return c};h.has=function(b){P(arguments,1);b=String(b);for(var c=0;c<this.i.length;c++)if(this.i[c][0]===b)return!0;return!1};h.keys=function c(){var d=this,e,f,g,k,p;return K(c,function(t){1==t.h&&(e=v(d),f=e.next());if(3!=t.h){if(f.done){t.h=0;return}g=f.value;k=v(g);p=k.next().value;return E(t,p)}f=e.next();t.h=2})};h.set=function(c,d,e){P(arguments,2);c=String(c);var f=[],g=O(c,\nd,e),k=!0;M(this.i,function(p){p[0]===c?k&&(k=!f.push(g)):f.push(p)});k&&f.push(g);this.i=f};h.values=function d(){var e=this,f,g,k,p,t;return K(d,function(x){1==x.h&&(f=v(e),g=f.next());if(3!=x.h){if(g.done){x.h=0;return}k=g.value;p=v(k);p.next();t=p.next().value;return E(x,t)}g=f.next();x.h=2})};X.prototype._asNative=function(){for(var d=new R,e=v(this),f=e.next();!f.done;f=e.next()){var g=v(f.value);f=g.next().value;g=g.next().value;d.append(f,g)}return d};X.prototype._blob=function(){var d=\"----formdata-polyfill-\"+\nMath.random(),e=[],f=\"--\"+d+'\\r\\nContent-Disposition: form-data; name=\"';this.forEach(function(g,k){return\"string\"==typeof g?e.push(f+escape(N(k))+('\"\\r\\n\\r\\n'+N(g)+\"\\r\\n\")):e.push(f+escape(N(k))+('\"; filename=\"'+escape(g.name)+'\"\\r\\nContent-Type: '+(g.type||\"application/octet-stream\")+\"\\r\\n\\r\\n\"),g,\"\\r\\n\")});e.push(\"--\"+d+\"--\");return new Blob(e,{type:\"multipart/form-data; boundary=\"+d})};X.prototype[Symbol.iterator]=function(){return this.entries()};X.prototype.toString=function(){return\"[object FormData]\"};\nV&&!V.matches&&(V.matches=V.matchesSelector||V.mozMatchesSelector||V.msMatchesSelector||V.oMatchesSelector||V.webkitMatchesSelector||function(d){d=(this.document||this.ownerDocument).querySelectorAll(d);for(var e=d.length;0<=--e&&d.item(e)!==this;);return-1<e});W&&(X.prototype[W]=\"FormData\");if(S){var Y=Q.XMLHttpRequest.prototype.setRequestHeader;Q.XMLHttpRequest.prototype.setRequestHeader=function(d,e){Y.call(this,d,e);\"content-type\"===d.toLowerCase()&&(this.B=!0)};Q.XMLHttpRequest.prototype.send=\nfunction(d){d instanceof X?(d=d._blob(),this.B||this.setRequestHeader(\"Content-Type\",d.type),S.call(this,d)):S.call(this,d)}}T&&(Q.fetch=function(d,e){e&&e.body&&e.body instanceof X&&(e.body=e.body._blob());return T.call(this,d,e)});U&&(Q.navigator.sendBeacon=function(d,e){e instanceof X&&(e=e._asNative());return U.call(this,d,e)});Q.FormData=X};})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/formdata-polyfill/formdata.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/formie": 0,
/******/ 			"css/fields/phone-country": 0,
/******/ 			"css/fields/tags": 0,
/******/ 			"css/formie-theme": 0,
/******/ 			"css/formie-base": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["formieConfigChunkLoadingGlobal"] = self["formieConfigChunkLoadingGlobal"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/js/formie.js")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/formie-base.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/formie-theme.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/fields/phone-country.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/fields/tags.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;